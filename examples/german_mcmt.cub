type state = Invalid | Shared | Exclusive
type msg = Empty | Reqs | Reqe | Inv | Invack | Gnts | Gnte

globals = 
	 Exgntd[bool] 
	 Curcmd[msg] 
	 Curptr[proc] 

arrays = 
         Chan1[proc,msg] 
	 Chan2[proc,msg] 
	 Chan3[proc,msg] 
         Cache[proc,state] 
	 Invset[proc,bool] 
	 Shrset[proc,bool]

(* init : slight difference between German.in *)

init (z){ 
       Chan1[z] = Empty &&
       Chan2[z] = Empty &&
       Chan3[z] = Empty &&
       Shrset[z] = False &&
       Invset[z] = False &&
       Exgntd = False &&
       Curcmd = Empty &&
       Cache[z] = Invalid }

(*unsafe (z)  {Invset[z] = True && Shrset[z] = False }*)

(*unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Shared  }*)

(*unsafe (z) { Chan3[z] = Invack && Cache[z] <> Invalid }*)

unsafe (z) { Chan2[z] = Gnte && Exgntd = False }


transition t1 (n)
require { Curcmd = Reqs && Exgntd = False && Curptr = n && Chan2[n] = Empty }
assign { Curcmd := Empty }
Chan2[j] := {| j = n: Gnts | _ : Chan2[j] }
Shrset[j] := {| j = n: True | _ : Shrset[j] }

transition t2 (n)
require { Curcmd = Reqe && Curptr = n && Chan2[n] = Empty && Shrset[n] = False }
uguard (j) { Shrset[j] = False }
assign { Exgntd := True; Curcmd := Empty }
Chan2[j] := {| j = n : Gnte | _ : Chan2[j] }
Shrset[j] := {| j = n : True | _ : Shrset[j] }

transition t3 (n)
require { Curcmd = Empty && Chan1[n] <> Empty }
assign { Invset := Shrset; Curcmd := Chan1[n]; Curptr := n }
Chan1[j] := {| j = n : Empty | _ : Chan1[j] }

transition t4 (n)
require { Curcmd = Reqs && Exgntd = True && 
	  Invset[n] = True && Chan2[n] = Empty }
Chan2[j] := {| j = n : Inv | _ : Chan2[j] }
Invset[j] := {| j = n : False | _ : Invset[j] }

transition t5 (n)
require { Curcmd = Reqe && Invset[n] = True && Chan2[n] = Empty }
Chan2[j] := {| j = n : Inv | _ : Chan2[j] }
Invset[j] := {| j = n : False | _ : Invset[j] }

transition t6 (n)
require { Curcmd <> Empty && Chan3[n] = Invack }
assign { Exgntd := False }
Chan3[j] := {| j = n : Empty | _ : Chan3[j] }
Shrset[j] := {| j = n : False | _ : Shrset[j] }

transition t7 (n)
require { Cache[n] = Invalid && Chan1[n] = Empty }
Chan1[j] := {| j = n : Reqs | _ : Chan1[j] }

transition t8 (n)
require { Cache[n] = Invalid && Chan1[n] = Empty}
Chan1[j] := {| j = n : Reqe | _ : Chan1[j] }

transition t9 (n)
require { Cache[n] = Shared && Chan1[n] = Empty }
Chan1[j] := {| j = n : Reqe | _ : Chan1[j] }

transition t10 (n)
require { Chan2[n] = Inv && Chan3[n] = Empty }
Chan2[j] := {| j = n : Empty | _ : Chan2[j] }
Chan3[j] := {| j = n : Invack | _ : Chan3[j] }
Cache[j] := {| j = n : Invalid | _ : Cache[j] }

transition t11 (n)
require { Chan2[n] = Gnts }
Chan2[j] := {| j = n : Empty | _ : Chan2[j] }
Cache[j] := {| j = n : Shared | _ : Cache[j] }

transition t12 (n)
require { Chan2[n] = Gnte }
Chan2[j] := {| j = n : Empty | _ : Chan2[j] }
Cache[j] := {| j = n : Exclusive | _ : Cache[j] }