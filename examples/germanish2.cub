type req = Empty | Reqs | Reqe
type cstate = Invalid | Shared | Exclusive


var Exgntd : bool
var Curcmd : req
var Curptr : proc

array Cache[proc] : cstate
array Shrset[proc] : bool
array Chan[proc] : req

init (z) { Cache[z] = Invalid && Shrset[z] = False &&
           Exgntd = False && Curcmd = Empty && Chan[z]=Empty }

unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Shared }

transition send_shared (n)
require { Chan[n] = Empty && Cache[n] = Invalid }
Chan[j] := {| j = n : Reqs | _ : Chan[j] }

transition recv_shared (n)
require { Curcmd = Empty && Chan[n] = Reqs }
assign { Curcmd := Reqs; Curptr := n }
Chan[j] := {| j = n : Empty | _ : Chan[j] }
    
transition send_exclusive (n)
require { Chan[n] = Empty && Cache[n] <> Exclusive }
Chan[j] := {| j = n : Reqe | _ : Chan[j] }

transition recv_exclusive (n)
require { Curcmd = Empty && Chan[n] = Reqe }
assign { Curcmd := Reqe; Curptr := n }
Chan[j] := {| j = n : Empty | _ : Chan[j] }
    
transition inv_1 (n)
require { Shrset[n]=True  &&  Curcmd = Reqe }
assign { Exgntd := False }
Cache[j] := {| j = n : Invalid | _ : Cache[j] }
Shrset[j] := {| j= n : False | _ : Shrset[j] }

transition inv_2 (n)
require { Shrset[n]=True  && Curcmd = Reqs && Exgntd=True }
assign { Exgntd := False }
Cache[j] := {| j = n : Invalid | _ : Cache[j] }
Shrset[j] := {| j= n : False | _ : Shrset[j] }
    
transition gnt_shared (n)
require { Curptr = n && Curcmd = Reqs && Exgntd = False }
assign { Curcmd := Empty }
Shrset[j] := {| j = n : True | _ : Shrset[j] }
Cache[j] := {| j = n : Shared | _ : Cache[j] }

transition gnt_exclusive (n)
require { Shrset[n] = False && Curcmd = Reqe && Exgntd = False && Curptr = n}
uguard (l) { Shrset[l] = False }
assign { Curcmd := Empty; Exgntd := True }
Shrset[j] := {| j = n : True | _ : Shrset[j] }
Cache[j] := {| j = n : Exclusive | _ : Cache[j] }
