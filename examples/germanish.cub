type req = Empty | Reqs | Reqe
type cstate = Invalid | Shared | Exclusive

var Exgntd : bool
var Curcmd : req
var Curptr : proc

array Cache[proc] : cstate
array Shrset[proc] : bool

init (z) { Cache[z] = Invalid && Shrset[z] = False &&
           Exgntd = False && Curcmd = Empty }

unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Shared }

forward (z1 z2, z1) {
  Cache[z1] = Invalid && Shrset[z1] = False &&
  Cache[z2] = Shared && Shrset[z2] = True
  (* Exgntd = False && Curcmd = Empty *)
}

(* forward (z1 z2, z2) {  *)
(*   Cache[z1] = Invalid && Shrset[z1] = False && *)
(*   Cache[z2] = Shared (\* && Shrset[z2] = False  *\) *)
(*   (\* && Exgntd = False && Curcmd = Empty *\) *)
(* } *)

transition req_shared (n)
requires { Curcmd = Empty && Cache[n] = Invalid }
{ 
  Curcmd := Reqs; 
  Curptr := n ;
}
    
transition req_exclusive (n)
requires { Curcmd = Empty && Cache[n] <> Exclusive }
{ 
  Curcmd := Reqe; 
  Curptr := n;
}
    
transition inv_1 (n)
requires { Shrset[n]=True  &&  Curcmd = Reqe }
{ 
  Exgntd := False;
  Cache[j] := case 
   	       | j = n : Invalid 
	       | _ : Cache[j];
  Shrset[j] := case 
  	       | j= n : False 
	       | _ : Shrset[j]; 
}

transition inv_2 (n)
requires { Shrset[n]=True  && Curcmd = Reqs && Exgntd=True }
{ 
  Exgntd := False;
  Cache[j] := case 
  	        | j = n : Invalid 
		| _ : Cache[j];
  Shrset[j] := case 
  	        | j= n : False 
		| _ : Shrset[j];
}
    
transition gnt_shared (n)
requires { Curptr = n && Curcmd = Reqs && Exgntd = False }
{ 
  Curcmd := Empty;
  Shrset[j] := case 
  	        | j = n : True 
		| _ : Shrset[j];
  Cache[j] := case 
  	        | j = n : Shared 
		| _ : Cache[j];
}

transition gnt_exclusive (n)
requires { 
	  Shrset[n] = False && Curcmd = Reqe && Exgntd = False && Curptr = n &&
	  forall_other l. Shrset[l] = False }
{ 
  Curcmd := Empty; 
  Exgntd := True;
  Shrset[j] := case 
  	        | j = n : True 
		| _ : Shrset[j];
  Cache[j] := case 
  	        | j = n : Exclusive
		| _ : Cache[j];
}
