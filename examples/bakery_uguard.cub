type t = Idle | Wait | Crit
array A[proc] : t

init (z) { A[z] = Idle }
unsafe (z1 z2) { A[z1] = Crit && A[z2] = Crit }

transition tr1_1 (z)
requires { A[z] = Idle && forall_other j. j < z }
{ 
  A[j] := case
           | j=z : Wait
	   | _ : A[j];
}

transition tr1_2 (z)
requires { A[z] = Idle && forall_other j. ( z < j && A[j] = Idle ) }
{ 
  A[j] := case
           | j=z : Wait
	   | _ : A[j];
}

transition tr2_1 (z)
requires { A[z] = Wait && forall_other j. z < j }
{
  A[j] := case
           | j=z : Crit
	   | _ : A[j];
}

transition tr2_2 (z)
requires { A[z] = Wait && forall_other j. ( j < z && A[j] = Idle ) }
{ 
  A[j] := case
       	   | j=z : Crit
	   | _ : A[j];
}

transition tr3 (z)
requires { A[z] = Crit }
{ 
  A[j] := case
           | j = z : Idle 
	   | _ : A[j];
}
