type msg = Empty | Reqs | Reqe
type state = Invalid | Shared | Exclusive

var Exgntd : bool
var Curcmd : msg
var Curptr : proc

array Cache[proc] : state
array Shrset[proc] : bool

init (z) { Cache[z] = Invalid && Shrset[z] = False &&
           Exgntd = False && Curcmd = Empty }

(*
invariant (z) { Exgntd = False && Cache[z] = Exclusive }

invariant (z) { Cache[z] = Shared && Shrset[z] = False }
*)

(* unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Exclusive } *)
(* unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Shared } *)
unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] <> Invalid  }

(*unsafe (z1 z2) { Cache[z1] = Exclusive && Shrset[z2] = True }

unsafe (z) { Cache[z] = Shared && Shrset[z] = False }

unsafe (z) { Exgntd = False && Cache[z] = Exclusive }
*)

(*
unsafe (z) { Cache[z] = Invalid && Shrset[z] = True }
*)


(*unsafe (z1 z2) { Cache[z1] = Exclusive && Shrset[z2] = True }*)

transition req_shared (n)
requires { Curcmd = Empty && Cache[n] = Invalid }
{ 
  Curcmd := Reqs; 
  Curptr := n ;
}
    
transition req_exclusive (n)
requires { Curcmd = Empty && Cache[n] <> Exclusive }
{ 
  Curcmd := Reqe; 
  Curptr := n;
}
    
transition inv_1 (n)
requires { Shrset[n]=True  &&  Curcmd = Reqe }
{ 
  Exgntd := False;
  Cache[n] := Invalid;
  Shrset[n] :=False;
}

transition inv_2 (n)
requires { Shrset[n]=True  && Curcmd = Reqs && Exgntd=True }
{ 
  Exgntd := False;
  Cache[n] := Shared;
  Shrset[n] := True;
}
    
transition gnt_shared (n)
requires { Curptr = n && Curcmd = Reqs && Exgntd = False }
{ 
  Curcmd := Empty;
  Shrset[n] := True;
  Cache[n] := Shared;
}

transition gnt_exclusive (n)
requires { Shrset[n] = False && Curcmd = Reqe &&
           Exgntd = False && Curptr = n &&
	   forall_other l. Shrset[l] = False }
{ 
  Curcmd := Empty; 
  Exgntd := True;
  Shrset[n] := True;
  Cache[n] := Exclusive;
}
