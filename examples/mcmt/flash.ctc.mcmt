define-type cache_state (:mcmt (subrange 1 3) :)
/* CACHE_I | CACHE_S | CACHE_E */

define-type node_cmd (:mcmt (subrange 1 3) :)
/* NODE_None | NODE_Get | NODE_GetX */

define-type uni_cmd (:mcmt (subrange 1 6) :)
/* UNI_None | UNI_Get | UNI_GetX | UNI_Put | UNI_PutX | UNI_Nak */

define-type inv_cmd (:mcmt (subrange 1 3) :)
/* INV_None | INV_Inv | INV_InvAck */

define-type rp_cmd (:mcmt (subrange 1 2) :)
/* RP_None | RP_Replace */

define-type wb_cmd (:mcmt (subrange 1 2) :)
/* WB_None | WB_Wb */

define-type shwb_cmd (:mcmt (subrange 1 3) :)
/* SHWB_None | SHWB_ShWb | SHWB_FAck */

define-type nakc_cmd (:mcmt (subrange 1 3) :)
/* NAKC_None | NAKC_Nakc */

define-type sort (:mcmt (subrange 1 2) :)
/* Data | Proc */



/*---------------------------- Home process -----------------------------*/
global nat Home [nat]
global node_cmd ProcCmd_home [nat]
global bool InvMarked_home [nat]
global cache_state CacheState_home [nat]
global nat CacheData_home [nat]

global uni_cmd UniMsg_Cmd_home [nat]
global nat UniMsg_Proc_home [nat]
global nat UniMsg_Data_home [nat]

global inv_cmd InvMsg_Cmd_home [nat]
global rp_cmd RpMsg_Cmd_home [nat]


/*------------------------------ Processes ------------------------------*/

local node_cmd ProcCmd [nat]
local bool InvMarked [nat]
local cache_state CacheState [nat]
local nat CacheData [nat]

/*------------------------------ Directory ------------------------------*/

global bool Dir_Pending [nat]
global bool Dir_Local [nat]
global bool Dir_Dirty [nat]
global bool Dir_HeadVld [nat]
global nat Dir_HeadPtr [nat]
global bool Dir_ShrVld [nat]
local bool Dir_ShrSet [nat]
local bool Dir_InvSet [nat]
global bool Dir_ShrSet_home [nat]
global bool Dir_InvSet_home [nat]


/*------------------------------- Memory --------------------------------*/

global nat MemData [nat]

/*------------------------------- Network -------------------------------*/

local uni_cmd UniMsg_Cmd [nat]
local nat UniMsg_Proc [nat]
local nat UniMsg_Data [nat]

local inv_cmd InvMsg_Cmd [nat]
local rp_cmd RpMsg_Cmd [nat]

global wb_cmd WbMsg_Cmd [nat]
global nat WbMsg_Proc [nat]
global nat WbMsg_Data [nat]

global shwb_cmd ShWbMsg_Cmd [nat]
global nat ShWbMsg_Proc [nat]
global nat ShWbMsg_Data [nat]

global nakc_cmd NakcMsg_Cmd [nat]


/*-------------------------- Auxiliary variables ------------------------*/

global nat CurrData [nat]
global nat PrevData [nat]


global bool Collecting [nat]

local sort Sort [nat]



/* initial configuration */
initial (universal p:nat) {

     (Home[p] != p) AND

     (Dir_Pending[p] = false) AND
     (Dir_Local[p] = false) AND
     (Dir_Dirty[p] = false) AND
     (Dir_HeadVld[p] = false) AND
     (Dir_ShrVld[p] = false) AND

     (WbMsg_Cmd[p] = 1) AND
     (ShWbMsg_Cmd[p] = 1) AND
     (NakcMsg_Cmd[p] = 1) AND

     (ProcCmd[p] = 1) AND
     (InvMarked[p] = false) AND
     (CacheState[p] =1) AND

     (Dir_ShrSet[p] = false) AND
     (Dir_InvSet[p] = false) AND

     (UniMsg_Cmd[p] = 1) AND
     (InvMsg_Cmd[p] = 1) AND
     (RpMsg_Cmd[p] = 1) AND


     (ProcCmd_home[p] = 1) AND
     (InvMarked_home[p] = false) AND
     (CacheState_home[p] =1) AND

     (Dir_ShrSet_home[p] = false) AND
     (Dir_InvSet_home[p] = false) AND

     (UniMsg_Cmd_home[p] = 1) AND
     (InvMsg_Cmd_home[p] = 1) AND
     (RpMsg_Cmd_home[p] = 1) AND

     (CurrData[p] = MemData[p]) AND
     (PrevData[p] = MemData[p]) AND

     (Collecting[p] = false)

}

/*-------------------------- Control property ---------------------------*/

unsafe (existential p:nat) {
CacheState_home[p] = 3 AND CacheState[p] = 3 }
       
unsafe (existential i:nat, existential j:nat) {
CacheState[i] = 3 AND CacheState[j] = 3 }


/*--------------------------- Data properties ---------------------------*/

unsafe (existential z:nat) { Dir_Dirty[z] = false AND MemData[z] != CurrData[z] }

unsafe (existential z:nat)  { CacheState_home[z] = 3 AND CacheData_home[z] != CurrData[z] }

unsafe (existential p:nat) {
CacheState[p] = 3 AND CacheData[p] != CurrData[p] }

unsafe (existential z:nat)  { CacheState_home[z] = 2 AND Collecting[z] = true AND
             CacheData_home[z] != PrevData[z] }
             
unsafe (existential p:nat) {
CacheState[p] = 2 AND Collecting[p] = true AND
CacheData[p] != PrevData[p] }

unsafe (existential z:nat)  { CacheState_home[z] = 2 AND Collecting[z] = false AND
             CacheData_home[z] != CurrData[z] }
             
unsafe (existential p:nat) {
CacheState[p] = 2 AND Collecting[p] = false AND
CacheData[p] != CurrData[p] }




/* store */
transition (existential src:nat, existential d:nat) {
  guard : Sort[src] = 2 AND Sort[d] = 1 AND CacheState[src] = 3 
  update:
	CacheData[src] := d;
  	CurrData := d;
}
/* store_home */
transition (existential p:nat, existential d:nat) {
  guard : Sort[d] = 1 AND CacheState_home[p] = 3 
  update:
	CacheData_home := d;
  	CurrData := d;
}

/*----------------------- Muphi rule PI_Remote_Get ----------------------*/
/* pi_Remote_Get */
transition (existential src:nat) {
  guard :  Sort[src] = 2 AND Home[src] != src AND 
  	   ProcCmd[src] = 1 AND
  	   CacheState[src] =1 
  update:
	ProcCmd[src] := 2;
 	UniMsg_Cmd[src] := 2;
  	UniMsg_Proc[src] := Home[src];
}


/*--------------------- Muphi rule PI_Local_Get_Get ---------------------*/
/* pi_Local_Get_Get_Head */
transition (existential p:nat) {
  guard : ProcCmd_home[p] = 1 AND
  	   CacheState_home[p] =1 AND
  	   Dir_Pending[p] = false AND Dir_Dirty[p] = true 
  update:
	ProcCmd_home := 2;
  	Dir_Pending := true;
	UniMsg_Cmd_home := 2;
	UniMsg_Proc_home := Dir_HeadPtr[p];
  	Collecting := false;
}


/*--------------------- Muphi rule PI_Local_Get_Put ---------------------*/
/* pi_Local_Get_Put_InvM */
transition (existential p:nat) {
  guard : ProcCmd_home[p] = 1 AND
	   CacheState_home[p] =1 AND
           Dir_Pending[p] = false AND Dir_Dirty[p] = false AND
	   InvMarked_home[p] = true 
  update:
	Dir_Local := true;
  	ProcCmd_home := 1;
    	InvMarked_home := false;
    	CacheState_home :=1;
}
/* pi_Local_Get_Put */
transition (existential p:nat) {
  guard : ProcCmd_home[p] = 1 AND
	   CacheState_home[p] =1 AND
           Dir_Pending[p] = false AND Dir_Dirty[p] = false AND
	   InvMarked_home[p] = false 
  update:
	Dir_Local := true;
  	ProcCmd_home := 1;
    	CacheState_home := 2;
    	CacheData_home := MemData[p];
}



/*---------------------- Muphi rule PI_Remote_GetX ----------------------*/
/* pi_Remote_GetX */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   ProcCmd[src] = 1 AND
  	   CacheState[src] =1 
  update:
  ProcCmd[src] := 3;
  UniMsg_Cmd[src] := 3;
  UniMsg_Proc[src] := Home[src];
}


/*-------------------- Muphi rule PI_Local_GetX_GetX --------------------*/
/* pi_Local_GetX_GetX */
transition (existential p:nat) {
  guard : ProcCmd_home[p] = 1 AND
  	   CacheState_home[p] != 3 AND
  	   Dir_Pending[p] = false AND Dir_Dirty[p] = true 
  update:
  ProcCmd_home := 3;
  Dir_Pending := true;
  UniMsg_Cmd_home := 3;
  UniMsg_Proc_home := Dir_HeadPtr[p];
  Collecting := false;
}


/*-------------------- Muphi rule PI_Local_GetX_PutX --------------------*/
/* pi_Local_GetX_PutX_HeadVld */
transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
	   CacheState_home[z] != 3 AND
	   Dir_Pending[z] = false AND Dir_Dirty[z] = false AND
	   Dir_HeadVld[z] = true AND Dir_HeadPtr[z] = z
  update:
	Dir_Local := true;
 	Dir_Dirty := true;

    	Dir_Pending := true;
    	Dir_HeadVld := false;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        
        Dir_InvSet[z] := true;
        InvMsg_Cmd[z] := 2;
        
        lambda (p:nat; z != p) {
               case ( Dir_HeadPtr[z] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrVld[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               case ( Dir_ShrSet[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
        }

	Collecting := true;
        PrevData := CurrData[z];

  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := MemData[z];
}

transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
	   CacheState_home[z] != 3 AND
	   Dir_Pending[z] = false AND Dir_Dirty[z] = false AND
	   Dir_HeadVld[z] = true AND
           Dir_ShrVld[z] = true AND Dir_ShrSet[z] = true
  update:
	Dir_Local := true;
 	Dir_Dirty := true;

    	Dir_Pending := true;
    	Dir_HeadVld := false;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        
        Dir_InvSet[z] := true;
        InvMsg_Cmd[z] := 2;
        
        lambda (p:nat; z != p) {
               case ( Dir_HeadPtr[z] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrVld[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               case ( Dir_ShrSet[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
        }

	Collecting := true;
        PrevData := CurrData[z];

  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := MemData[z];
}

transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
	   CacheState_home[z] != 3 AND
	   Dir_Pending[z] = false AND Dir_Dirty[z] = false AND
	   Dir_HeadVld[z] = true AND Dir_HeadPtr[z] != z AND
           Dir_ShrSet[z] = false
  update:
	Dir_Local := true;
 	Dir_Dirty := true;

    	Dir_Pending := true;
    	Dir_HeadVld := false;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        
        Dir_InvSet[z] := false;
        InvMsg_Cmd[z] := 1;
        
        lambda (p:nat; z != p) {
               case ( Dir_HeadPtr[z] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrVld[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               case ( Dir_ShrSet[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
        }

	Collecting := true;
        PrevData := CurrData[z];

  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := MemData[z];
}

transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
	   CacheState_home[z] != 3 AND
	   Dir_Pending[z] = false AND Dir_Dirty[z] = false AND
	   Dir_HeadVld[z] = true AND Dir_HeadPtr[z] != z AND
           Dir_ShrVld[z] = false
  update:
	Dir_Local := true;
 	Dir_Dirty := true;

    	Dir_Pending := true;
    	Dir_HeadVld := false;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        
        Dir_InvSet[z] := false;
        InvMsg_Cmd[z] := 1;
        
        lambda (p:nat; z != p) {
               case ( Dir_HeadPtr[z] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrVld[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               case ( Dir_ShrSet[p] = false ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
        }

	Collecting := true;
        PrevData := CurrData[z];

  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := MemData[z];
}


/* pi_Local_GetX_PutX */
transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
	   CacheState_home[z] != 3 AND
	   Dir_Pending[z] = false AND Dir_Dirty[z] = false AND
	   Dir_HeadVld[z] = false 
  update:
	Dir_Local := true;
 	Dir_Dirty := true;

  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := MemData[z];
}


/*---------------------- Muphi rule PI_Remote_PutX ----------------------*/
/* pi_Remote_PutX */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   ProcCmd[dst] = 1 AND
  	   CacheState[dst] = 3 
  update:
	CacheState[dst] :=1;
  	WbMsg_Cmd := 2;
  	WbMsg_Proc := dst;
  	WbMsg_Data := CacheData[dst];
}


/*---------------------- Muphi rule PI_Local_PutX -----------------------*/
/* pi_Local_PutX_pending */
transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
  	   CacheState_home[z] = 3 AND 
	   Dir_Pending[z] = true 
  update:
	CacheState_home :=1;
    	Dir_Dirty := false;
    	MemData := CacheData_home[z];
}
/* pi_Local_PutX */
transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
  	   CacheState_home[z] = 3 AND 
	   Dir_Pending[z] = false 
  update:
	CacheState_home :=1;
    	Dir_Local := false;
    	Dir_Dirty := false;
    	MemData := CacheData_home[z];
}


/*-------------------- Muphi rule PI_Remote_Replace ---------------------*/
/* pi_Remote_Replace */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND 
	   ProcCmd[src] = 1 AND
  	   CacheState[src] = 2 
  update:
  CacheState[src] :=1;
  RpMsg_Cmd[src] := 2;
}


/*--------------------- Muphi rule PI_Local_Replace ---------------------*/
/* pi_Local_Replace */
transition (existential z:nat) {
  guard : ProcCmd_home[z] = 1 AND
  	   CacheState_home[z] = 2 
  update:
	Dir_Local := false;
  	CacheState_home :=1;
}



/*-------------------------- Muphi rule NI_Nak --------------------------*/
/* ni_Nak */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND UniMsg_Cmd[dst] = 6 
  update:
	UniMsg_Cmd[dst] := 1;
  	ProcCmd[dst] := 1;
  	InvMarked[dst] := false;
}
/* ni_Nak_home */
transition (existential z:nat) {
  guard : UniMsg_Cmd_home[z] = 6 
  update:
	UniMsg_Cmd_home := 1;
  	ProcCmd_home := 1;
  	InvMarked_home := false;
}

/*----------------------- Muphi rule NI_Nak_Clear -----------------------*/
/* ni_Nak_Clear */
transition (existential z:nat) {
  guard : NakcMsg_Cmd[z] = 2 
  update:
	NakcMsg_Cmd := 1;
  	Dir_Pending := false;
}


/*--------------------- Muphi rule NI_Local_Get_Nak ---------------------*/
/* ni_Local_Get_Nak1 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
  	   Dir_Pending[src] = true 
  update:
  UniMsg_Cmd[src] := 6;
  UniMsg_Proc[src] := Home[src];
}
/* ni_Local_Get_Nak */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
  	   Dir_Dirty[src] = true AND Dir_Local[src] = true AND
	   CacheState_home[src] != 3 
  update:
  UniMsg_Cmd[src] := 6;
  UniMsg_Proc[src] := Home[src];
}
/* ni_Local_Get_Nak */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
    	   Dir_Dirty[src] = true AND Dir_Local[src] = false AND 
	   Dir_HeadPtr[src] = src 
  update:
  UniMsg_Cmd[src] := 6;
  UniMsg_Proc[src] := Home[src];
}


/*--------------------- Muphi rule NI_Local_Get_Get ---------------------*/
/* ni_Local_Get_Get */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
	   Dir_Pending[src] = false AND
	   Dir_Dirty[src] = true AND 
	   Dir_Local[src] = false AND
	   Dir_HeadPtr[src] != src 
  update:
  Dir_Pending := true;
  UniMsg_Cmd[src] := 2;
  UniMsg_Proc[src] := Dir_HeadPtr[src];
  Collecting := false;
}


/*--------------------- Muphi rule NI_Local_Get_Put ---------------------*/
/* ni_Local_Get_Put1_Head */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
  	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true 
  update:
	Dir_ShrVld := true;
      	Dir_ShrSet[src] := true;

	Dir_InvSet_home := Dir_ShrSet_home[src];
        Dir_InvSet[src] := true;
        lambda (p:nat; p != src) {
               case (p = src):
                  Dir_InvSet[p] := true;
               otherwise:
                  Dir_InvSet[p] := Dir_ShrSet[p];
        }

    	UniMsg_Cmd[src] := 4;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
}
/* ni_Local_Get_Put1 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
  	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = false 
  update:
	Dir_HeadVld := true;
      	Dir_HeadPtr := src;
    	UniMsg_Cmd[src] := 4;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
}

/* ni_Local_Get_Put2_dirty */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   RpMsg_Cmd[src] != 2 AND
  	   Dir_Pending[src] = false AND
	   Dir_Dirty[src] = true AND
	   Dir_Local[src] = true AND CacheState_home[src] = 3 
  update:
	Dir_Dirty := false;
 	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	MemData := CacheData_home[src];
    	CacheState_home := 2;
    	UniMsg_Cmd[src] := 4;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := CacheData_home[src];
}


/*-------------------- Muphi rule NI_Remote_Get_Nak ---------------------*/
/* ni_Remote_Get_Nak */
transition (existential src:nat, existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[src] != dst AND
  	   UniMsg_Cmd[src] = 2 AND
  	   UniMsg_Proc[src] = dst AND
  	   CacheState[dst] != 3 
  update:
	UniMsg_Cmd[src] := 6;
  	UniMsg_Proc[src] := dst;
  	NakcMsg_Cmd := 2;
}


/*-------------------- Muphi rule NI_Remote_Get_Put ---------------------*/
/* ni_Remote_Get_Put */
transition (existential src:nat, existential dst:nat) {
  guard : Sort[src] = 2 AND Sort[dst] = 2 AND Home[src] != dst AND Home[src] != src AND
  	 UniMsg_Cmd[src] = 2 AND
  	 UniMsg_Proc[src] = dst AND
  	 CacheState[dst] = 3 
  update:
	lambda (j:nat; j != src) {
           case (j = dst):
             CacheState[j] := 2;
           otherwise:
             CacheState[j] := CacheState[j];
        }
        
  	UniMsg_Cmd[src] := 4;
  	UniMsg_Proc[src] := dst;
  	UniMsg_Data[src] := CacheData[dst];
    	ShWbMsg_Cmd := 2;
    	ShWbMsg_Proc := src;
    	ShWbMsg_Data := CacheData[dst];
}
/* ni_Remote_Get_Put_home */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	 UniMsg_Cmd_home[dst] = 2 AND
  	 UniMsg_Proc_home[dst] = dst AND
  	 CacheState[dst] = 3 
  update:
	CacheState[dst] := 2;
  	UniMsg_Cmd_home := 4;
  	UniMsg_Proc_home := dst;
  	UniMsg_Data_home := CacheData[dst];
}


/*-------------------- Muphi rule NI_Local_GetX_Nak ---------------------*/
/* ni_Local_GetX_Nak1 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   Dir_Pending[src] = true 
  update:
	UniMsg_Cmd[src] := 6;
  	UniMsg_Proc[src] := Home[src];
}
/* ni_Local_GetX_Nak */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
           Dir_Dirty[src] = true AND Dir_Local[src] = true AND
	   CacheState_home[src] != 3 
  update:
	UniMsg_Cmd[src] := 6;
  	UniMsg_Proc[src] := Home[src];
}
/* ni_Local_GetX_Nak */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
    	   Dir_Dirty[src] = true AND Dir_Local[src] = false AND
	   Dir_HeadPtr[src] = src 
  update:
	UniMsg_Cmd[src] := 6;
  	UniMsg_Proc[src] := Home[src];
}


/*------------------- Muphi rule NI_Local_GetX_GetX ---------------------*/
/* ni_Local_GetX_GetX */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
  	   Dir_Pending[src] = false AND
	   Dir_Dirty[src] = true AND
	   Dir_Local[src] = false AND 
	   Dir_HeadPtr[src] != src 
  update:
	Dir_Pending := true;
  	UniMsg_Cmd[src] := 3;
  	UniMsg_Proc[src] := Dir_HeadPtr[src];
  	Collecting := false;
}



/*------------------- Muphi rule NI_Local_GetX_PutX ---------------------*/
/* ni_Local_GetX_PutX_1 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = false AND
	   Dir_Local[src] = true AND
	   ProcCmd_home[src] = 2 
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
        InvMarked_home := true;
}
/* ni_Local_GetX_PutX_2 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = false AND
	   Dir_Local[src] = true AND 
	   ProcCmd_home[src] != 2 
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
}
/* ni_Local_GetX_PutX_3 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = false AND
	   Dir_Local[src] = false 
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
}
/* ni_Local_GetX_PutX_4 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
           Dir_HeadPtr[src] = src  AND
	   Dir_Local[src] = true AND
	   ProcCmd_home[src] = 2 AND
	   Dir_ShrSet_home[src] = false
  uguard: (Dir_ShrSet[p] = false )
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
        InvMarked_home := true;
}
/* ni_Local_GetX_PutX_5 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
           Dir_HeadPtr[src] = src  AND
	   Dir_Local[src] = true AND
	   ProcCmd_home[src] != 2 AND
	   Dir_ShrSet_home[src] = false
  uguard: (Dir_ShrSet[p] = false )
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
}
/* ni_Local_GetX_PutX_6 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
           Dir_HeadPtr[src] = src  AND
	   Dir_Local[src] = false AND
	   Dir_ShrSet_home[src] = false
  uguard: (Dir_ShrSet[p] = false )
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;

	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
    	CacheState_home :=1;
}
/* ni_Local_GetX_PutX_7 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}




/* ni_Local_GetX_PutX_8 */
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
	

    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}




/* ni_Local_GetX_PutX_8_home */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = true AND
      	   ProcCmd_home[src] != 2 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false 
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];
      	CacheState_home :=1;
    
    	Collecting := true;
    	PrevData := CurrData[src];
}

/* ni_Local_GetX_PutX_9 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] != src AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}

/* ni_Local_GetX_PutX_10 */
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet[pp] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}


/* ni_Local_GetX_PutX_10_home */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = true AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_ShrSet[p] = true ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = true
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := true;
                   InvMsg_Cmd[p] := 2;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
  	   Dir_Dirty[src] = false AND
	   Dir_HeadVld[src] = true AND 
	   Dir_HeadPtr[src] = src AND
	   Dir_ShrSet_home[src] = true AND
	   Dir_Local[src] = false 
           AND Dir_ShrVld[src] = false AND Dir_HeadVld[src] = false
  update:
	Dir_Pending := true;
    	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
	
	Dir_ShrSet_home := false;
      	Dir_ShrSet := lambda (p:nat) { false }

	Dir_InvSet_home := false;
	InvMsg_Cmd_home := 1;
        Dir_InvSet[src] := false;
        InvMsg_Cmd[src] := 1;
        
        lambda (p:nat; src != p) {
               case ( Dir_HeadPtr[p] = p ):
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
               otherwise:
                   Dir_InvSet[p] := false;
                   InvMsg_Cmd[p] := 1;
        }
        
    	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := MemData[src];

    	Collecting := true;
    	PrevData := CurrData[src];
}

/* ni_Local_GetX_PutX_11 */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = Home[src] AND
	   Dir_Pending[src] = false AND
	   Dir_Dirty[src] = true AND
  	   Dir_Local[src] = true AND CacheState_home[src] = 3 
  update:
	Dir_Local := false;
    	Dir_Dirty := true;
    	Dir_HeadVld := true;
    	Dir_HeadPtr := src;
    	Dir_ShrVld := false;
    
	Dir_ShrSet_home := false;
	Dir_ShrSet := lambda (p:nat) { false }
	
	Dir_InvSet_home := false;
      	Dir_InvSet := lambda (p:nat) { false }
    
	UniMsg_Cmd[src] := 5;
    	UniMsg_Proc[src] := Home[src];
    	UniMsg_Data[src] := CacheData_home[src];
    	CacheState_home :=1;
}




/*-------------------- Muphi rule NI_Local_GetX_Nak ---------------------*/
/* ni_Remote_GetX_Nak */
transition (existential src:nat, existential dst:nat) {
  guard : Sort[src] = 2 AND Sort[dst] = 2 AND Home[src] != dst AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = dst AND
  	   CacheState[dst] != 3 
  update:
	UniMsg_Cmd[src] := 6;
  	UniMsg_Proc[src] := dst;
  	NakcMsg_Cmd := 2;
}
/* ni_Remote_GetX_Nak_home */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   UniMsg_Cmd_home[dst] = 3 AND
  	   UniMsg_Proc_home[dst] = dst AND
  	   CacheState[dst] != 3 
  update:
	UniMsg_Cmd_home := 6;
  	UniMsg_Proc_home := dst;
  	NakcMsg_Cmd := 2;
}


/*------------------- Muphi rule NI_Remote_GetX_PutX --------------------*/
/* ni_Remote_GetX_PutX_home */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   UniMsg_Cmd_home[dst] = 3 AND
  	   UniMsg_Proc_home[dst] = dst AND
  	   CacheState[dst] = 3 
  update:
	CacheState[dst] :=1;
  	UniMsg_Cmd_home := 5;
  	UniMsg_Proc_home := dst;
  	UniMsg_Data_home := CacheData[dst];
}
/* ni_Remote_GetX_PutX */
transition (existential src:nat, existential dst:nat) {
  guard : Sort[src] = 2 AND Sort[dst] = 2 AND Home[src] != dst AND Home[src] != src AND
  	   UniMsg_Cmd[src] = 3 AND
  	   UniMsg_Proc[src] = dst AND
  	   CacheState[dst] = 3 
  update:
	lambda (j:nat; j != src) {
           case (j = dst):
             CacheState[j] := 1;
           otherwise:
             CacheState[j] := CacheState[j];
        }
  	UniMsg_Cmd[src] := 5;
  	UniMsg_Proc[src] := dst;
  	UniMsg_Data[src] := CacheData[dst];
    	ShWbMsg_Cmd := 3;
    	ShWbMsg_Proc := src;
}


/*----------------------- Muphi rule NI_Local_Put -----------------------*/
/* ni_Local_Put_inv */
transition (existential z:nat) {
  guard : UniMsg_Cmd_home[z] = 4 AND InvMarked_home[z] = true 
  update:
	UniMsg_Cmd_home := 1;
  	Dir_Pending := false;
  	Dir_Dirty := false;
  	Dir_Local := true;
  	MemData := UniMsg_Data_home[z];
  	ProcCmd_home := 1;
    	InvMarked_home := false;
    	CacheState_home :=1;
}
/* ni_Local_Put */
transition (existential z:nat) {
  guard : UniMsg_Cmd_home[z] = 4 AND InvMarked_home[z] = false 
  update:
	UniMsg_Cmd_home := 1;
  	Dir_Pending := false;
  	Dir_Dirty := false;
  	Dir_Local := true;
  	MemData := UniMsg_Data_home[z];
  	ProcCmd_home := 1;
    	CacheState_home := 2;
    	CacheData_home := UniMsg_Data_home[z];
}


/*----------------------- Muphi rule NI_Remote_Put ----------------------*/
/* ni_Remote_Put_inv */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   UniMsg_Cmd[dst] = 4 AND
	   InvMarked[dst] = true 
  update:
	UniMsg_Cmd[dst] := 1;
  	ProcCmd[dst] := 1;
    	InvMarked[dst] := false;
    	CacheState[dst] :=1;
}
/* ni_Remote_Put */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   UniMsg_Cmd[dst] = 4 AND
	   InvMarked[dst] = false 
  update:
	UniMsg_Cmd[dst] := 1;
  	ProcCmd[dst] := 1;
    	CacheState[dst] := 2;
    	CacheData[dst] := UniMsg_Data[dst];
}


/*----------------- Muphi rule NI_Local_PutXAcksDone -------------------*/
/* ni_Local_PutXAcksDone */
transition (existential z:nat) {
  guard : UniMsg_Cmd_home[z] = 5 
  update:
	UniMsg_Cmd_home := 1;
  	Dir_Pending := false;
  	Dir_Local := true;
  	Dir_HeadVld := false;
  	ProcCmd_home := 1;
  	InvMarked_home := false;
  	CacheState_home := 3;
  	CacheData_home := UniMsg_Data_home[z];
}


/*---------------------- Muphi rule NI_Remote_PutX ----------------------*/
/* ni_Remote_PutX */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	 UniMsg_Cmd[dst] = 5 AND
  	 ProcCmd[dst] = 3 
  update:
	UniMsg_Cmd[dst] := 1;
  	ProcCmd[dst] := 1;
  	InvMarked[dst] := false;
  	CacheState[dst] := 3;
  	CacheData[dst] := UniMsg_Data[dst];
}


/*-------------------------- Muphi rule NI_Inv --------------------------*/
/* ni_Inv_get */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   InvMsg_Cmd[dst] = 2 AND
	   ProcCmd[dst] = 2 
  update:
	InvMsg_Cmd[dst] := 3;
 	CacheState[dst] :=1;
    	InvMarked[dst] := true;
}
/* ni_Inv */
transition (existential dst:nat) {
  guard : Sort[dst] = 2 AND Home[dst] != dst AND
  	   InvMsg_Cmd[dst] = 2 AND
	   ProcCmd[dst] != 2 
  update:
	InvMsg_Cmd[dst] := 3;
 	CacheState[dst] :=1;
}


/*------------------------- Muphi rule NI_InvAck ------------------------*/
/* ni_InvAck_exists */
transition (existential src:nat, existential pp:nat) {
  guard : Sort[src] = 2 AND Sort[pp] = 2 AND Home[src] != src AND
  	   InvMsg_Cmd[src] = 3 AND
  	   Dir_Pending[src] = true AND 
	   Dir_InvSet[src] = true AND
	   Dir_InvSet[pp] = true 
  update:
	InvMsg_Cmd[src] := 1;
  	Dir_InvSet[src] := false;
}
/* ni_InvAck_exists_home */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   InvMsg_Cmd[src] = 3 AND
  	   Dir_Pending[src] = true AND 
	   Dir_InvSet[src] = true AND
	   Dir_InvSet_home[src] = true 
  update:
	InvMsg_Cmd[src] := 1;
  	Dir_InvSet[src] := false;
}
/* ni_InvAck_done_1 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   InvMsg_Cmd[src] = 3 AND
  	   Dir_Pending[src] = true AND 
	   Dir_InvSet[src] = true AND
	   Dir_Local[src] = true AND Dir_Dirty[src] = false AND
	   Dir_InvSet_home[src] = false
  uguard: (Dir_InvSet[p] = false )
  update:
	InvMsg_Cmd[src] := 1;
  	Dir_InvSet[src] := false;
    	Dir_Pending := false;
      	Dir_Local := false;
    	Collecting := false;
}
/* ni_InvAck_done_2 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   InvMsg_Cmd[src] = 3 AND
  	   Dir_Pending[src] = true AND 
	   Dir_InvSet[src] = true AND
	   Dir_Local[src] = false AND
	   Dir_InvSet_home[src] = false
  uguard: (Dir_InvSet[p] = false )
  update:
	InvMsg_Cmd[src] := 1;
  	Dir_InvSet[src] := false;
    	Dir_Pending := false;
    	Collecting := false;
}
/* ni_InvAck_done_3 */
transition (existential src:nat, universal p:nat) {
  guard : Sort[src] = 2 AND Home[src] != src AND
  	   InvMsg_Cmd[src] = 3 AND
  	   Dir_Pending[src] = true AND 
	   Dir_InvSet[src] = true AND
	   Dir_Dirty[src] = true AND
	   Dir_InvSet_home[src] = false
  uguard: (Dir_InvSet[p] = false )
  update:
	InvMsg_Cmd[src] := 1;
  	Dir_InvSet[src] := false;
    	Dir_Pending := false;
    	Collecting := false;
}


/*--------------------------- Muphi rule NI_Wb --------------------------*/
/* ni_Wb */
transition (existential z:nat) {
  guard : WbMsg_Cmd[z] = 2 
  update:
	WbMsg_Cmd := 1;
  	Dir_Dirty := false;
  	Dir_HeadVld := false;
  	MemData := WbMsg_Data[z];
}


/*-------------------------- Muphi rule NI_FAck -------------------------*/
/* ni_FAck_dirty */
transition (existential z:nat) {
  guard : ShWbMsg_Cmd[z] = 3 AND Dir_Dirty[z] = true 
  update:
	ShWbMsg_Cmd := 1;
  	Dir_Pending := false;
    	Dir_HeadPtr := ShWbMsg_Proc[z];
}
/* ni_FAck */
transition (existential z:nat) {
  guard : ShWbMsg_Cmd[z] = 3 AND Dir_Dirty[z] = false 
  update:
	ShWbMsg_Cmd := 1;
  	Dir_Pending := false;
}


/*-------------------------- Muphi rule NI_ShWb -------------------------*/
/* ni_ShWb_home */
transition (existential z:nat) {
  guard : ShWbMsg_Cmd[z] = 2 AND ShWbMsg_Proc[z] = Home[z] 
  update:
	ShWbMsg_Cmd := 1;
  	Dir_Pending := false;
  	Dir_Dirty := false;
  	Dir_ShrVld := true;
	

	Dir_ShrSet_home := true;
	Dir_InvSet_home := true;

    	Dir_InvSet := lambda (p:nat) { Dir_ShrSet[p] }

  	MemData := ShWbMsg_Data[z];
}
/* ni_ShWb */
transition (existential z:nat) {
  guard : ShWbMsg_Cmd[z] = 2 AND ShWbMsg_Proc[z] != Home[z]
          AND ShWbMsg_Proc[z] = z
  update:
	ShWbMsg_Cmd := 1;
  	Dir_Pending := false;
  	Dir_Dirty := false;
  	Dir_ShrVld := true;
	
        Dir_ShrSet[z] := true;
        Dir_InvSet[z] := true;
             
        lambda (p:nat; p != z) {
           case ( p = ShWbMsg_Proc[z] ):
             Dir_ShrSet[p] := true;
             Dir_InvSet[p] := true;
	   otherwise:
             Dir_ShrSet[p] := Dir_ShrSet[p];
             Dir_InvSet[p] := Dir_ShrSet[p];
        }
        
	Dir_InvSet_home := Dir_ShrSet_home[z];
  	MemData := ShWbMsg_Data[z];
}

transition (existential z:nat) {
  guard : ShWbMsg_Cmd[z] = 2 AND ShWbMsg_Proc[z] != Home[z]
          AND ShWbMsg_Proc[z] != z
  update:
	ShWbMsg_Cmd := 1;
  	Dir_Pending := false;
  	Dir_Dirty := false;
  	Dir_ShrVld := true;
	
        lambda (p:nat; p != z) {
           case ( p = ShWbMsg_Proc[z] ):
             Dir_ShrSet[p] := true;
             Dir_InvSet[p] := true;
	   otherwise:
             Dir_ShrSet[p] := Dir_ShrSet[p];
             Dir_InvSet[p] := Dir_ShrSet[p];
        }
        
	Dir_InvSet_home := Dir_ShrSet_home[z];
  	MemData := ShWbMsg_Data[z];
}


/*------------------------- Muphi rule NI_Replace -----------------------*/
/* ni_Replace_shrvld */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND RpMsg_Cmd[src] = 2 AND Dir_ShrVld[src] = true 
  update:
	RpMsg_Cmd[src] := 1;
    	Dir_ShrSet[src] := false;
    	Dir_InvSet[src] := false;
}
/* ni_Replace_shrvld_home */
transition (existential z:nat) {
  guard : RpMsg_Cmd_home[z] = 2 AND Dir_ShrVld[z] = true 
  update:
	RpMsg_Cmd_home := 1;
    	Dir_ShrSet_home := false;
    	Dir_InvSet_home := false;
}
/* ni_Replace */
transition (existential src:nat) {
  guard : Sort[src] = 2 AND RpMsg_Cmd[src] = 2 AND Dir_ShrVld[src] = false 
  update:
	RpMsg_Cmd[src] := 1;
}
/* ni_Replace_home */
transition (existential z:nat) {
  guard : RpMsg_Cmd_home[z] = 2 AND Dir_ShrVld[z] = false 
  update:
	RpMsg_Cmd_home := 1;
}
