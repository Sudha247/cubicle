(* Szymanski's mutual exclusion algorithm - Non atomic version
   Universal quantifications are replaced by iterative checks inside
   for loops

0 : Bx := true
1 : foreach y
      if x <> y then await not Sy
    done;
1': Bx := false
2 : Wx := true ; Sx := true ;
3 : if exists y. x <> y not By /\ not Wy
       then Sx := false ; goto 4
       else Wx := false ; goto 5
4 : await exists y. x <> y => Sy /\ not Wy then Wx := false ; Sx := true;
5 : await forall y. x <> y => not Wy
6 : await forall y. y < x => not Sy
7 : {Critical section}
    Sx := false ; goto 0
*)


type location = L0 | L1 | L2 | L3 | L4 | L5 | L6 | L7 

array A[proc] : location
array B[proc] : bool
array S[proc] : bool
array W[proc] : bool 
array X[proc, proc] : bool 

init (x y) { A[x] = L0 && S[x] = False && W[x] = False && B[x] = False &&
             X[x, y] = False }
 
unsafe (z1 z2) { A[z1] = L7 && A[z2] = L7 }

transition t0 (x)
requires { A[x] = L0 }
{ A[x] := L1; B[x] := True }

(* transition t1 (x) *)
(* requires { A[x] = L1 && forall_other y. S[y] = False } *)
(* { A[x] := L2; B[x] := False } *)

transition t1_enter_for (x y)
requires { A[x] = L1 && X[x,y] = False && S[y] = False &&
           forall_other z. (y < z || X[x,z] = True ) }
{ X[x,y] := True }

transition t1_exit_for (x)
requires { A[x] = L1 && forall_other y. X[x,y] = True }
{
  A[x] := L3;
  S[x] := True;
  W[x] := True;
  B[x] := False;
  (* Reset counter *)
  X[i,j] := case | i = x : False | _ : X[i,j];
}

(* transition t2 (x) *)
(* requires { A[x] = L2 } *)
(* { A[x] := L3; *)
(*   S[x] := True; *)
(*   W[x] := True; *)
(*   B[x] := False; } *)

transition t3_then (x y)
requires { A[x] = L3 && B[y] = False && W[y] = False }
{ A[x] := L4; S[x] := False }

transition t3_else (x)
requires { A[x] = L3 && forall_other y. ( B[y] =  True || W[y] = True ) }
{ A[x] := L5; W[x] := False }

transition t4 (x y)
requires { A[x] = L4 && S[y] = True && W[y] = False }
{ A[x] := L5; S[x] := True; W[x] := False }

transition t5 (x)
requires { A[x] = L5 && forall_other y. W[y] = False }
{ A[x] := L6 }

transition t6 (x)
requires { A[x] = L6 && forall_other j. (x <= j || S[j] = False) }
{ A[x] := L7 }


(* transition t6_enter_for (x y) *)
(* requires { A[x] = L6 && y < x &&  *)
(*            X[x,y] = False && S[y] = False (\* && *\) *)
(*            (\* forall_other z. (y < z || X[x,z] = True ) *\) } *)
(* { X[x,y] := True } *)

(* transition t6_exit_for (x) *)
(* requires { A[x] = L6 && forall_other y. (x < y || X[x,y] = True) } *)
(* {  *)
(*   A[x] := L7; *)
(*   (\* Reset counter *\) *)
(*   X[i,j] := case | i = x : False | _ : X[i,j]; *)
(* } *)



transition t7 (x)
requires { A[x] = L7 }
{ A[x] := L0; S[x] := False }



(*
Unsafe trace: t0(#2) -> t1_enter_for(#2, #1) -> t1_exit_for(#2) -> t0(#1) ->
               t1_enter_for(#1, #2) -> t2(#2) -> t3_else(#2) -> t5(#2) ->
               t1_exit_for(#1) -> t2(#1) -> t3_then(#1, #2) -> t6(#2) ->
               t4(#1, #2) -> t5(#1) -> t6(#1) -> unsafe[0]
The node 0 = A[#1] = L7 &&
             A[#2] = L7 is UNSAFE
*)