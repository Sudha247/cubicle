(*
type req = Empty | Reqs | Reqe
type cstate = Invalid | Shared | Exclusive
*)

var Exgntd : bool
var Curcmd : int
var Curptr : proc

array Cache[proc] : int
array Shrset[proc] : bool

init (z) { Cache[z] = 1 && Shrset[z] = False &&
           Exgntd = False && Curcmd = 1 }


(* encoding of subranges *)
invariant (z) { Cache[z] < 1 }
invariant (z) { 3 < Cache[z] }
invariant (z) { Curcmd < 1 }
invariant (z) { 3 < Curcmd }


unsafe (z1 z2) { Cache[z1] = 3 && Cache[z2] = 2 }


transition t1 (n)
require { Curcmd = 1 && Cache[n] = 1 }
assign { Curcmd := 2; Curptr := n }
    
transition t2 (n)
require { Curcmd = 1 && Cache[n] < 3 }
assign { Curcmd := 3; Curptr := n }
    
transition t3 (n)
require { Shrset[n]=True  &&  Curcmd = 3 }
assign { Exgntd := False }
Cache[j] := {| j = n : 1 | _ : Cache[j] }
Shrset[j] := {| j= n : False | _ : Shrset[j] }

transition t4 (n)
require { Shrset[n]=True  && Curcmd = 2 && Exgntd=True }
assign { Exgntd := False }
Cache[j] := {| j = n : 1 | _ : Cache[j] }
Shrset[j] := {| j= n : False | _ : Shrset[j] }
    
transition t5 (n)
require { Curptr = n && Curcmd = 2 && Exgntd = False }
assign { Curcmd := 1 }
Shrset[j] := {| j = n : True | _ : Shrset[j] }
Cache[j] := {| j = n : 2 | _ : Cache[j] }

transition t6 (n)
require {  Shrset[n] = False && Curcmd = 3 && Exgntd = False && Curptr = n}
uguard (l) { Shrset[l] = False }
assign { Curcmd := 1; Exgntd := True }
Shrset[j] := {| j = n : True | _ : Shrset[j] }
Cache[j] := {| j = n : 3 | _ : Cache[j] }
