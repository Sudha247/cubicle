type state = Invalid | Shared | Exclusive
type msg1 = Empty1 | Reqs | Reqe
type msg2 = Empty2 | Inv  | Gnts | Gnte
type msg3 = Empty3 | Invack

globals = Exgntd[bool] Curcmd[msg1] Curptr[proc] 

arrays = Chan1[proc,msg1] Chan2[proc,msg2] Chan3[proc,msg3] 
         Cache[proc,state] Invset[proc,bool] Shrset[proc,bool]

init (z) { 		   
     Chan1[z] = Empty1 &&
     Chan2[z] = Empty2 &&
     Chan3[z] = Empty3 &&
     Cache[z] = Invalid &&
     Invset[z] = False &&
     Shrset[z] = False &&
     Curcmd=Empty1 &&
     Exgntd = False }

(*
invariant (z) { Cache[z]=Exclusive && Exgntd = False }

invariant (z) { Shrset[z]=False && Cache[z]<>Invalid }

invariant (z) { Chan2[z] = Gnte && Exgntd = False }

invariant (z) { Invset[z] = True && Shrset[z] = False }

invariant (z) { Chan3[z] = Invack && Cache[z] <> Invalid }

invariant (z) { Chan3[z] = Invack && Chan2[z] <> empty }

invariant (z) { Chan2[z] <> Inv && Chan3[z] = Invack && Invset[n] = True }

invariant (z) { Chan2[z] <> Inv &&  Chan3[z] = Invack && Shrset[z] = False }
*)

(*
invariant (z) { Chan1[z] <> Empty && Chan1[z] <> Reqs && Chan1[z] <> Reqe }

invariant (z) { Chan2[z] <> Empty && Chan2[z] <> Inv && 
	        Chan2[z] <> Gnts && Chan2[z] <> Gnte  }
*)

unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Shared  }
(*unsafe (z1 z2) { Cache[z1] = Exclusive && Cache[z2] = Exclusive }*)


transition send_req_shared(n)
require { Cache[n] = Invalid && Chan1[n] = Empty1 }
Chan1[j] := {| j = n : Reqs | _ : Chan1[j] }

transition send_req_exclusive_1(n)
require { Cache[n] = Invalid && Chan1[n] = Empty1 }
Chan1[j] := {| j = n : Reqe | _ : Chan1[j] }

transition send_req_exclusive(n)
require { Cache[n] = Shared && Chan1[n] = Empty1 }
Chan1[j] := {| j = n : Reqe | _ : Chan1[j] }

transition recv_req_shared(n)
require { Curcmd = Empty1 && Chan1[n] = Reqs }
assign { Curcmd := Reqs; Curptr := n; Invset := Shrset }
Chan1[j] := {| j = n: Empty1 | _ : Chan1[j] }

transition recv_req_exclusive(n)
require { Curcmd = Empty1 && Chan1[n] = Reqe }
assign { Curcmd := Reqe; Curptr := n; Invset := Shrset }
Chan1[j] := {| j = n : Empty1 | _ : Chan1[j] }

transition send_inv_1(n)
require { Chan2[n] = Empty2 && Invset[n] = True && Curcmd = Reqe }
Chan2[j] := {| j = n : Inv | _ : Chan2[j] }
Invset[j] := {| j = n : False | _ : Invset[j] }

transition send_inv_2(n)
require { Chan2[n] = Empty2 && Invset[n] = True && 
	  Curcmd = Reqs && Exgntd = True}
Chan2[j] := {| j = n : Inv | _ : Chan2[j] }
Invset[j] := {| j = n : False | _ : Invset[j] }

transition send_invack(n)
require { Chan2[n] = Inv && Chan3[n] = Empty3 }
Chan2[j] := {| j = n : Empty2 | _ : Chan2[j] }
Chan3[j] := {| j = n : Invack | _ : Chan3[j] }
Cache[j] := {| j = n : Invalid | _ : Cache[j] }
    
transition recv_invack(n)
require { Chan3[n] = Invack && Curcmd <> Empty1 }
assign { Exgntd := False }
Chan3[j] := {| j = n : Empty3 | _ : Chan3[j] }
Shrset[j] := {| j = n : False | _ : Shrset[j] }


transition send_gnt_shared(n)
require { Curptr = n && Curcmd = Reqs && 
	  Exgntd = False && Chan2[n] = Empty2 }
assign { Curcmd := Empty1}
Chan2[j] := {| j = n : Gnts | _ : Chan2[j] }
Shrset[j] := {| j = n : True | _ : Shrset[j] }

transition send_gnt_exclusive(n)
require { Curptr = n && Curcmd = Reqe &&
	  Chan2[n] = Empty2 }
uguard (j) { Shrset[j] = False }
assign { Curcmd := Empty1; Exgntd := True }
Chan2[j] := {| j = n : Gnte | _ : Chan2[j] }
Shrset[j] := {| j = n : True | _ : Shrset[j] }

transition recv_gnt_shared(n)
require {Chan2[n] = Gnts}
Cache[j] := {| j = n : Shared | _ : Cache[j] }
Chan2[j] := {| j = n : Empty2 | _ : Chan2[j] }

transition recv_gnt_exclusive(n)
require { Chan2[n] = Gnte }
Cache[j] := {| j = n : Exclusive | _ : Cache[j] }
Chan2[j] := {| j = n : Empty2 | _ : Chan2[j] }