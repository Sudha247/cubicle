type msg = Empty | Req | Gnt | Inv | Invack

globals = Curreq[bool] Exgntd[bool] Curnode[proc] Exnode[proc]
arrays = Chan[proc,msg] Cache[proc,bool]

init (z) { 
     Chan[z] = Empty &&
     Cache[z] = False &&
     Curreq = False &&
     Exgntd = False }

unsafe (z1 z2) { Cache[z1] = True && Cache[z2] = True  }

transition send_req(n)
require { Cache[n] = False && Chan[n] = Empty }
Chan[j] := {| j = n : Req | _ : Chan[j] }
  
transition recv_req(n)
require { Curreq = False && Chan[n] = Req }
assign { Curreq := True; Curnode := n }

transition recv_gnt(n)
require { Chan[n] = Gnt }
Cache[j] := {| j = n : True | _ : Cache[j] }
Chan[j] := {| j = n : Empty | _ : Chan[j] }

transition send_invack(n)
require { Chan[n] = Inv }
Chan[j] := {| j = n : Invack | _ : Chan[j] }
Cache[j] := {| j=n : False | _ : Cache[j] }
    
transition recv_invack(n)
require { Chan[n] = Invack }
assign { Exgntd := False }
Chan[j] := {| j = n : Empty | _ : Chan[j] }


transition send_inv(n)
require { Exnode = n && Exgntd = True && Curreq = True && Chan[n] = Empty }
Chan[j] := {| j = n : Inv | _ : Chan[j] }

transition send_gnt(n)
require { Curnode = n && Curreq = True && Exgntd = False}
assign { Exgntd := True; Exnode := n; Curreq := False}
Chan[j] := {| j = n : Gnt | _ : Chan[j] }
