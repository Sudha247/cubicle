type state = Invalid | Shared | Exclusive
type msg = Empty | Get | GetX | Nak | Put | PutX
type wait = None | WGet | WGetX
type inv = Empty_inv | Inv | InvAck
type wb_msg = Empty_wb | WB
type shwb_msg = Empty_shwb | ShWB | FAck


var Home : proc
var Pending : bool
var Local : bool
var Dirty : bool
var Head_valid : bool
var Head_pointer : proc

var Nakc :bool

var WBnet_mtype : wb_msg
var WBnet_proc : proc

var ShWBnet_mtype : shwb_msg
var ShWBnet_proc : proc

array CacheState[proc] : state
array CacheWait[proc] : wait
array CacheInvmarked[proc] : bool

var CacheState_home : state
var CacheWait_home : wait
var CacheInvmarked_home : bool

array UnetProc[proc] : proc
array UnetMtype[proc] : msg

var UnetProc_home : proc
var UnetMtype_home : msg

array Invnet[proc] : inv
array Shlist[proc] : bool
array RP[proc] : bool
array Real[proc] : bool

var Invnet_home : inv
var Shlist_home : bool
var RP_home : bool
var Real_home : bool



init (p) {
     Home <> p &&

     Pending = False &&
     Local = False &&
     Dirty = False &&
     Head_valid = False &&

     Nakc = False &&

     WBnet_mtype = Empty_wb &&

     ShWBnet_mtype = Empty_shwb &&

     CacheState[p] = Invalid &&
     CacheWait[p] = None &&
     CacheInvmarked[p] = False &&

     CacheState_home = Invalid &&
     CacheWait_home = None &&
     CacheInvmarked_home = False &&

     UnetMtype[p] = Empty &&
     UnetMtype_home = Empty &&

     Invnet[p] = Empty_inv &&
     Shlist[p] = False &&
     Real[p] = False &&
     RP[p] = False &&

     Invnet_home = Empty_inv &&
     Shlist_home = False &&
     Real_home = False &&
     RP_home = False

}


(* invariant (z) { z = Home } *)



(* (\* Lemma 1 *\) *)
(* unsafe (i) { CacheState[i] = Exclusive && Dirty = False } *)
(* unsafe (i) { CacheState[i] = Exclusive && WBnet_mtype = WB } *)
(* unsafe (i) { CacheState[i] = Exclusive && ShWBnet_mtype = ShWB } *)
(* unsafe (i) { CacheState[i] = Exclusive && UnetMtype_home = Put } *)
(* unsafe (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX } *)


(* (\* Lemma 2 *\) *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { Invnet[i] = InvAck && Pending = False } *)
(* unsafe (i) { Invnet[i] = InvAck && Nakc = True } *)
(* unsafe (i) { Invnet[i] = InvAck && ShWBnet_mtype <> Empty_shwb } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = Get && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = GetX && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = PutX && UnetProc[j] <> Home } *)


(* invariant (j) { CacheState_home = Exclusive && UnetMtype[j] = PutX }  *)
(* invariant (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX }  *)




candidate (*1*) () { Pending = True &&
              CacheInvmarked_home = True
}

candidate (*2*) () { Pending = True &&
              Invnet_home <> Empty_inv
}

candidate (*3*) () { Pending = True &&
              Shlist_home = True
}

candidate (*4*) () { Pending = True &&
              RP_home = True
}

candidate (*5*) () { Pending = True &&
              Real_home = True
}

candidate (*6*) (z1) { Pending = True &&
              Shlist[z1] = True
}

candidate (*7*) () { Pending = False &&
              Nakc = True
}

candidate (*8*) () { Pending = False &&
              ShWBnet_mtype <> Empty_shwb
}

candidate (*9*) () { Pending = False &&
              CacheWait_home <> None
}

candidate (*10*) () { Pending = False &&
               CacheInvmarked_home = True
}

candidate (*11*) () { Pending = False &&
               UnetMtype_home <> Empty
}

candidate (*12*) () { Pending = False &&
               Invnet_home <> Empty_inv
}

candidate (*13*) () { Pending = False &&
               Shlist_home = True
}

candidate (*14*) () { Pending = False &&
               RP_home = True
}

candidate (*15*) () { Pending = False &&
               Real_home = True
}

candidate (*16*) () { Local = True &&
               Nakc = True
}

candidate (*17*) () { Local = True &&
               WBnet_mtype <> Empty_wb
}

candidate (*18*) () { Local = True &&
               ShWBnet_mtype <> Empty_shwb
}

candidate (*19*) () { Local = True &&
               CacheWait_home <> None
}

candidate (*20*) () { Local = True &&
               CacheInvmarked_home = True
}

candidate (*21*) () { Local = True &&
               UnetMtype_home <> Empty
}

candidate (*22*) () { Local = True &&
               Invnet_home <> Empty_inv
}

candidate (*23*) () { Local = True &&
               Shlist_home = True
}

candidate (*24*) () { Local = True &&
               RP_home = True
}

candidate (*25*) () { Local = True &&
               Real_home = True
}

candidate (*26*) (z1) { Local = True &&
               CacheState[z1] = Exclusive
}

candidate (*27*) (z1) { Local = True &&
               UnetMtype[z1] = PutX
}

candidate (*28*) () { Local = False &&
               CacheState_home = Exclusive
}

candidate (*29*) () { Local = False &&
               CacheInvmarked_home = True
}

candidate (*30*) () { Local = False &&
               Invnet_home <> Empty_inv
}

candidate (*31*) () { Local = False &&
               Shlist_home = True
}

candidate (*32*) () { Local = False &&
               RP_home = True
}

candidate (*33*) () { Local = False &&
               Real_home = True
}

candidate (*34*) () { Dirty = True &&
               CacheInvmarked_home = True
}

candidate (*35*) () { Dirty = True &&
               Invnet_home <> Empty_inv
}

candidate (*36*) () { Dirty = True &&
               Shlist_home = True
}

candidate (*37*) () { Dirty = True &&
               RP_home = True
}

candidate (*38*) () { Dirty = True &&
               Real_home = True
}

candidate (*39*) (z1) { Dirty = True &&
               Shlist[z1] = True
}

candidate (*40*) () { Dirty = False &&
               WBnet_mtype <> Empty_wb
}

candidate (*41*) () { Dirty = False &&
               ShWBnet_mtype = ShWB
}

candidate (*42*) () { Dirty = False &&
               CacheState_home = Exclusive
}

candidate (*43*) () { Dirty = False &&
               CacheInvmarked_home = True
}

candidate (*44*) () { Dirty = False &&
               UnetMtype_home <> Empty &&
               UnetMtype_home <> Get &&
               UnetMtype_home <> GetX
}

candidate (*45*) () { Dirty = False &&
               Invnet_home <> Empty_inv
}

candidate (*46*) () { Dirty = False &&
               Shlist_home = True
}

candidate (*47*) () { Dirty = False &&
               RP_home = True
}

candidate (*48*) () { Dirty = False &&
               Real_home = True
}

candidate (*49*) (z1) { Dirty = False &&
               CacheState[z1] = Exclusive
}

candidate (*50*) (z1) { Dirty = False &&
               UnetMtype[z1] = PutX
}

candidate (*51*) () { Head_valid = True &&
               CacheState_home = Exclusive
}

candidate (*52*) () { Head_valid = True &&
               CacheInvmarked_home = True
}

candidate (*53*) () { Head_valid = True &&
               Invnet_home <> Empty_inv
}

candidate (*54*) () { Head_valid = True &&
               Shlist_home = True
}

candidate (*55*) () { Head_valid = True &&
               RP_home = True
}

candidate (*56*) () { Head_valid = True &&
               Real_home = True
}

candidate (*57*) () { Head_valid = False &&
               WBnet_mtype <> Empty_wb
}

candidate (*58*) () { Head_valid = False &&
               ShWBnet_mtype = ShWB
}

candidate (*59*) () { Head_valid = False &&
               CacheInvmarked_home = True
}

candidate (*60*) () { Head_valid = False &&
               UnetMtype_home <> Empty &&
               UnetMtype_home <> Get &&
               UnetMtype_home <> GetX
}

candidate (*61*) () { Head_valid = False &&
               Invnet_home <> Empty_inv
}

candidate (*62*) () { Head_valid = False &&
               Shlist_home = True
}

candidate (*63*) () { Head_valid = False &&
               RP_home = True
}

candidate (*64*) () { Head_valid = False &&
               Real_home = True
}

candidate (*65*) (z1) { Head_valid = False &&
               CacheState[z1] = Exclusive
}

candidate (*66*) (z1) { Head_valid = False &&
               UnetMtype[z1] = PutX
}

candidate (*67*) (z1) { Head_valid = False &&
               Shlist[z1] = True
}

candidate (*68*) () { Nakc = True &&
               ShWBnet_mtype <> Empty_shwb
}

candidate (*69*) () { Nakc = True &&
               CacheState_home = Exclusive
}

candidate (*70*) () { Nakc = True &&
               CacheWait_home <> None
}

candidate (*71*) () { Nakc = True &&
               CacheInvmarked_home = True
}

candidate (*72*) () { Nakc = True &&
               UnetMtype_home <> Empty
}

candidate (*73*) () { Nakc = True &&
               Invnet_home <> Empty_inv
}

candidate (*74*) () { Nakc = True &&
               Shlist_home = True
}

candidate (*75*) () { Nakc = True &&
               RP_home = True
}

candidate (*76*) () { Nakc = True &&
               Real_home = True
}

candidate (*77*) (z1) { Nakc = True &&
               CacheState[z1] = Shared
}

(* WRONG *)
(* candidate (\*78*\) (z1) { Nakc = True && *)
(*                UnetMtype[z1] = Put *)
(* } *)

candidate (*79*) (z1) { Nakc = True &&
               Shlist[z1] = True
}

candidate (*80*) (z1) { Nakc = True &&
               Real[z1] = True
}

candidate (*81*) () { Nakc = False &&
               CacheInvmarked_home = True
}

candidate (*82*) () { Nakc = False &&
               Invnet_home <> Empty_inv
}

candidate (*83*) () { Nakc = False &&
               Shlist_home = True
}

candidate (*84*) () { Nakc = False &&
               RP_home = True
}

candidate (*85*) () { Nakc = False &&
               Real_home = True
}

candidate (*86*) () { WBnet_mtype = Empty_wb &&
               CacheInvmarked_home = True
}

candidate (*87*) () { WBnet_mtype = Empty_wb &&
               Invnet_home <> Empty_inv
}

candidate (*88*) () { WBnet_mtype = Empty_wb &&
               Shlist_home = True
}

candidate (*89*) () { WBnet_mtype = Empty_wb &&
               RP_home = True
}

candidate (*90*) () { WBnet_mtype = Empty_wb &&
               Real_home = True
}

candidate (*91*) () { Local = True &&
               WBnet_mtype = WB
}

candidate (*92*) () { Dirty = False &&
               WBnet_mtype = WB
}

candidate (*93*) () { Head_valid = False &&
               WBnet_mtype = WB
}

candidate (*94*) () { WBnet_mtype = WB &&
               ShWBnet_mtype = ShWB
}

candidate (*95*) () { WBnet_mtype = WB &&
               CacheState_home = Exclusive
}

candidate (*96*) () { WBnet_mtype = WB &&
               CacheInvmarked_home = True
}

candidate (*97*) () { WBnet_mtype = WB &&
               UnetMtype_home <> Empty &&
               UnetMtype_home <> Get &&
               UnetMtype_home <> GetX
}

candidate (*98*) () { WBnet_mtype = WB &&
               Invnet_home <> Empty_inv
}

candidate (*99*) () { WBnet_mtype = WB &&
               Shlist_home = True
}

candidate (*100*) () { WBnet_mtype = WB &&
                RP_home = True
}

candidate (*101*) () { WBnet_mtype = WB &&
                Real_home = True
}

candidate (*102*) (z1) { WBnet_mtype = WB &&
                CacheState[z1] = Exclusive
}

candidate (*103*) (z1) { WBnet_mtype = WB &&
                UnetMtype[z1] = PutX
}

candidate (*104*) (z1) { WBnet_mtype = WB &&
                Shlist[z1] = True
}

candidate (*105*) () { ShWBnet_mtype = Empty_shwb &&
                CacheInvmarked_home = True
}

candidate (*106*) () { ShWBnet_mtype = Empty_shwb &&
                Invnet_home <> Empty_inv
}

candidate (*107*) () { ShWBnet_mtype = Empty_shwb &&
                Shlist_home = True
}

candidate (*108*) () { ShWBnet_mtype = Empty_shwb &&
                RP_home = True
}

candidate (*109*) () { ShWBnet_mtype = Empty_shwb &&
                Real_home = True
}

candidate (*110*) () { Pending = False &&
                ShWBnet_mtype = ShWB
}

candidate (*111*) () { Local = True &&
                ShWBnet_mtype = ShWB
}

candidate (*112*) () { Nakc = True &&
                ShWBnet_mtype = ShWB
}

candidate (*113*) () { WBnet_mtype <> Empty_wb &&
                ShWBnet_mtype = ShWB
}

candidate (*114*) () { ShWBnet_mtype = ShWB &&
                CacheState_home = Exclusive
}

candidate (*115*) () { ShWBnet_mtype = ShWB &&
                CacheWait_home <> None
}

candidate (*116*) () { ShWBnet_mtype = ShWB &&
                CacheInvmarked_home = True
}

candidate (*117*) () { ShWBnet_mtype = ShWB &&
                UnetMtype_home <> Empty
}

candidate (*118*) () { ShWBnet_mtype = ShWB &&
                Invnet_home <> Empty_inv
}

candidate (*119*) () { ShWBnet_mtype = ShWB &&
                Shlist_home = True
}

candidate (*120*) () { ShWBnet_mtype = ShWB &&
                RP_home = True
}

candidate (*121*) () { ShWBnet_mtype = ShWB &&
                Real_home = True
}

candidate (*122*) (z1) { ShWBnet_mtype = ShWB &&
                CacheState[z1] = Exclusive
}

candidate (*123*) (z1) { ShWBnet_mtype = ShWB &&
                UnetMtype[z1] = PutX
}

candidate (*124*) (z1) { ShWBnet_mtype = ShWB &&
                Shlist[z1] = True
}

candidate (*125*) (z1) { ShWBnet_mtype = ShWB &&
                Real[z1] = True
}

candidate (*126*) () { Pending = False &&
                ShWBnet_mtype = FAck
}

candidate (*127*) () { Local = True &&
                ShWBnet_mtype = FAck
}

candidate (*128*) () { Nakc = True &&
                ShWBnet_mtype = FAck
}

candidate (*129*) () { ShWBnet_mtype = FAck &&
                CacheState_home = Exclusive
}

candidate (*130*) () { ShWBnet_mtype = FAck &&
                CacheWait_home <> None
}

candidate (*131*) () { ShWBnet_mtype = FAck &&
                CacheInvmarked_home = True
}

candidate (*132*) () { ShWBnet_mtype = FAck &&
                UnetMtype_home <> Empty
}

candidate (*133*) () { ShWBnet_mtype = FAck &&
                Invnet_home <> Empty_inv
}

candidate (*134*) () { ShWBnet_mtype = FAck &&
                Shlist_home = True
}

candidate (*135*) () { ShWBnet_mtype = FAck &&
                RP_home = True
}

candidate (*136*) () { ShWBnet_mtype = FAck &&
                Real_home = True
}

candidate (*137*) (z1) { ShWBnet_mtype = FAck &&
                CacheState[z1] = Shared
}

(* WRONG *)
(* candidate (\*138*\) (z1) { ShWBnet_mtype = FAck && *)
(*                 UnetMtype[z1] = Put *)
(* } *)

candidate (*139*) (z1) { ShWBnet_mtype = FAck &&
                Shlist[z1] = True
}

candidate (*140*) (z1) { ShWBnet_mtype = FAck &&
                Real[z1] = True
}

candidate (*141*) () { CacheState_home = Invalid &&
                CacheInvmarked_home = True
}

candidate (*142*) () { CacheState_home = Invalid &&
                Invnet_home <> Empty_inv
}

candidate (*143*) () { CacheState_home = Invalid &&
                Shlist_home = True
}

candidate (*144*) () { CacheState_home = Invalid &&
                RP_home = True
}

candidate (*145*) () { CacheState_home = Invalid &&
                Real_home = True
}

candidate (*146*) () { CacheState_home = Shared &&
                CacheWait_home = WGet
}

candidate (*147*) () { CacheState_home = Shared &&
                CacheInvmarked_home = True
}

candidate (*148*) () { CacheState_home = Shared &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> GetX &&
                UnetMtype_home <> PutX
}

candidate (*149*) () { CacheState_home = Shared &&
                Invnet_home <> Empty_inv
}

candidate (*150*) () { CacheState_home = Shared &&
                Shlist_home = True
}

candidate (*151*) () { CacheState_home = Shared &&
                RP_home = True
}

candidate (*152*) () { CacheState_home = Shared &&
                Real_home = True
}

candidate (*153*) () { WBnet_mtype <> Empty_wb &&
                CacheState_home = Exclusive
}

candidate (*154*) () { ShWBnet_mtype <> Empty_shwb &&
                CacheState_home = Exclusive
}

candidate (*155*) () { CacheState_home = Exclusive &&
                CacheWait_home <> None
}

candidate (*156*) () { CacheState_home = Exclusive &&
                CacheInvmarked_home = True
}

candidate (*157*) () { CacheState_home = Exclusive &&
                UnetMtype_home <> Empty
}

candidate (*158*) () { CacheState_home = Exclusive &&
                Invnet_home <> Empty_inv
}

candidate (*159*) () { CacheState_home = Exclusive &&
                Shlist_home = True
}

candidate (*160*) () { CacheState_home = Exclusive &&
                RP_home = True
}

candidate (*161*) () { CacheState_home = Exclusive &&
                Real_home = True
}

candidate (*162*) (z1) { CacheState_home = Exclusive &&
                CacheState[z1] = Exclusive
}

candidate (*163*) (z1) { CacheState_home = Exclusive &&
                UnetMtype[z1] = PutX
}

candidate (*164*) (z1) { CacheState_home = Exclusive &&
                Shlist[z1] = True
}

candidate (*165*) () { CacheWait_home = None &&
                CacheInvmarked_home = True
}

candidate (*166*) () { CacheWait_home = None &&
                UnetMtype_home <> Empty
}

candidate (*167*) () { CacheWait_home = None &&
                Invnet_home <> Empty_inv
}

candidate (*168*) () { CacheWait_home = None &&
                Shlist_home = True
}

candidate (*169*) () { CacheWait_home = None &&
                RP_home = True
}

candidate (*170*) () { CacheWait_home = None &&
                Real_home = True
}

candidate (*171*) () { Pending = False &&
                CacheWait_home = WGet
}

candidate (*172*) () { Local = True &&
                CacheWait_home = WGet
}

candidate (*173*) () { Nakc = True &&
                CacheWait_home = WGet
}

candidate (*174*) () { ShWBnet_mtype <> Empty_shwb &&
                CacheWait_home = WGet
}

candidate (*175*) () { CacheState_home <> Invalid &&
                CacheWait_home = WGet
}

candidate (*176*) () { CacheWait_home = WGet &&
                CacheInvmarked_home = True
}

candidate (*177*) () { CacheWait_home = WGet &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> Put
}

candidate (*178*) () { CacheWait_home = WGet &&
                Invnet_home <> Empty_inv
}

candidate (*179*) () { CacheWait_home = WGet &&
                Shlist_home = True
}

candidate (*180*) () { CacheWait_home = WGet &&
                RP_home = True
}

candidate (*181*) () { CacheWait_home = WGet &&
                Real_home = True
}

candidate (*182*) (z1) { CacheWait_home = WGet &&
                Shlist[z1] = True
}

candidate (*183*) (z1) { CacheWait_home = WGet &&
                Real[z1] = True
}

candidate (*184*) () { Pending = False &&
                CacheWait_home = WGetX
}

candidate (*185*) () { Local = True &&
                CacheWait_home = WGetX
}

candidate (*186*) () { Nakc = True &&
                CacheWait_home = WGetX
}

candidate (*187*) () { ShWBnet_mtype <> Empty_shwb &&
                CacheWait_home = WGetX
}

candidate (*188*) () { CacheState_home = Exclusive &&
                CacheWait_home = WGetX
}

candidate (*189*) () { CacheWait_home = WGetX &&
                CacheInvmarked_home = True
}

candidate (*190*) () { CacheWait_home = WGetX &&
                UnetMtype_home <> GetX &&
                UnetMtype_home <> PutX
}

candidate (*191*) () { CacheWait_home = WGetX &&
                Invnet_home <> Empty_inv
}

candidate (*192*) () { CacheWait_home = WGetX &&
                Shlist_home = True
}

candidate (*193*) () { CacheWait_home = WGetX &&
                RP_home = True
}

candidate (*194*) () { CacheWait_home = WGetX &&
                Real_home = True
}

candidate (*195*) (z1) { CacheWait_home = WGetX &&
                Shlist[z1] = True
}

candidate (*196*) (z1) { CacheWait_home = WGetX &&
                Real[z1] = True
}

candidate (*197*) () { CacheInvmarked_home = False &&
                Invnet_home <> Empty_inv
}

candidate (*198*) () { CacheInvmarked_home = False &&
                Shlist_home = True
}

candidate (*199*) () { CacheInvmarked_home = False &&
                RP_home = True
}

candidate (*200*) () { CacheInvmarked_home = False &&
                Real_home = True
}

candidate (*201*) () { CacheWait_home <> None &&
                UnetMtype_home = Empty
}

candidate (*202*) () { CacheInvmarked_home = True &&
                UnetMtype_home = Empty
}

candidate (*203*) () { UnetMtype_home = Empty &&
                Invnet_home <> Empty_inv
}

candidate (*204*) () { UnetMtype_home = Empty &&
                Shlist_home = True
}

candidate (*205*) () { UnetMtype_home = Empty &&
                RP_home = True
}

candidate (*206*) () { UnetMtype_home = Empty &&
                Real_home = True
}

candidate (*207*) () { Pending = False &&
                UnetMtype_home = Get
}

candidate (*208*) () { Local = True &&
                UnetMtype_home = Get
}

candidate (*209*) () { Nakc = True &&
                UnetMtype_home = Get
}

candidate (*210*) () { ShWBnet_mtype <> Empty_shwb &&
                UnetMtype_home = Get
}

candidate (*211*) () { CacheState_home <> Invalid &&
                UnetMtype_home = Get
}

candidate (*212*) () { CacheWait_home <> WGet &&
                UnetMtype_home = Get
}

candidate (*213*) () { CacheInvmarked_home = True &&
                UnetMtype_home = Get
}

candidate (*214*) () { UnetMtype_home = Get &&
                Invnet_home <> Empty_inv
}

candidate (*215*) () { UnetMtype_home = Get &&
                Shlist_home = True
}

candidate (*216*) () { UnetMtype_home = Get &&
                RP_home = True
}

candidate (*217*) () { UnetMtype_home = Get &&
                Real_home = True
}

candidate (*218*) (z1) { UnetMtype_home = Get &&
                Shlist[z1] = True
}

candidate (*219*) (z1) { UnetMtype_home = Get &&
                Real[z1] = True
}

candidate (*220*) () { Pending = False &&
                UnetMtype_home = GetX
}

candidate (*221*) () { Local = True &&
                UnetMtype_home = GetX
}

candidate (*222*) () { Nakc = True &&
                UnetMtype_home = GetX
}

candidate (*223*) () { ShWBnet_mtype <> Empty_shwb &&
                UnetMtype_home = GetX
}

candidate (*224*) () { CacheState_home = Exclusive &&
                UnetMtype_home = GetX
}

candidate (*225*) () { CacheWait_home <> WGetX &&
                UnetMtype_home = GetX
}

candidate (*226*) () { CacheInvmarked_home = True &&
                UnetMtype_home = GetX
}

candidate (*227*) () { UnetMtype_home = GetX &&
                Invnet_home <> Empty_inv
}

candidate (*228*) () { UnetMtype_home = GetX &&
                Shlist_home = True
}

candidate (*229*) () { UnetMtype_home = GetX &&
                RP_home = True
}

candidate (*230*) () { UnetMtype_home = GetX &&
                Real_home = True
}

candidate (*231*) (z1) { UnetMtype_home = GetX &&
                Shlist[z1] = True
}

candidate (*232*) (z1) { UnetMtype_home = GetX &&
                Real[z1] = True
}

candidate (*233*) () { Pending = False &&
                UnetMtype_home = Put
}

candidate (*234*) () { Local = True &&
                UnetMtype_home = Put
}

candidate (*235*) () { Dirty = False &&
                UnetMtype_home = Put
}

candidate (*236*) () { Head_valid = False &&
                UnetMtype_home = Put
}

candidate (*237*) () { Nakc = True &&
                UnetMtype_home = Put
}

candidate (*238*) () { WBnet_mtype <> Empty_wb &&
                UnetMtype_home = Put
}

candidate (*239*) () { ShWBnet_mtype <> Empty_shwb &&
                UnetMtype_home = Put
}

candidate (*240*) () { CacheState_home <> Invalid &&
                UnetMtype_home = Put
}

candidate (*241*) () { CacheWait_home <> WGet &&
                UnetMtype_home = Put
}

candidate (*242*) () { CacheInvmarked_home = True &&
                UnetMtype_home = Put
}

candidate (*243*) () { UnetMtype_home = Put &&
                Invnet_home <> Empty_inv
}

candidate (*244*) () { UnetMtype_home = Put &&
                Shlist_home = True
}

candidate (*245*) () { UnetMtype_home = Put &&
                RP_home = True
}

candidate (*246*) () { UnetMtype_home = Put &&
                Real_home = True
}

candidate (*247*) (z1) { UnetMtype_home = Put &&
                CacheState[z1] = Exclusive
}

candidate (*248*) (z1) { UnetMtype_home = Put &&
                UnetMtype[z1] = PutX
}

candidate (*249*) (z1) { UnetMtype_home = Put &&
                Shlist[z1] = True
}

candidate (*250*) (z1) { UnetMtype_home = Put &&
                Real[z1] = True
}

candidate (*251*) () { Pending = False &&
                UnetMtype_home = PutX
}

candidate (*252*) () { Local = True &&
                UnetMtype_home = PutX
}

candidate (*253*) () { Dirty = False &&
                UnetMtype_home = PutX
}

candidate (*254*) () { Head_valid = False &&
                UnetMtype_home = PutX
}

candidate (*255*) () { Nakc = True &&
                UnetMtype_home = PutX
}

candidate (*256*) () { WBnet_mtype <> Empty_wb &&
                UnetMtype_home = PutX
}

candidate (*257*) () { ShWBnet_mtype <> Empty_shwb &&
                UnetMtype_home = PutX
}

candidate (*258*) () { CacheState_home = Exclusive &&
                UnetMtype_home = PutX
}

candidate (*259*) () { CacheWait_home <> WGetX &&
                UnetMtype_home = PutX
}

candidate (*260*) () { CacheInvmarked_home = True &&
                UnetMtype_home = PutX
}

candidate (*261*) () { UnetMtype_home = PutX &&
                Invnet_home <> Empty_inv
}

candidate (*262*) () { UnetMtype_home = PutX &&
                Shlist_home = True
}

candidate (*263*) () { UnetMtype_home = PutX &&
                RP_home = True
}

candidate (*264*) () { UnetMtype_home = PutX &&
                Real_home = True
}

candidate (*265*) (z1) { UnetMtype_home = PutX &&
                CacheState[z1] = Exclusive
}

candidate (*266*) (z1) { UnetMtype_home = PutX &&
                UnetMtype[z1] = PutX
}

candidate (*267*) (z1) { UnetMtype_home = PutX &&
                Shlist[z1] = True
}

candidate (*268*) (z1) { UnetMtype_home = PutX &&
                Real[z1] = True
}

candidate (*269*) () { CacheInvmarked_home = True &&
                Invnet_home = Empty_inv
}

candidate (*270*) () { Invnet_home = Empty_inv &&
                Shlist_home = True
}

candidate (*271*) () { Invnet_home = Empty_inv &&
                RP_home = True
}

candidate (*272*) () { Invnet_home = Empty_inv &&
                Real_home = True
}

candidate (*273*) () { CacheInvmarked_home = True &&
                Shlist_home = False
}

candidate (*274*) () { Invnet_home <> Empty_inv &&
                Shlist_home = False
}

candidate (*275*) () { Shlist_home = False &&
                RP_home = True
}

candidate (*276*) () { Shlist_home = False &&
                Real_home = True
}

candidate (*277*) () { CacheInvmarked_home = True &&
                RP_home = False
}

candidate (*278*) () { Invnet_home <> Empty_inv &&
                RP_home = False
}

candidate (*279*) () { Shlist_home = True &&
                RP_home = False
}

candidate (*280*) () { RP_home = False &&
                Real_home = True
}

candidate (*281*) () { CacheInvmarked_home = True &&
                Real_home = False
}

candidate (*282*) () { Invnet_home <> Empty_inv &&
                Real_home = False
}

candidate (*283*) () { Shlist_home = True &&
                Real_home = False
}

candidate (*284*) () { RP_home = True &&
                Real_home = False
}

candidate (*285*) (z1) { CacheInvmarked_home = True &&
                CacheState[z1] = Invalid
}

candidate (*286*) (z1) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Invalid
}

candidate (*287*) (z1) { Shlist_home = True &&
                CacheState[z1] = Invalid
}

candidate (*288*) (z1) { RP_home = True &&
                CacheState[z1] = Invalid
}

candidate (*289*) (z1) { Real_home = True &&
                CacheState[z1] = Invalid
}

candidate (*290*) (z1) { CacheInvmarked_home = True &&
                CacheState[z1] = Shared
}

candidate (*291*) (z1) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Shared
}

candidate (*292*) (z1) { Shlist_home = True &&
                CacheState[z1] = Shared
}

candidate (*293*) (z1) { RP_home = True &&
                CacheState[z1] = Shared
}

candidate (*294*) (z1) { Real_home = True &&
                CacheState[z1] = Shared
}

candidate (*295*) (z1) { CacheState[z1] = Shared &&
                CacheWait[z1] <> None
}

candidate (*296*) (z1) { CacheState[z1] = Shared &&
                CacheInvmarked[z1] = True
}

candidate (*297*) (z1) { CacheState[z1] = Shared &&
                UnetMtype[z1] <> Empty
}

candidate (*298*) (z1) { WBnet_mtype <> Empty_wb &&
                CacheState[z1] = Exclusive
}

candidate (*299*) (z1) { CacheInvmarked_home = True &&
                CacheState[z1] = Exclusive
}

candidate (*300*) (z1) { UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX &&
                CacheState[z1] = Exclusive
}

candidate (*301*) (z1) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Exclusive
}

candidate (*302*) (z1) { Shlist_home = True &&
                CacheState[z1] = Exclusive
}

candidate (*303*) (z1) { RP_home = True &&
                CacheState[z1] = Exclusive
}

candidate (*304*) (z1) { Real_home = True &&
                CacheState[z1] = Exclusive
}

(* candidate (\*305*\) (z1 z2) { CacheState[z1] = Exclusive && *)
(*                 CacheState[z2] = Exclusive *)
(* } *)

candidate (*306*) (z1) { CacheState[z1] = Exclusive &&
                CacheWait[z1] <> None
}

candidate (*307*) (z1) { CacheState[z1] = Exclusive &&
                CacheInvmarked[z1] = True
}

candidate (*308*) (z1) { CacheState[z1] = Exclusive &&
                UnetMtype[z1] <> Empty
}

(* candidate (\*309*\) (z1 z2) { CacheState[z1] = Exclusive && *)
(*                 UnetMtype[z2] = PutX *)
(* } *)

candidate (*310*) (z1) { CacheState[z1] = Exclusive &&
                Shlist[z1] = True
}

(* candidate (\*311*\) (z1 z2) { CacheState[z1] = Exclusive && *)
(*                 Shlist[z2] = True *)
(* } *)

candidate (*312*) (z1) { CacheState[z1] = Exclusive &&
                Real[z1] = True
}

(* candidate (\*313*\) (z1 z2) { CacheState[z2] = Exclusive && *)
(*                 UnetMtype[z1] = PutX *)
(* } *)

(* candidate (\*314*\) (z1 z2) { CacheState[z2] = Exclusive && *)
(*                 Shlist[z1] = True *)
(* } *)

candidate (*315*) (z1) { CacheInvmarked_home = True &&
                CacheWait[z1] = None
}

candidate (*316*) (z1) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = None
}

candidate (*317*) (z1) { Shlist_home = True &&
                CacheWait[z1] = None
}

candidate (*318*) (z1) { RP_home = True &&
                CacheWait[z1] = None
}

candidate (*319*) (z1) { Real_home = True &&
                CacheWait[z1] = None
}

candidate (*320*) (z1) { CacheWait[z1] = None &&
                CacheInvmarked[z1] = True
}

candidate (*321*) (z1) { CacheWait[z1] = None &&
                UnetMtype[z1] <> Empty
}

candidate (*322*) (z1) { CacheInvmarked_home = True &&
                CacheWait[z1] = WGet
}

candidate (*323*) (z1) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = WGet
}

candidate (*324*) (z1) { Shlist_home = True &&
                CacheWait[z1] = WGet
}

candidate (*325*) (z1) { RP_home = True &&
                CacheWait[z1] = WGet
}

candidate (*326*) (z1) { Real_home = True &&
                CacheWait[z1] = WGet
}

candidate (*327*) (z1) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGet
}

candidate (*328*) (z1) { CacheWait[z1] = WGet &&
                UnetMtype[z1] <> Get &&
                UnetMtype[z1] <> Nak &&
                UnetMtype[z1] <> Put
}

candidate (*329*) (z1) { CacheInvmarked_home = True &&
                CacheWait[z1] = WGetX
}

candidate (*330*) (z1) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = WGetX
}

candidate (*331*) (z1) { Shlist_home = True &&
                CacheWait[z1] = WGetX
}

candidate (*332*) (z1) { RP_home = True &&
                CacheWait[z1] = WGetX
}

candidate (*333*) (z1) { Real_home = True &&
                CacheWait[z1] = WGetX
}

candidate (*334*) (z1) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGetX
}

candidate (*335*) (z1) { CacheWait[z1] = WGetX &&
                CacheInvmarked[z1] = True
}

candidate (*336*) (z1) { CacheWait[z1] = WGetX &&
                UnetMtype[z1] <> GetX &&
                UnetMtype[z1] <> Nak &&
                UnetMtype[z1] <> PutX
}

candidate (*337*) (z1) { CacheInvmarked_home = True &&
                CacheInvmarked[z1] = True
}

candidate (*338*) (z1) { Invnet_home <> Empty_inv &&
                CacheInvmarked[z1] = True
}

candidate (*339*) (z1) { Shlist_home = True &&
                CacheInvmarked[z1] = True
}

candidate (*340*) (z1) { RP_home = True &&
                CacheInvmarked[z1] = True
}

candidate (*341*) (z1) { Real_home = True &&
                CacheInvmarked[z1] = True
}

candidate (*342*) (z1) { CacheState[z1] <> Invalid &&
                CacheInvmarked[z1] = True
}

candidate (*343*) (z1) { CacheWait[z1] <> WGet &&
                CacheInvmarked[z1] = True
}

candidate (*344*) (z1) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] <> Get &&
                UnetMtype[z1] <> Put
}

candidate (*345*) (z1) { CacheInvmarked[z1] = True &&
                Shlist[z1] = True
}

candidate (*346*) (z1) { CacheInvmarked_home = True &&
                CacheInvmarked[z1] = False
}

candidate (*347*) (z1) { Invnet_home <> Empty_inv &&
                CacheInvmarked[z1] = False
}

candidate (*348*) (z1) { Shlist_home = True &&
                CacheInvmarked[z1] = False
}

candidate (*349*) (z1) { RP_home = True &&
                CacheInvmarked[z1] = False
}

candidate (*350*) (z1) { Real_home = True &&
                CacheInvmarked[z1] = False
}

candidate (*351*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = Empty
}

candidate (*352*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = Empty
}

candidate (*353*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = Empty
}

candidate (*354*) (z1) { RP_home = True &&
                UnetMtype[z1] = Empty
}

candidate (*355*) (z1) { Real_home = True &&
                UnetMtype[z1] = Empty
}

candidate (*356*) (z1) { CacheWait[z1] <> None &&
                UnetMtype[z1] = Empty
}

candidate (*357*) (z1) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = Empty
}

candidate (*358*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = Get
}

candidate (*359*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = Get
}

candidate (*360*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = Get
}

candidate (*361*) (z1) { RP_home = True &&
                UnetMtype[z1] = Get
}

candidate (*362*) (z1) { Real_home = True &&
                UnetMtype[z1] = Get
}

candidate (*363*) (z1) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Get
}

candidate (*364*) (z1) { CacheWait[z1] <> WGet &&
                UnetMtype[z1] = Get
}

candidate (*365*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = GetX
}

candidate (*366*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = GetX
}

candidate (*367*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = GetX
}

candidate (*368*) (z1) { RP_home = True &&
                UnetMtype[z1] = GetX
}

candidate (*369*) (z1) { Real_home = True &&
                UnetMtype[z1] = GetX
}

candidate (*370*) (z1) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = GetX
}

candidate (*371*) (z1) { CacheWait[z1] <> WGetX &&
                UnetMtype[z1] = GetX
}

candidate (*372*) (z1) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = GetX
}

candidate (*373*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = Nak
}

candidate (*374*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = Nak
}

candidate (*375*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = Nak
}

candidate (*376*) (z1) { RP_home = True &&
                UnetMtype[z1] = Nak
}

candidate (*377*) (z1) { Real_home = True &&
                UnetMtype[z1] = Nak
}

candidate (*378*) (z1) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Nak
}

candidate (*379*) (z1) { CacheWait[z1] = None &&
                UnetMtype[z1] = Nak
}

candidate (*380*) (z1) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = Nak
}

candidate (*381*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = Put
}

candidate (*382*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = Put
}

candidate (*383*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = Put
}

candidate (*384*) (z1) { RP_home = True &&
                UnetMtype[z1] = Put
}

candidate (*385*) (z1) { Real_home = True &&
                UnetMtype[z1] = Put
}

candidate (*386*) (z1) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Put
}

candidate (*387*) (z1) { CacheWait[z1] <> WGet &&
                UnetMtype[z1] = Put
}

candidate (*388*) (z1) { UnetMtype[z1] = Put &&
                RP[z1] = True
}

candidate (*389*) (z1) { WBnet_mtype <> Empty_wb &&
                UnetMtype[z1] = PutX
}

candidate (*390*) (z1) { CacheInvmarked_home = True &&
                UnetMtype[z1] = PutX
}

candidate (*391*) (z1) { UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX &&
                UnetMtype[z1] = PutX
}

candidate (*392*) (z1) { Invnet_home <> Empty_inv &&
                UnetMtype[z1] = PutX
}

candidate (*393*) (z1) { Shlist_home = True &&
                UnetMtype[z1] = PutX
}

candidate (*394*) (z1) { RP_home = True &&
                UnetMtype[z1] = PutX
}

candidate (*395*) (z1) { Real_home = True &&
                UnetMtype[z1] = PutX
}

candidate (*396*) (z1) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = PutX
}

candidate (*397*) (z1) { CacheWait[z1] <> WGetX &&
                UnetMtype[z1] = PutX
}

candidate (*398*) (z1) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = PutX
}

(* candidate (\*399*\) (z1 z2) { UnetMtype[z1] = PutX && *)
(*                 UnetMtype[z2] = PutX *)
(* } *)

candidate (*400*) (z1) { UnetMtype[z1] = PutX &&
                Shlist[z1] = True
}

(* candidate (\*401*\) (z1 z2) { UnetMtype[z1] = PutX && *)
(*                 Shlist[z2] = True *)
(* } *)

candidate (*402*) (z1) { UnetMtype[z1] = PutX &&
                Real[z1] = True
}

(* candidate (\*403*\) (z1 z2) { UnetMtype[z2] = PutX && *)
(*                 Shlist[z1] = True *)
(* } *)

candidate (*404*) (z1) { CacheInvmarked_home = True &&
                Invnet[z1] = Empty_inv
}

candidate (*405*) (z1) { Invnet_home <> Empty_inv &&
                Invnet[z1] = Empty_inv
}

candidate (*406*) (z1) { Shlist_home = True &&
                Invnet[z1] = Empty_inv
}

candidate (*407*) (z1) { RP_home = True &&
                Invnet[z1] = Empty_inv
}

candidate (*408*) (z1) { Real_home = True &&
                Invnet[z1] = Empty_inv
}

candidate (*409*) (z1) { CacheInvmarked_home = True &&
                Invnet[z1] = Inv
}

candidate (*410*) (z1) { Invnet_home <> Empty_inv &&
                Invnet[z1] = Inv
}

candidate (*411*) (z1) { Shlist_home = True &&
                Invnet[z1] = Inv
}

candidate (*412*) (z1) { RP_home = True &&
                Invnet[z1] = Inv
}

candidate (*413*) (z1) { Real_home = True &&
                Invnet[z1] = Inv
}

candidate (*414*) (z1) { Invnet[z1] = Inv &&
                Shlist[z1] = True
}

candidate (*415*) (z1) { CacheInvmarked_home = True &&
                Invnet[z1] = InvAck
}

candidate (*416*) (z1) { Invnet_home <> Empty_inv &&
                Invnet[z1] = InvAck
}

candidate (*417*) (z1) { Shlist_home = True &&
                Invnet[z1] = InvAck
}

candidate (*418*) (z1) { RP_home = True &&
                Invnet[z1] = InvAck
}

candidate (*419*) (z1) { Real_home = True &&
                Invnet[z1] = InvAck
}

candidate (*420*) (z1) { Invnet[z1] = InvAck &&
                Shlist[z1] = True
}

candidate (*421*) (z1) { WBnet_mtype <> Empty_wb &&
                Shlist[z1] = True
}

candidate (*422*) (z1) { ShWBnet_mtype <> Empty_shwb &&
                Shlist[z1] = True
}

candidate (*423*) (z1) { CacheWait_home <> None &&
                Shlist[z1] = True
}

candidate (*424*) (z1) { CacheInvmarked_home = True &&
                Shlist[z1] = True
}

candidate (*425*) (z1) { UnetMtype_home <> Empty &&
                Shlist[z1] = True
}

candidate (*426*) (z1) { Invnet_home <> Empty_inv &&
                Shlist[z1] = True
}

candidate (*427*) (z1) { Shlist_home = True &&
                Shlist[z1] = True
}

candidate (*428*) (z1) { RP_home = True &&
                Shlist[z1] = True
}

candidate (*429*) (z1) { Real_home = True &&
                Shlist[z1] = True
}

candidate (*430*) (z1) { Invnet[z1] <> Empty_inv &&
                Shlist[z1] = True
}

(* candidate (\*431*\) (z1 z2) { Shlist[z1] = True && *)
(*                 Shlist[z2] = True *)
(* } *)

candidate (*432*) (z1) { Shlist[z1] = True &&
                Real[z1] = False
}

(* candidate (\*433*\) (z1 z2) { Shlist[z1] = True && *)
(*                 Real[z2] = True *)
(* } *)

candidate (*434*) (z1) { CacheInvmarked_home = True &&
                Shlist[z1] = False
}

candidate (*435*) (z1) { Invnet_home <> Empty_inv &&
                Shlist[z1] = False
}

candidate (*436*) (z1) { Shlist_home = True &&
                Shlist[z1] = False
}

candidate (*437*) (z1) { RP_home = True &&
                Shlist[z1] = False
}

candidate (*438*) (z1) { Real_home = True &&
                Shlist[z1] = False
}

(* candidate (\*439*\) (z1 z2) { Shlist[z2] = True && *)
(*                 Real[z1] = True *)
(* } *)

candidate (*440*) (z1) { CacheInvmarked_home = True &&
                RP[z1] = True
}

candidate (*441*) (z1) { Invnet_home <> Empty_inv &&
                RP[z1] = True
}

candidate (*442*) (z1) { Shlist_home = True &&
                RP[z1] = True
}

candidate (*443*) (z1) { RP_home = True &&
                RP[z1] = True
}

candidate (*444*) (z1) { Real_home = True &&
                RP[z1] = True
}

candidate (*445*) (z1) { CacheInvmarked_home = True &&
                RP[z1] = False
}

candidate (*446*) (z1) { Invnet_home <> Empty_inv &&
                RP[z1] = False
}

candidate (*447*) (z1) { Shlist_home = True &&
                RP[z1] = False
}

candidate (*448*) (z1) { RP_home = True &&
                RP[z1] = False
}

candidate (*449*) (z1) { Real_home = True &&
                RP[z1] = False
}

candidate (*450*) (z1) { ShWBnet_mtype <> Empty_shwb &&
                Real[z1] = True
}

candidate (*451*) (z1) { CacheWait_home <> None &&
                Real[z1] = True
}

candidate (*452*) (z1) { CacheInvmarked_home = True &&
                Real[z1] = True
}

candidate (*453*) (z1) { UnetMtype_home <> Empty &&
                Real[z1] = True
}

candidate (*454*) (z1) { Invnet_home <> Empty_inv &&
                Real[z1] = True
}

candidate (*455*) (z1) { Shlist_home = True &&
                Real[z1] = True
}

candidate (*456*) (z1) { RP_home = True &&
                Real[z1] = True
}

candidate (*457*) (z1) { Real_home = True &&
                Real[z1] = True
}

candidate (*458*) (z1) { CacheInvmarked_home = True &&
                Real[z1] = False
}

candidate (*459*) (z1) { Invnet_home <> Empty_inv &&
                Real[z1] = False
}

candidate (*460*) (z1) { Shlist_home = True &&
                Real[z1] = False
}

candidate (*461*) (z1) { RP_home = True &&
                Real[z1] = False
}

candidate (*462*) (z1) { Real_home = True &&
                Real[z1] = False
}








unsafe (p) { CacheState_home = Exclusive && CacheState[p] = Exclusive }
unsafe (i j) { CacheState[i] = Exclusive && CacheState[j] = Exclusive }



transition pi_Local_Get_Dirty ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = True }
{ Pending := True;
	 CacheWait_home := WGet;
	 UnetProc_home := Head_pointer;
	 UnetMtype_home := Get }

transition pi_Local_Get_Other1 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = True }
{ Local := True;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Invalid }

transition pi_Local_Get_Other2 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = False }
{ Local := True;
	 CacheWait_home := None;
	 CacheState_home := Shared }




transition pi_Remote_Get (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGet | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] 
}



transition pi_Local_GetX_Dirty ()
requires { CacheState_home <> Exclusive && CacheWait_home = None &&
	  Pending = False && Dirty = True }
{ Pending := True;
	 CacheWait_home := WGetX;
	 UnetProc_home := Head_pointer;
	 UnetMtype_home := GetX }

transition pi_Local_GetX_Other ()
requires { Head_valid = False &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive }

transition pi_Local_GetX_Other_head ()
requires { Head_valid = True &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 Pending := True;
	 Head_valid := False;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive;
	 Shlist_home := False;
	 Invnet_home := Empty_inv;
	 Real_home := False ;
	 Shlist[j] := case | _ : False ;
	 Invnet[j] := case 
                       | j = Head_pointer : Inv
		       | Shlist[j] = True : Inv
		       | _ : Empty_inv ;
	 Real[j] := case | j = Head_pointer : True 
		         | Shlist[j] = True : True
		         | _ : False }




transition pi_Remote_GetX (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGetX | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] 
}




transition pi_Local_PutX_Pending ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Dirty := False;
	 CacheState_home := Invalid }

transition pi_Local_PutX_Other ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Local := False; Dirty := False;
	 CacheState_home := Invalid }




transition pi_Remote_PutX (dst)
requires { CacheState[dst] = Exclusive }
{ WBnet_proc := dst; WBnet_mtype := WB;
CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] }



transition pi_Local_Replace ()
requires { CacheState_home = Shared && CacheWait_home = None }
{ Local := False; CacheState_home := Invalid }




transition pi_Remote_Replace (src)
requires { CacheState[src] = Shared && CacheWait[src] = None }
{
  CacheState[j] := case | j = src : Invalid | _ : CacheState[j] ;
  RP[j] := case | j = src : True | _ : RP[j] }



transition ni_NAK (dst)
requires { UnetMtype[dst] = Nak }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] 
}



transition ni_NAK_Clear ()
requires { Nakc = True }
{ Pending := False; Nakc := False }



transition ni_Local_Get_Pending (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_Get_Dirty_NotLocal (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = False }
{ Pending := True ;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] }

transition ni_Local_Get_Dirty_Local (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = True }
{ Dirty := False; Head_valid := True; Head_pointer := src;
	 CacheState_home := Shared;
	 UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
	 UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
}

transition ni_Local_Get_NotDirty_Head (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  Shlist[j] := case | j = src : True | _ : Shlist[j] ;
  Real[j] := case | j = src : True | _ : Shlist[j] 
}

transition ni_Local_Get_NotDirty (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = False }
{ 
  Head_valid := True; Head_pointer := src;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
}



transition ni_Remote_Get1 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ Nakc := True ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] }

transition ni_Remote_Get2 (dst)
requires { UnetMtype_home = Get &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked_home = False }
{
  UnetProc_home := dst;
  UnetMtype_home := Put;
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}

transition ni_Remote_Get3 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked[src] = False }
{
  ShWBnet_proc := src;
  ShWBnet_mtype := ShWB;
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
}





transition ni_Local_GetX_Pending (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_GetX_Dirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = False }
{ Pending := True;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] 
}

transition ni_Local_GetX_Dirty_Local (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = True }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = False &&
	  Head_valid = False }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home = WGet }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  CacheInvmarked_home := True;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home <> WGet }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Head (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True }
{ 
  Local := False;
  Dirty := True;
  Head_valid := True; 
  Head_pointer := src; Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}

transition ni_Local_GetX_NotDirty_Head_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home = WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheInvmarked_home := True;
  CacheState_home := Invalid ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}

transition ni_Local_GetX_NotDirty_Head_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home <> WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src; Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheState_home := Invalid;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}





transition ni_Remote_GetX1 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ 
  Nakc := True;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Remote_GetX2 (dst)
requires { UnetMtype_home = GetX &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive }
{ 
  UnetProc_home := dst;
  UnetMtype_home := PutX;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_GetX3 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive}
{ 
  ShWBnet_proc := src;
  ShWBnet_mtype := FAck;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
}





transition ni_Local_Put1 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = True }
{ 
  Pending := False;
  Dirty := False;
  Local := True;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Invalid 
}

transition ni_Local_Put2 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = False }
{ 
  Pending := False; 
  Dirty := False;
  Local := True;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheState_home := Shared 
}




transition ni_Remote_Put1 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = True }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_Put2 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = False }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}





transition ni_Local_PutXAcksDone ()
requires { UnetMtype_home = PutX }
{ 
  Pending := False;
  Head_valid := False;
  Local := True;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Exclusive 
}




transition ni_Remote_PutX (dst)
requires { UnetMtype[dst] = PutX &&
	  CacheWait[dst] = WGetX }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Exclusive | _ : CacheState[j] 
}





transition ni_Inv1 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] = WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheInvmarked[j] := case | j = dst : True | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Inv2 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] <> WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}





transition ni_InvAck1 (src other)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
           Real[other] = True }
{
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j];
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck2 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&           
	   Dirty = False && 
           forall_other j. Real[j] = False }
{ 
  Pending := False; Local := False;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck3 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
	   Dirty = True &&
           forall_other j. Real[j] = False }
{ Pending := False ;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] }





transition ni_WB ()
requires { WBnet_mtype = WB }
{
  Dirty := False; 
  Head_valid := False; 
  WBnet_mtype := Empty_wb 
}





transition ni_FAck1 ()
requires { ShWBnet_mtype = FAck && Dirty = False }
{ ShWBnet_mtype := Empty_shwb; Pending := False }

transition ni_FAck2 ()
requires { ShWBnet_mtype = FAck && Dirty = True }
{ ShWBnet_mtype := Empty_shwb; Pending := False; 
         Head_pointer := ShWBnet_proc }






transition ni_ShWB ()
requires { ShWBnet_mtype = ShWB }
{ 
  ShWBnet_mtype := Empty_shwb; Pending := False;
  Dirty := False;
  Shlist[j] := case | j = ShWBnet_proc : True | _ : Shlist[j] ;
  Real[j] := case | j = ShWBnet_proc : True | _ : Shlist[j];
  Real_home := Shlist_home;
}





transition ni_Replace (src)
requires { RP[src] = True }
{
  Shlist[j] := case | j = src : False | _ : Shlist[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}
