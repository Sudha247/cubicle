type state = Invalid | Shared | Exclusive
type msg = Empty | Get | GetX | Nak | Put | PutX
type wait = None | WGet | WGetX
type inv = Empty_inv | Inv | InvAck
type wb_msg = Empty_wb | WB
type shwb_msg = Empty_shwb | ShWB | FAck
type data


var Home : proc
var Memory : data
var Pending : bool
var Local : bool
var Dirty : bool
var Head_valid : bool
var Head_pointer : proc

var Nakc :bool

var WBnet_mtype : wb_msg
var WBnet_data : data
var WBnet_proc : proc

var ShWBnet_mtype : shwb_msg
var ShWBnet_data : data
var ShWBnet_proc : proc

array CacheState[proc] : state
array CacheWait[proc] : wait
array CacheData[proc] : data
array CacheInvmarked[proc] : bool

var CacheState_home : state
var CacheWait_home : wait
var CacheData_home : data
var CacheInvmarked_home : bool

array UnetProc[proc] : proc
array UnetMtype[proc] : msg
array UnetData[proc] : data

var UnetProc_home : proc
var UnetMtype_home : msg
var UnetData_home : data

array Invnet[proc] : inv
array Shlist[proc] : bool
array RP[proc] : bool
array Real[proc] : bool

var Invnet_home : inv
var Shlist_home : bool
var RP_home : bool
var Real_home : bool



init (p) {
     Home <> p &&

     Pending = False &&
     Local = False &&
     Dirty = False &&
     Head_valid = False &&

     Nakc = False &&

     WBnet_mtype = Empty_wb &&

     ShWBnet_mtype = Empty_shwb &&

     CacheState[p] = Invalid &&
     CacheWait[p] = None &&
     CacheInvmarked[p] = False &&

     CacheState_home = Invalid &&
     CacheWait_home = None &&
     CacheInvmarked_home = False &&

     UnetMtype[p] = Empty &&
     UnetMtype_home = Empty &&

     Invnet[p] = Empty_inv &&
     Shlist[p] = False &&
     Real[p] = False &&
     RP[p] = False &&

     Invnet_home = Empty_inv &&
     Shlist_home = False &&
     Real_home = False &&
     RP_home = False

}


(* invariant (z) { z = Home } *)



(* (\* Lemma 1 *\) *)
(* unsafe (i) { CacheState[i] = Exclusive && Dirty = False } *)
(* unsafe (i) { CacheState[i] = Exclusive && WBnet_mtype = WB } *)
(* unsafe (i) { CacheState[i] = Exclusive && ShWBnet_mtype = ShWB } *)
(* unsafe (i) { CacheState[i] = Exclusive && UnetMtype_home = Put } *)
(* unsafe (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX } *)


(* (\* Lemma 2 *\) *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { Invnet[i] = InvAck && Pending = False } *)
(* unsafe (i) { Invnet[i] = InvAck && Nakc = True } *)
(* unsafe (i) { Invnet[i] = InvAck && ShWBnet_mtype <> Empty_shwb } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = Get && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = GetX && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = PutX && UnetProc[j] <> Home } *)


(* invariant (j) { CacheState_home = Exclusive && UnetMtype[j] = PutX }  *)
(* invariant (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX }  *)



(******** 304 candidates from lazy *************)

 (* 1 *) unsafe (z1) { CacheState_home = Exclusive &&
                             CacheState[z1] = Exclusive }

 (* 2 *) unsafe (z1 z2) { CacheState[z1] = Exclusive &&
                             CacheState[z2] = Exclusive }

 (* 4 *) unsafe (z1) { Head_valid = False &&
                             CacheState[z1] = Exclusive }

 (* 4 *) unsafe (z1) { Head_valid = True &&
                             CacheState_home = Exclusive }

 (* 5 *) unsafe (z1 z2) { CacheState[z2] = Exclusive &&
                             UnetMtype[z1] = PutX }

 (* 6 *) unsafe (z1 z2) { CacheState[z1] = Exclusive &&
                             UnetMtype[z2] = PutX }

 (* 7 *) unsafe (z1) { Dirty = False &&
                             CacheState[z1] = Exclusive }

 (* 8 *) unsafe (z1) { UnetMtype_home = PutX &&
                             CacheState[z1] = Exclusive }

 (* 9 *) unsafe (z1) { Head_valid = False &&
                             UnetMtype[z1] = PutX }

 (* 10 *) unsafe (z1) { WBnet_mtype = WB &&
                              CacheState[z1] = Exclusive }

 (* 11 *) unsafe () { Dirty = False &&
                              CacheState_home = Exclusive }

 (* 14 *) unsafe (z1) { CacheState[z1] = Exclusive &&
                              UnetMtype[z1] <> Empty }

 (* 14 *) unsafe (z1) { UnetMtype_home <> Empty &&
                              UnetMtype_home <> Get &&
                              UnetMtype_home <> GetX &&
                              CacheState[z1] = Exclusive }

 (* 14 *) unsafe (z1) { UnetMtype_home = PutX &&
                              UnetMtype[z1] = PutX }

 (* 15 *) unsafe (z1) { WBnet_mtype <> Empty_wb &&
                              CacheState[z1] = Exclusive }

 (* 16 *) unsafe (z1) { Local = True &&
                              CacheState[z1] = Exclusive }

 (* 17 *) unsafe () { Local = True &&
                              CacheWait_home = WGet }

 (* 18 *) unsafe (z1 z2) { UnetMtype[z1] = PutX &&
                              UnetMtype[z2] = PutX }

 (* 19 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                              UnetMtype[z1] = Get }

 (* 20 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheState[z1] = Exclusive }

 (* 21 *) unsafe (z1) { UnetMtype_home = Put &&
                              CacheState[z1] = Exclusive }

 (* 22 *) unsafe (z1) { Dirty = False &&
                              UnetMtype[z1] = PutX }

 (* 23 *) unsafe (z1) { ShWBnet_mtype = ShWB &&
                              CacheState[z1] = Exclusive }

 (* 25 *) unsafe (z1) { CacheWait[z1] = None &&
                              UnetMtype[z1] <> Empty }

 (* 25 *) unsafe (z1) { CacheState[z1] = Exclusive &&
                              CacheWait[z1] <> None }

 (* 26 *) unsafe (z1) { UnetMtype_home <> Empty &&
                              UnetMtype_home <> Get &&
                              UnetMtype_home <> GetX &&
                              UnetMtype[z1] = PutX }

 (* 27 *) unsafe (z1) { WBnet_mtype = WB &&
                              UnetMtype[z1] = PutX }

 (* 28 *) unsafe () { Dirty = False &&
                              UnetMtype_home = PutX }

 (* 29 *) unsafe () { WBnet_mtype = WB &&
                              CacheState_home = Exclusive }

 (* 30 *) unsafe () { ShWBnet_mtype = ShWB &&
                              CacheState_home = Exclusive }

 (* 31 *) unsafe () { Local = True &&
                              CacheWait_home <> None }

 (* 33 *) unsafe (z1) { CacheWait[z1] <> WGet &&
                              UnetMtype[z1] = Get }

 (* 33 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                              CacheWait[z1] = WGet }

 (* 35 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Real[z1] = False }

 (* 35 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Real[z1] = True }

 (* 36 *) unsafe (z1) { WBnet_mtype <> Empty_wb &&
                              UnetMtype[z1] = PutX }

 (* 37 *) unsafe (z1) { UnetMtype_home = Put &&
                              UnetMtype[z1] = PutX }

 (* 38 *) unsafe () { Local = True &&
                              UnetMtype_home = PutX }

 (* 39 *) unsafe () { Head_valid = False &&
                              UnetMtype_home = PutX }

 (* 40 *) unsafe () { CacheWait_home <> WGetX &&
                              UnetMtype_home = PutX }

 (* 41 *) unsafe () { Local = True &&
                              UnetMtype_home <> Empty }

 (* 42 *) unsafe () { Dirty = False &&
                              UnetMtype_home <> Empty &&
                              UnetMtype_home <> Get &&
                              UnetMtype_home <> GetX }

 (* 43 *) unsafe (z1) { CacheWait[z1] <> WGetX &&
                              UnetMtype[z1] = PutX }

 (* 44 *) unsafe (z1) { WBnet_mtype <> Empty_wb &&
                              CacheState_home = Exclusive }

 (* 45 *) unsafe () { Head_valid = False &&
                              ShWBnet_mtype = ShWB }

 (* 46 *) unsafe () { CacheInvmarked_home = True &&
                              UnetMtype_home = Put }

 (* 47 *) unsafe (z1) { Local = True &&
                              UnetMtype[z1] = PutX }

 (* 51 *) unsafe () { Local = True &&
                              UnetMtype_home = Put }

 (* 51 *) unsafe () { Local = True &&
                              UnetMtype_home = Get }

 (* 51 *) unsafe () { Local = True &&
                              CacheWait_home = WGetX }

 (* 51 *) unsafe () { CacheWait_home = WGet &&
                              UnetMtype_home <> Get &&
                              UnetMtype_home <> Put }

 (* 52 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                              UnetMtype[z1] = PutX }

 (* 53 *) unsafe (z1) { CacheWait[z1] = WGetX &&
                              UnetMtype[z1] <> GetX &&
                              UnetMtype[z1] <> Nak &&
                              UnetMtype[z1] <> PutX }

 (* 54 *) unsafe (z1) { CacheState[z1] = Shared &&
                              CacheWait[z1] <> None }

 (* 56 *) unsafe (z1) { CacheInvmarked_home = True &&
                              RP[z1] = False }

 (* 56 *) unsafe (z1) { CacheInvmarked_home = True &&
                              RP[z1] = True }

 (* 58 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Shlist[z1] = False }

 (* 58 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Shlist[z1] = True }

 (* 59 *) unsafe (z1) { CacheState_home = Exclusive &&
                              UnetMtype[z1] = PutX }

 (* 60 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = PutX }

 (* 61 *) unsafe (z1) { ShWBnet_mtype = ShWB &&
                              UnetMtype[z1] = PutX }

 (* 62 *) unsafe () { Head_valid = False &&
                              UnetMtype_home <> Empty &&
                              UnetMtype_home <> Get &&
                              UnetMtype_home <> GetX }

 (* 63 *) unsafe () { Head_valid = False &&
                              UnetMtype_home = Put }

 (* 64 *) unsafe () { CacheWait_home <> WGet &&
                              UnetMtype_home = Put }

 (* 65 *) unsafe () { Dirty = False &&
                              UnetMtype_home = Put }

 (* 66 *) unsafe (z1) { CacheWait[z1] = WGet &&
                              UnetMtype[z1] <> Get &&
                              UnetMtype[z1] <> Nak &&
                              UnetMtype[z1] <> Put }

 (* 67 *) unsafe () { Local = True &&
                              WBnet_mtype = WB }

 (* 68 *) unsafe () { Head_valid = False &&
                              WBnet_mtype = WB }

 (* 69 *) unsafe () { Dirty = False &&
                              WBnet_mtype = WB }

 (* 70 *) unsafe () { Head_valid = False &&
                              WBnet_mtype <> Empty_wb }

 (* 71 *) unsafe () { Dirty = False &&
                              WBnet_mtype <> Empty_wb }

 (* 72 *) unsafe () { CacheState_home = Exclusive &&
                              UnetMtype_home = PutX }

 (* 73 *) unsafe () { WBnet_mtype <> Empty_wb &&
                              UnetMtype_home = PutX }

 (* 74 *) unsafe () { ShWBnet_mtype = ShWB &&
                              UnetMtype_home = PutX }

 (* 76 *) unsafe () { Local = False &&
                              CacheState_home = Exclusive }

 (* 76 *) unsafe () { Local = True &&
                              WBnet_mtype <> Empty_wb }

 (* 79 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Invnet[z1] = InvAck }

 (* 79 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Invnet[z1] = Inv }

 (* 79 *) unsafe (z1) { CacheInvmarked_home = True &&
                              Invnet[z1] = Empty_inv }

 (* 81 *) unsafe () { Local = True &&
                              UnetMtype_home = GetX }

 (* 81 *) unsafe () { CacheWait_home = WGetX &&
                              UnetMtype_home <> GetX &&
                              UnetMtype_home <> PutX }

 (* 83 *) unsafe () { CacheWait_home <> WGetX &&
                              UnetMtype_home = GetX }

 (* 83 *) unsafe () { CacheWait_home <> None &&
                              UnetMtype_home = Empty }

 (* 84 *) unsafe (z1) { CacheState[z1] = Shared &&
                              UnetMtype[z1] <> Empty }

 (* 86 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheInvmarked[z1] = False }

 (* 86 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheInvmarked[z1] = True }

 (* 89 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheWait[z1] = WGetX }

 (* 89 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheWait[z1] = WGet }

 (* 89 *) unsafe (z1) { CacheInvmarked_home = True &&
                              CacheWait[z1] = None }

 (* 91 *) unsafe (z1) { Real_home = True &&
                              Shlist[z1] = False }

 (* 91 *) unsafe () { CacheInvmarked_home = True &&
                              Real_home = False }

 (* 97 *) unsafe (z1) { UnetMtype[z1] = PutX &&
                              Shlist[z1] = True }

 (* 97 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = Put }

 (* 97 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = Nak }

 (* 97 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = GetX }

 (* 97 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = Get }

 (* 97 *) unsafe (z1) { CacheInvmarked_home = True &&
                              UnetMtype[z1] = Empty }

 (* 99 *) unsafe (z1) { RP_home = True &&
                              UnetMtype[z1] = PutX }

 (* 99 *) unsafe () { CacheInvmarked_home = True &&
                              RP_home = False }

 (* 100 *) unsafe () { WBnet_mtype = WB &&
                               UnetMtype_home <> Empty &&
                               UnetMtype_home <> Get &&
                               UnetMtype_home <> GetX }

 (* 101 *) unsafe () { CacheWait_home = None &&
                               UnetMtype_home <> Empty }

 (* 102 *) unsafe () { CacheState_home = Exclusive &&
                               UnetMtype_home <> Empty }

 (* 103 *) unsafe () { ShWBnet_mtype = ShWB &&
                               UnetMtype_home <> Empty &&
                               UnetMtype_home <> Get &&
                               UnetMtype_home <> GetX }

 (* 104 *) unsafe () { Dirty = False &&
                               ShWBnet_mtype = ShWB }

 (* 105 *) unsafe () { WBnet_mtype = WB &&
                               ShWBnet_mtype = ShWB }

 (* 107 *) unsafe (z1) { Shlist_home = True &&
                               Invnet[z1] = InvAck }

 (* 107 *) unsafe () { CacheInvmarked_home = True &&
                               Shlist_home = False }

 (* 109 *) unsafe (z1) { Invnet_home <> Empty_inv &&
                               Invnet[z1] = Inv }

 (* 109 *) unsafe () { CacheInvmarked_home = True &&
                               Invnet_home = Empty_inv }

 (* 112 *) unsafe () { CacheWait_home = WGetX &&
                               CacheInvmarked_home = True }

 (* 112 *) unsafe () { CacheWait_home = WGet &&
                               CacheInvmarked_home = True }

 (* 112 *) unsafe () { CacheWait_home = None &&
                               CacheInvmarked_home = True }

 (* 114 *) unsafe () { CacheState_home <> Invalid &&
                               UnetMtype_home = Put }

 (* 114 *) unsafe () { CacheState_home = Invalid &&
                               CacheInvmarked_home = True }

 (* 117 *) unsafe () { ShWBnet_mtype = FAck &&
                               CacheInvmarked_home = True }

 (* 117 *) unsafe () { ShWBnet_mtype = ShWB &&
                               CacheInvmarked_home = True }

 (* 117 *) unsafe () { ShWBnet_mtype = Empty_shwb &&
                               CacheInvmarked_home = True }

 (* 119 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                               CacheInvmarked[z1] = True }

 (* 119 *) unsafe (z1) { CacheInvmarked_home = True &&
                               CacheState[z1] = Invalid }

 (* 121 *) unsafe () { WBnet_mtype = WB &&
                               CacheInvmarked_home = True }

 (* 121 *) unsafe () { WBnet_mtype = Empty_wb &&
                               CacheInvmarked_home = True }

 (* 123 *) unsafe () { Nakc = False &&
                               CacheInvmarked_home = True }

 (* 123 *) unsafe () { Nakc = True &&
                               CacheInvmarked_home = True }

 (* 125 *) unsafe () { Head_valid = False &&
                               CacheInvmarked_home = True }

 (* 125 *) unsafe () { Head_valid = True &&
                               CacheInvmarked_home = True }

 (* 127 *) unsafe (z1) { Real_home = True &&
                               Real[z1] = False }

 (* 127 *) unsafe (z1) { Real_home = True &&
                               Real[z1] = True }

 (* 129 *) unsafe () { Dirty = False &&
                               CacheInvmarked_home = True }

 (* 129 *) unsafe () { Dirty = True &&
                               CacheInvmarked_home = True }

 (* 130 *) unsafe (z1) { Dirty = True &&
                               Shlist[z1] = True }

 (* 132 *) unsafe () { Local = False &&
                               CacheInvmarked_home = True }

 (* 132 *) unsafe () { Local = True &&
                               CacheInvmarked_home = True }

 (* 134 *) unsafe () { Pending = False &&
                               CacheInvmarked_home = True }

 (* 134 *) unsafe () { Pending = True &&
                               CacheInvmarked_home = True }

 (* 136 *) unsafe (z1) { RP_home = True &&
                               Real[z1] = False }

 (* 136 *) unsafe (z1) { RP_home = True &&
                               Real[z1] = True }

 (* 137 *) unsafe () { Local = True &&
                               ShWBnet_mtype = ShWB }

 (* 138 *) unsafe () { CacheWait_home <> WGet &&
                               UnetMtype_home = Get }

 (* 139 *) unsafe () { ShWBnet_mtype = ShWB &&
                               UnetMtype_home = Put }

 (* 140 *) unsafe (z1) { CacheWait[z1] <> WGetX &&
                               UnetMtype[z1] = GetX }

 (* 141 *) unsafe () { UnetMtype_home = Put &&
                               RP_home = True }

 (* 142 *) unsafe () { WBnet_mtype <> Empty_wb &&
                               UnetMtype_home = Put }

 (* 143 *) unsafe () { WBnet_mtype = WB &&
                               RP_home = True }

 (* 144 *) unsafe () { WBnet_mtype <> Empty_wb &&
                               ShWBnet_mtype = ShWB }

 (* 146 *) unsafe (z1) { Shlist_home = True &&
                               Real[z1] = False }

 (* 146 *) unsafe (z1) { Shlist_home = True &&
                               Real[z1] = True }

 (* 147 *) unsafe () { Shlist_home = False &&
                               RP_home = True }

 (* 148 *) unsafe () { Invnet_home = Empty_inv &&
                               RP_home = True }

 (* 149 *) unsafe () { CacheWait_home = WGetX &&
                               RP_home = True }

 (* 150 *) unsafe () { CacheWait_home = WGet &&
                               RP_home = True }

 (* 151 *) unsafe () { CacheInvmarked_home = True &&
                               UnetMtype_home = Empty }

 (* 152 *) unsafe () { CacheState_home <> Invalid &&
                               CacheWait_home = WGet }

 (* 153 *) unsafe () { CacheState_home = Invalid &&
                               RP_home = True }

 (* 154 *) unsafe () { CacheInvmarked_home = True &&
                               UnetMtype_home = GetX }

 (* 155 *) unsafe () { CacheState_home = Exclusive &&
                               UnetMtype_home = GetX }

 (* 156 *) unsafe () { ShWBnet_mtype = FAck &&
                               RP_home = True }

 (* 157 *) unsafe () { ShWBnet_mtype = ShWB &&
                               RP_home = True }

 (* 158 *) unsafe () { ShWBnet_mtype = Empty_shwb &&
                               RP_home = True }

 (* 160 *) unsafe (z1) { CacheState[z1] = Exclusive &&
                               CacheInvmarked[z1] = True }

 (* 160 *) unsafe (z1) { CacheState[z1] = Shared &&
                               CacheInvmarked[z1] = True }

 (* 161 *) unsafe (z1) { RP_home = True &&
                               CacheState[z1] = Invalid }

 (* 163 *) unsafe () { Pending = False &&
                               RP_home = True }

 (* 163 *) unsafe () { Pending = True &&
                               RP_home = True }

 (* 164 *) unsafe () { WBnet_mtype = Empty_wb &&
                               RP_home = True }

 (* 165 *) unsafe () { Nakc = False &&
                               RP_home = True }

 (* 166 *) unsafe () { Nakc = True &&
                               RP_home = True }

 (* 167 *) unsafe () { Head_valid = False &&
                               RP_home = True }

 (* 168 *) unsafe () { Head_valid = True &&
                               RP_home = True }

 (* 170 *) unsafe (z1) { Real_home = True &&
                               RP[z1] = False }

 (* 170 *) unsafe (z1) { Real_home = True &&
                               RP[z1] = True }

 (* 173 *) unsafe (z1) { Real_home = True &&
                               Invnet[z1] = InvAck }

 (* 173 *) unsafe (z1) { Real_home = True &&
                               Invnet[z1] = Inv }

 (* 173 *) unsafe (z1) { Real_home = True &&
                               Invnet[z1] = Empty_inv }

 (* 174 *) unsafe () { Dirty = False &&
                               RP_home = True }

 (* 175 *) unsafe () { Dirty = True &&
                               RP_home = True }

 (* 176 *) unsafe () { Local = False &&
                               RP_home = True }

 (* 177 *) unsafe () { Local = True &&
                               RP_home = True }

 (* 179 *) unsafe () { RP_home = True &&
                               Real_home = False }

 (* 179 *) unsafe () { Pending = False &&
                               Real_home = True }

 (* 182 *) unsafe (z1) { RP_home = True &&
                               CacheWait[z1] = WGetX }

 (* 182 *) unsafe (z1) { RP_home = True &&
                               CacheWait[z1] = WGet }

 (* 182 *) unsafe (z1) { RP_home = True &&
                               CacheWait[z1] = None }

 (* 183 *) unsafe (z1) { RP_home = True &&
                               UnetMtype[z1] = Nak }

 (* 184 *) unsafe (z1) { RP_home = True &&
                               UnetMtype[z1] = Put }

 (* 185 *) unsafe (z1) { RP_home = True &&
                               CacheInvmarked[z1] = False }

 (* 188 *) unsafe () { UnetMtype_home = GetX &&
                               RP_home = True }

 (* 188 *) unsafe () { CacheInvmarked_home = True &&
                               UnetMtype_home = Get }

 (* 188 *) unsafe () { UnetMtype_home = Empty &&
                               RP_home = True }

 (* 190 *) unsafe (z1) { RP_home = True &&
                               RP[z1] = False }

 (* 190 *) unsafe (z1) { RP_home = True &&
                               RP[z1] = True }

 (* 192 *) unsafe (z1) { RP_home = True &&
                               Shlist[z1] = False }

 (* 192 *) unsafe (z1) { RP_home = True &&
                               Shlist[z1] = True }

 (* 195 *) unsafe (z1) { RP_home = True &&
                               Invnet[z1] = InvAck }

 (* 195 *) unsafe (z1) { RP_home = True &&
                               Invnet[z1] = Inv }

 (* 195 *) unsafe (z1) { RP_home = True &&
                               Invnet[z1] = Empty_inv }

 (* 197 *) unsafe (z1) { Shlist_home = True &&
                               RP[z1] = False }

 (* 197 *) unsafe (z1) { Shlist_home = True &&
                               RP[z1] = True }

 (* 199 *) unsafe (z1) { Shlist_home = True &&
                               Shlist[z1] = False }

 (* 199 *) unsafe (z1) { Shlist_home = True &&
                               Shlist[z1] = True }

 (* 200 *) unsafe () { Invnet_home = Empty_inv &&
                               Shlist_home = True }

 (* 201 *) unsafe () { CacheWait_home = WGetX &&
                               Shlist_home = True }

 (* 202 *) unsafe () { CacheWait_home = WGet &&
                               Shlist_home = True }

 (* 203 *) unsafe () { CacheWait_home = None &&
                               RP_home = True }

 (* 205 *) unsafe () { CacheState_home = Exclusive &&
                               CacheWait_home <> None }

 (* 205 *) unsafe () { CacheState_home = Shared &&
                               CacheWait_home = WGet }

 (* 206 *) unsafe () { CacheState_home = Invalid &&
                               Shlist_home = True }

 (* 207 *) unsafe () { UnetMtype_home = GetX &&
                               Shlist_home = True }

 (* 208 *) unsafe () { CacheState_home = Exclusive &&
                               CacheWait_home = WGetX }

 (* 209 *) unsafe () { ShWBnet_mtype = FAck &&
                               Shlist_home = True }

 (* 210 *) unsafe () { ShWBnet_mtype = ShWB &&
                               Shlist_home = True }

 (* 211 *) unsafe () { ShWBnet_mtype = Empty_shwb &&
                               Shlist_home = True }

 (* 212 *) unsafe (z1) { CacheWait[z1] <> WGet &&
                               CacheInvmarked[z1] = True }

 (* 213 *) unsafe (z1) { CacheWait[z1] = None &&
                               CacheInvmarked[z1] = True }

 (* 214 *) unsafe (z1) { Shlist_home = True &&
                               CacheState[z1] = Invalid }

 (* 215 *) unsafe () { Pending = False &&
                               Shlist_home = True }

 (* 216 *) unsafe () { Pending = True &&
                               Shlist_home = True }

 (* 217 *) unsafe () { WBnet_mtype = Empty_wb &&
                               Shlist_home = True }

 (* 218 *) unsafe () { Nakc = False &&
                               Shlist_home = True }

 (* 219 *) unsafe () { Nakc = True &&
                               Shlist_home = True }

 (* 220 *) unsafe () { Head_valid = False &&
                               Shlist_home = True }

 (* 221 *) unsafe () { Head_valid = True &&
                               Shlist_home = True }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = PutX }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = Put }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = Nak }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = GetX }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = Get }

 (* 227 *) unsafe (z1) { Real_home = True &&
                               UnetMtype[z1] = Empty }

 (* 229 *) unsafe (z1) { Real_home = True &&
                               CacheInvmarked[z1] = False }

 (* 229 *) unsafe (z1) { Real_home = True &&
                               CacheInvmarked[z1] = True }

 (* 232 *) unsafe (z1) { Real_home = True &&
                               CacheWait[z1] = WGetX }

 (* 232 *) unsafe (z1) { Real_home = True &&
                               CacheWait[z1] = WGet }

 (* 232 *) unsafe (z1) { Real_home = True &&
                               CacheWait[z1] = None }

 (* 235 *) unsafe (z1) { Real_home = True &&
                               CacheState[z1] = Exclusive }

 (* 235 *) unsafe (z1) { Real_home = True &&
                               CacheState[z1] = Shared }

 (* 235 *) unsafe (z1) { Real_home = True &&
                               CacheState[z1] = Invalid }

 (* 237 *) unsafe (z1) { Shlist_home = True &&
                               Invnet[z1] = Empty_inv }

 (* 237 *) unsafe () { Shlist_home = False &&
                               Real_home = True }

 (* 238 *) unsafe () { Dirty = False &&
                               Shlist_home = True }

 (* 239 *) unsafe () { Dirty = True &&
                               Shlist_home = True }

 (* 240 *) unsafe (z1) { Head_valid = False &&
                               Shlist[z1] = True }

 (* 241 *) unsafe () { Local = False &&
                               Shlist_home = True }

 (* 242 *) unsafe () { Local = True &&
                               Shlist_home = True }

 (* 243 *) unsafe () { Shlist_home = True &&
                               Real_home = False }

 (* 244 *) unsafe () { Invnet_home = Empty_inv &&
                               Real_home = True }

 (* 245 *) unsafe (z1) { Shlist_home = True &&
                               CacheWait[z1] = WGetX }

 (* 246 *) unsafe (z1) { Shlist_home = True &&
                               CacheWait[z1] = WGet }

 (* 247 *) unsafe (z1) { RP_home = True &&
                               UnetMtype[z1] = Empty }

 (* 248 *) unsafe (z1) { Shlist_home = True &&
                               UnetMtype[z1] = Nak }

 (* 249 *) unsafe (z1) { Shlist_home = True &&
                               UnetMtype[z1] = Put }

 (* 250 *) unsafe (z1) { Shlist_home = True &&
                               CacheInvmarked[z1] = False }

 (* 251 *) unsafe () { UnetMtype_home = Get &&
                               RP_home = True }

 (* 252 *) unsafe () { UnetMtype_home = Empty &&
                               Shlist_home = True }

 (* 256 *) unsafe () { UnetMtype_home = PutX &&
                               RP_home = True }

 (* 256 *) unsafe () { UnetMtype_home = Put &&
                               Shlist_home = True }

 (* 256 *) unsafe () { UnetMtype_home = Get &&
                               Shlist_home = True }

 (* 256 *) unsafe () { CacheWait_home = None &&
                               Shlist_home = True }

 (* 257 *) unsafe (z1) { RP_home = True &&
                               CacheState[z1] = Exclusive }

 (* 258 *) unsafe () { Shlist_home = True &&
                               RP_home = False }

 (* 259 *) unsafe () { CacheInvmarked_home = False &&
                               Shlist_home = True }

 (* 260 *) unsafe (z1) { RP_home = True &&
                               UnetMtype[z1] = GetX }

 (* 261 *) unsafe () { CacheState_home = Shared &&
                               UnetMtype_home <> Empty &&
                               UnetMtype_home <> GetX &&
                               UnetMtype_home <> PutX }

 (* 264 *) unsafe (z1) { CacheWait[z1] = None &&
                               UnetMtype[z1] = Nak }

 (* 264 *) unsafe (z1) { CacheInvmarked[z1] = True &&
                               UnetMtype[z1] = Empty }

 (* 264 *) unsafe (z1) { CacheWait[z1] = WGetX &&
                               CacheInvmarked[z1] = True }

 (* 265 *) unsafe (z1) { CacheInvmarked[z1] = True &&
                               UnetMtype[z1] <> Get &&
                               UnetMtype[z1] <> Nak &&
                               UnetMtype[z1] <> Put }

 (* 269 *) unsafe () { UnetMtype_home = Put &&
                               Real_home = True }

 (* 269 *) unsafe () { UnetMtype_home = GetX &&
                               Real_home = True }

 (* 269 *) unsafe () { UnetMtype_home = Get &&
                               Real_home = True }

 (* 269 *) unsafe () { UnetMtype_home = Empty &&
                               Real_home = True }

 (* 272 *) unsafe () { CacheWait_home = WGetX &&
                               Real_home = True }

 (* 272 *) unsafe () { CacheWait_home = WGet &&
                               Real_home = True }

 (* 272 *) unsafe () { CacheWait_home = None &&
                               Real_home = True }

 (* 275 *) unsafe () { CacheState_home = Exclusive &&
                               Real_home = True }

 (* 275 *) unsafe () { CacheState_home = Shared &&
                               Real_home = True }

 (* 275 *) unsafe () { CacheState_home = Invalid &&
                               Real_home = True }

 (* 276 *) unsafe () { CacheInvmarked_home = False &&
                               Real_home = True }

 (* 278 *) unsafe (z1) { RP_home = True &&
                               UnetMtype[z1] = Get }

 (* 278 *) unsafe () { RP_home = False &&
                               Real_home = True }

 (* 281 *) unsafe () { ShWBnet_mtype = FAck &&
                               Real_home = True }

 (* 281 *) unsafe () { ShWBnet_mtype = ShWB &&
                               Real_home = True }

 (* 281 *) unsafe () { ShWBnet_mtype = Empty_shwb &&
                               Real_home = True }

 (* 283 *) unsafe () { WBnet_mtype = WB &&
                               Real_home = True }

 (* 283 *) unsafe () { WBnet_mtype = Empty_wb &&
                               Real_home = True }

 (* 285 *) unsafe () { Nakc = False &&
                               Real_home = True }

 (* 285 *) unsafe () { Nakc = True &&
                               Real_home = True }

 (* 287 *) unsafe () { Head_valid = False &&
                               Real_home = True }

 (* 287 *) unsafe () { Head_valid = True &&
                               Real_home = True }

 (* 289 *) unsafe () { Dirty = False &&
                               Real_home = True }

 (* 289 *) unsafe () { Dirty = True &&
                               Real_home = True }

 (* 291 *) unsafe () { Local = False &&
                               Real_home = True }

 (* 291 *) unsafe () { Local = True &&
                               Real_home = True }

 (* 292 *) unsafe (z1) { RP_home = True &&
                               CacheState[z1] = Shared }

 (* 293 *) unsafe (z1) { Shlist_home = True &&
                               UnetMtype[z1] = Get }

 (* 295 *) unsafe (z1) { CacheInvmarked[z1] = True &&
                               UnetMtype[z1] = PutX }

 (* 295 *) unsafe (z1) { CacheInvmarked[z1] = True &&
                               UnetMtype[z1] = GetX }

 (* 296 *) unsafe (z1) { Shlist_home = True &&
                               CacheState[z1] = Shared }

 (* 297 *) unsafe (z1) { UnetMtype_home = PutX &&
                               Shlist[z1] = True }

 (* 298 *) unsafe (z1) { WBnet_mtype = WB &&
                               Shlist[z1] = True }

 (* 299 *) unsafe () { CacheState_home <> Invalid &&
                               UnetMtype_home = Get }

 (* 300 *) unsafe (z1) { CacheWait[z1] <> None &&
                               UnetMtype[z1] = Empty }

 (* 301 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                               UnetMtype[z1] = Nak }

 (* 302 *) unsafe (z1) { CacheState[z1] <> Invalid &&
                               CacheWait[z1] = WGetX }

 (* 303 *) unsafe (z1) { Shlist_home = True &&
                               CacheState[z1] = Exclusive }

 (* 304 *) unsafe (z1) { CacheInvmarked_home = True &&
                               CacheState[z1] = Shared }

(*************** end candidates  ****************)





unsafe (p) { CacheState_home = Exclusive && CacheState[p] = Exclusive }
unsafe (i j) { CacheState[i] = Exclusive && CacheState[j] = Exclusive }



transition pi_Local_Get_Dirty ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = True }
{ Pending := True;
	 CacheWait_home := WGet;
	 UnetProc_home := Head_pointer;
	 UnetMtype_home := Get }

transition pi_Local_Get_Other1 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = True }
{ Local := True;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Invalid }

transition pi_Local_Get_Other2 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = False }
{ Local := True;
	 CacheWait_home := None;
	 CacheData_home := Memory;
	 CacheState_home := Shared }




transition pi_Remote_Get (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGet | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] 
}



transition pi_Local_GetX_Dirty ()
requires { CacheState_home <> Exclusive && CacheWait_home = None &&
	  Pending = False && Dirty = True }
{ Pending := True;
	 CacheWait_home := WGetX;
	 UnetProc_home := Head_pointer;
	 UnetMtype_home := GetX }

transition pi_Local_GetX_Other ()
requires { Head_valid = False &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 CacheData_home := Memory;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive }

transition pi_Local_GetX_Other_head ()
requires { Head_valid = True &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 Pending := True;
	 Head_valid := False;
	 CacheData_home := Memory;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive;
	 Shlist_home := False;
	 Invnet_home := Empty_inv;
	 Real_home := False ;
	 Shlist[j] := case | _ : False ;
	 Invnet[j] := case 
                       | j = Head_pointer : Inv
		       | Shlist[j] = True : Inv
		       | _ : Empty_inv ;
	 Real[j] := case | j = Head_pointer : True 
		         | Shlist[j] = True : True
		         | _ : False }




transition pi_Remote_GetX (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGetX | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] 
}




transition pi_Local_PutX_Pending ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Dirty := False; Memory := CacheData_home;
	 CacheState_home := Invalid }

transition pi_Local_PutX_Other ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Local := False; Dirty := False; Memory := CacheData_home;
	 CacheState_home := Invalid }




transition pi_Remote_PutX (dst)
requires { CacheState[dst] = Exclusive }
{ WBnet_proc := dst; WBnet_mtype := WB; WBnet_data := CacheData[dst];
CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] }



transition pi_Local_Replace ()
requires { CacheState_home = Shared && CacheWait_home = None }
{ Local := False; CacheState_home := Invalid }




transition pi_Remote_Replace (src)
requires { CacheState[src] = Shared && CacheWait[src] = None }
{
  CacheState[j] := case | j = src : Invalid | _ : CacheState[j] ;
  RP[j] := case | j = src : True | _ : RP[j] }



transition ni_NAK (dst)
requires { UnetMtype[dst] = Nak }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] 
}



transition ni_NAK_Clear ()
requires { Nakc = True }
{ Pending := False; Nakc := False }



transition ni_Local_Get_Pending (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_Get_Dirty_NotLocal (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = False }
{ Pending := True ;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] }

transition ni_Local_Get_Dirty_Local (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = True }
{ Dirty := False; Head_valid := True; Head_pointer := src;
         Memory := CacheData_home;
	 CacheState_home := Shared;
	 UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
	 UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
	 UnetData[j] := case | j = src : CacheData_home | _ : UnetData[j] 
}

transition ni_Local_Get_NotDirty_Head (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | j = src : True | _ : Shlist[j] ;
  Real[j] := case | j = src : True | _ : Shlist[j] 
}

transition ni_Local_Get_NotDirty (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = False }
{ 
  Head_valid := True; Head_pointer := src;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] 
}



transition ni_Remote_Get1 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ Nakc := True ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] }

transition ni_Remote_Get2 (dst)
requires { UnetMtype_home = Get &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked_home = False }
{
  UnetProc_home := dst;
  UnetMtype_home := Put;
  UnetData_home := CacheData[dst];
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}

transition ni_Remote_Get3 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked[src] = False }
{
  ShWBnet_proc := src;
  ShWBnet_mtype := ShWB;
  ShWBnet_data := CacheData[dst];
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData[dst] | _ : UnetData[j] 
}





transition ni_Local_GetX_Pending (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_GetX_Dirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = False }
{ Pending := True;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] 
}

transition ni_Local_GetX_Dirty_Local (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = True }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData_home | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = False &&
	  Head_valid = False }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home = WGet }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  CacheInvmarked_home := True;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home <> WGet }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Head (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True }
{ 
  Local := False;
  Dirty := True;
  Head_valid := True; 
  Head_pointer := src; Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}

transition ni_Local_GetX_NotDirty_Head_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home = WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheInvmarked_home := True;
  CacheState_home := Invalid ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}

transition ni_Local_GetX_NotDirty_Head_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home <> WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src; Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheState_home := Invalid;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv 
}





transition ni_Remote_GetX1 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ 
  Nakc := True;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Remote_GetX2 (dst)
requires { UnetMtype_home = GetX &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive }
{ 
  UnetProc_home := dst;
  UnetMtype_home := PutX;
  UnetData_home := CacheData[dst];
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_GetX3 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive}
{ 
  ShWBnet_proc := src;
  ShWBnet_mtype := FAck;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData[dst] | _ : UnetData[j]
}





transition ni_Local_Put1 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = True }
{ 
  Pending := False;
  Dirty := False;
  Local := True;
  Memory := UnetData_home;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Invalid 
}

transition ni_Local_Put2 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = False }
{ 
  Pending := False; 
  Dirty := False;
  Local := True;
  Memory := UnetData_home;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheData_home := UnetData_home;
  CacheState_home := Shared 
}




transition ni_Remote_Put1 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = True }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_Put2 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = False }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheData[j] := case | j = dst : UnetData[dst] | _ : CacheData[j] ;
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}





transition ni_Local_PutXAcksDone ()
requires { UnetMtype_home = PutX }
{ 
  Pending := False;
  Head_valid := False;
  Local := True;
  UnetMtype_home := Empty;
  CacheData_home := UnetData_home;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Exclusive 
}




transition ni_Remote_PutX (dst)
requires { UnetMtype[dst] = PutX &&
	  CacheWait[dst] = WGetX }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheData[j] := case | j = dst : UnetData[dst] | _ : CacheData[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Exclusive | _ : CacheState[j] 
}





transition ni_Inv1 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] = WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheInvmarked[j] := case | j = dst : True | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Inv2 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] <> WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}





transition ni_InvAck1 (src other)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
           Real[other] = True }
{
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j];
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck2 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&           
	   Dirty = False && 
           forall_other j. Real[j] = False }
{ 
  Pending := False; Local := False;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck3 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
	   Dirty = True &&
           forall_other j. Real[j] = False }
{ Pending := False ;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] }





transition ni_WB ()
requires { WBnet_mtype = WB }
{
  Dirty := False; 
  Head_valid := False; 
  Memory := WBnet_data;
  WBnet_mtype := Empty_wb 
}





transition ni_FAck1 ()
requires { ShWBnet_mtype = FAck && Dirty = False }
{ ShWBnet_mtype := Empty_shwb; Pending := False }

transition ni_FAck2 ()
requires { ShWBnet_mtype = FAck && Dirty = True }
{ ShWBnet_mtype := Empty_shwb; Pending := False; 
         Head_pointer := ShWBnet_proc }






transition ni_ShWB ()
requires { ShWBnet_mtype = ShWB }
{ 
  ShWBnet_mtype := Empty_shwb; Pending := False;
  Dirty := False; Memory := ShWBnet_data;
  Shlist[j] := case | j = ShWBnet_proc : True | _ : Shlist[j] ;
  Real[j] := case | j = ShWBnet_proc : True | _ : Shlist[j];
  Real_home := Shlist_home;
}





transition ni_Replace (src)
requires { RP[src] = True }
{
  Shlist[j] := case | j = src : False | _ : Shlist[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}
