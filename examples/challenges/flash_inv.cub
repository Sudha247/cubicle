type state = Invalid | Shared | Exclusive
type msg = Empty | Get | GetX | Nak | Put | PutX
type wait = None | WGet | WGetX
type inv = Empty_inv | Inv | InvAck
type wb_msg = Empty_wb | WB
type shwb_msg = Empty_shwb | ShWB | FAck
type data


var Home : proc
var Memory : data
var Pending : bool
var Local : bool
var Dirty : bool
var Head_valid : bool
var Head_pointer : proc

var Nakc :bool

var WBnet_mtype : wb_msg
var WBnet_data : data
var WBnet_proc : proc

var ShWBnet_mtype : shwb_msg
var ShWBnet_data : data
var ShWBnet_proc : proc

array CacheState[proc] : state
array CacheWait[proc] : wait
array CacheData[proc] : data
array CacheInvmarked[proc] : bool

array UnetProc[proc] : proc
array UnetMtype[proc] : msg
array UnetData[proc] : data

array Invnet[proc] : inv
array Shlist[proc] : bool
array RP[proc] : bool
array Real[proc] : bool



init (p) {
     Pending = False &&
     Local = False &&
     Dirty = False &&
     Head_valid = False &&

     Nakc = False &&

     WBnet_mtype = Empty_wb &&

     ShWBnet_mtype = Empty_shwb &&

     CacheState[p] = Invalid &&
     CacheWait[p] = None &&
     CacheInvmarked[p] = False &&

     UnetMtype[p] = Empty &&

     Invnet[p] = Empty_inv &&
     Shlist[p] = False &&
     Real[p] = False &&
     RP[p] = False
}



(* unsafe (z1 z2) (\*1*\) { Home = z1 && *)
(*               Real[z1] = False *)

(* } *)

unsafe (z1 z2) (*2*) { Head_pointer <> z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*3*) { WBnet_proc <> z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*4*) { ShWBnet_proc <> z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*5*) { UnetProc[Home] <> z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*6*) { UnetProc[z1] <> z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*7*) { UnetProc[z1] = z1 &&
              Real[z1] = False

}

unsafe (z1 z2) (*8*) { CacheInvmarked[Home] = True &&
              Real[z1] = False

}

unsafe (z1 z2) (*9*) { Invnet[Home] <> Empty_inv &&
              Real[z1] = False

}

unsafe (z1 z2) (*10*) { Shlist[Home] = True &&
               Real[z1] = False

}

unsafe (z1 z2) (*11*) { RP[Home] = True &&
               Real[z1] = False

}

unsafe (z1 z2) (*12*) { Real[Home] = True &&
               Real[z1] = False

}

unsafe (z1 z2) (*13*) { Shlist[z1] = True &&
               Real[z1] = False

}

unsafe (z1 z2) (*14*) { Home = z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*15*) { Head_pointer <> z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*16*) { WBnet_proc <> z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*17*) { ShWBnet_proc <> z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*18*) { UnetProc[Home] <> z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*19*) { UnetProc[z1] <> z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*20*) { UnetProc[z1] = z1 &&
               Real[z1] = True

}

unsafe (z1 z2) (*21*) { CacheInvmarked[Home] = True &&
               Real[z1] = True

}

unsafe (z1 z2) (*22*) { Invnet[Home] <> Empty_inv &&
               Real[z1] = True

}

unsafe (z1 z2) (*23*) { Shlist[Home] = True &&
               Real[z1] = True

}

unsafe (z1 z2) (*24*) { RP[Home] = True &&
               Real[z1] = True

}

unsafe (z1 z2) (*25*) { Real[Home] = True &&
               Real[z1] = True

}

unsafe (z1 z2) (*26*) { Home = z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*27*) { Head_pointer <> z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*28*) { WBnet_proc <> z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*29*) { ShWBnet_proc <> z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*30*) { UnetProc[Home] <> z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*31*) { UnetProc[z1] <> z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*32*) { UnetProc[z1] = z1 &&
               RP[z1] = False

}

unsafe (z1 z2) (*33*) { CacheInvmarked[Home] = True &&
               RP[z1] = False

}

unsafe (z1 z2) (*34*) { Invnet[Home] <> Empty_inv &&
               RP[z1] = False

}

unsafe (z1 z2) (*35*) { Shlist[Home] = True &&
               RP[z1] = False

}

unsafe (z1 z2) (*36*) { RP[Home] = True &&
               RP[z1] = False

}

unsafe (z1 z2) (*37*) { Real[Home] = True &&
               RP[z1] = False

}

unsafe (z1 z2) (*38*) { Home = z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*39*) { Head_pointer <> z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*40*) { WBnet_proc <> z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*41*) { ShWBnet_proc <> z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*42*) { UnetProc[Home] <> z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*43*) { UnetProc[z1] <> z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*44*) { UnetProc[z1] = z1 &&
               RP[z1] = True

}

unsafe (z1 z2) (*45*) { CacheInvmarked[Home] = True &&
               RP[z1] = True

}

unsafe (z1 z2) (*46*) { Invnet[Home] <> Empty_inv &&
               RP[z1] = True

}

unsafe (z1 z2) (*47*) { Shlist[Home] = True &&
               RP[z1] = True

}

unsafe (z1 z2) (*48*) { RP[Home] = True &&
               RP[z1] = True

}

unsafe (z1 z2) (*49*) { Real[Home] = True &&
               RP[z1] = True

}

unsafe (z1 z2) (*50*) { Home = z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*51*) { Head_pointer <> z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*52*) { WBnet_proc <> z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*53*) { ShWBnet_proc <> z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*54*) { UnetProc[Home] <> z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*55*) { UnetProc[z1] <> z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*56*) { UnetProc[z1] = z1 &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*57*) { CacheInvmarked[Home] = True &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*58*) { Invnet[Home] <> Empty_inv &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*59*) { Shlist[Home] = True &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*60*) { RP[Home] = True &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*61*) { Real[Home] = True &&
               Shlist[z1] = False

}

unsafe (z1 z2) (*62*) { Home = z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*63*) { Head_pointer <> z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*64*) { WBnet_proc <> z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*65*) { ShWBnet_proc <> z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*66*) { UnetProc[Home] <> z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*67*) { UnetProc[z1] <> z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*68*) { UnetProc[z1] = z1 &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*69*) { Pending = True &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*70*) { CacheInvmarked[Home] = True &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*71*) { Invnet[Home] <> Empty_inv &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*72*) { Shlist[Home] = True &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*73*) { RP[Home] = True &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*74*) { Real[Home] = True &&
               Shlist[z1] = True

}

unsafe (z1 z2) (*75*) { Shlist[z1] = True &&
               Real[z1] = False

}

unsafe (z1 z2) (*76*) { Home = z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*77*) { Head_pointer <> z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*78*) { WBnet_proc <> z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*79*) { ShWBnet_proc <> z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*80*) { UnetProc[Home] <> z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*81*) { UnetProc[z1] <> z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*82*) { UnetProc[z1] = z1 &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*83*) { CacheInvmarked[Home] = True &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*84*) { Invnet[Home] <> Empty_inv &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*85*) { Shlist[Home] = True &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*86*) { RP[Home] = True &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*87*) { Real[Home] = True &&
               Invnet[z1] = InvAck

}

unsafe (z1 z2) (*88*) { Home = z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*89*) { Head_pointer <> z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*90*) { WBnet_proc <> z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*91*) { ShWBnet_proc <> z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*92*) { UnetProc[Home] <> z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*93*) { UnetProc[z1] <> z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*94*) { UnetProc[z1] = z1 &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*95*) { CacheInvmarked[Home] = True &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*96*) { Invnet[Home] <> Empty_inv &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*97*) { Shlist[Home] = True &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*98*) { RP[Home] = True &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*99*) { Real[Home] = True &&
               Invnet[z1] = Inv

}

unsafe (z1 z2) (*100*) { Home = z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*101*) { Head_pointer <> z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*102*) { WBnet_proc <> z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*103*) { ShWBnet_proc <> z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*104*) { UnetProc[Home] <> z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*105*) { UnetProc[z1] <> z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*106*) { UnetProc[z1] = z1 &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*107*) { CacheInvmarked[Home] = True &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*108*) { Invnet[Home] <> Empty_inv &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*109*) { Shlist[Home] = True &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*110*) { RP[Home] = True &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*111*) { Real[Home] = True &&
                Invnet[z1] = Empty_inv

}

unsafe (z1 z2) (*112*) { Home = z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*113*) { Head_pointer <> z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*114*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*115*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*116*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*117*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*118*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*119*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*120*) { Shlist[Home] = True &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*121*) { RP[Home] = True &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*122*) { Real[Home] = True &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*123*) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*124*) { CacheWait[z1] <> WGetX &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*125*) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = PutX

}

unsafe (z1 z2) (*126*) { Home = z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*127*) { Head_pointer <> z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*128*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*129*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*130*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*131*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*132*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*133*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*134*) { Shlist[Home] = True &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*135*) { RP[Home] = True &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*136*) { Real[Home] = True &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*137*) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*138*) { CacheWait[z1] <> WGet &&
                UnetMtype[z1] = Put

}

unsafe (z1 z2) (*139*) { Home = z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*140*) { Head_pointer <> z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*141*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*142*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*143*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*144*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*145*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*146*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*147*) { Shlist[Home] = True &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*148*) { RP[Home] = True &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*149*) { Real[Home] = True &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*150*) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*151*) { CacheWait[z1] = None &&
                UnetMtype[z1] = Nak

}

unsafe (z1 z2) (*152*) { Home = z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*153*) { Head_pointer <> z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*154*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*155*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*156*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*157*) { UnetProc[z1] <> z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*158*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*159*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*160*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*161*) { Shlist[Home] = True &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*162*) { RP[Home] = True &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*163*) { Real[Home] = True &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*164*) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*165*) { CacheWait[z1] <> WGetX &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*166*) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = GetX

}

unsafe (z1 z2) (*167*) { Home = z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*168*) { Head_pointer <> z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*169*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*170*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*171*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*172*) { UnetProc[z1] <> z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*173*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*174*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*175*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*176*) { Shlist[Home] = True &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*177*) { RP[Home] = True &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*178*) { Real[Home] = True &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*179*) { CacheState[z1] <> Invalid &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*180*) { CacheWait[z1] <> WGet &&
                UnetMtype[z1] = Get

}

unsafe (z1 z2) (*181*) { Home = z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*182*) { Head_pointer <> z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*183*) { WBnet_proc <> z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*184*) { ShWBnet_proc <> z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*185*) { UnetProc[Home] <> z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*186*) { UnetProc[z1] = z1 &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*187*) { CacheInvmarked[Home] = True &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*188*) { Invnet[Home] <> Empty_inv &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*189*) { Shlist[Home] = True &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*190*) { RP[Home] = True &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*191*) { Real[Home] = True &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*192*) { CacheWait[z1] <> None &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*193*) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] = Empty

}

unsafe (z1 z2) (*194*) { Home = z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*195*) { Head_pointer <> z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*196*) { WBnet_proc <> z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*197*) { ShWBnet_proc <> z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*198*) { UnetProc[Home] <> z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*199*) { CacheInvmarked[Home] = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*200*) { Invnet[Home] <> Empty_inv &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*201*) { Shlist[Home] = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*202*) { RP[Home] = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*203*) { Real[Home] = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*204*) { Home = z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*205*) { Head_pointer <> z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*206*) { WBnet_proc <> z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*207*) { ShWBnet_proc <> z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*208*) { UnetProc[Home] <> z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*209*) { CacheInvmarked[Home] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*210*) { Invnet[Home] <> Empty_inv &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*211*) { Shlist[Home] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*212*) { RP[Home] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*213*) { Real[Home] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*214*) { CacheState[z1] <> Invalid &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*215*) { CacheWait[z1] = None &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*216*) { CacheInvmarked[z1] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*217*) { Home = z1 &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*218*) { Head_pointer <> z1 &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*219*) { WBnet_proc <> z1 &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*220*) { ShWBnet_proc <> z1 &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*221*) { UnetProc[Home] <> z1 &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*222*) { CacheInvmarked[z1] = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*223*) { CacheInvmarked[z1] = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*224*) { CacheInvmarked[Home] = True &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*225*) { Invnet[Home] <> Empty_inv &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*226*) { Shlist[Home] = True &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*227*) { RP[Home] = True &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*228*) { Real[Home] = True &&
                CacheInvmarked[z1] = False

}

unsafe (z1 z2) (*229*) { Home = z1 &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*230*) { Head_pointer <> z1 &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*231*) { WBnet_proc <> z1 &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*232*) { ShWBnet_proc <> z1 &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*233*) { UnetProc[Home] <> z1 &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*234*) { CacheInvmarked[z1] = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*235*) { CacheInvmarked[Home] = True &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*236*) { Invnet[Home] <> Empty_inv &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*237*) { Shlist[Home] = True &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*238*) { RP[Home] = True &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*239*) { Real[Home] = True &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*240*) { CacheState[z1] <> Invalid &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*241*) { CacheWait[z1] <> WGet &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*242*) { Home = z1 &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*243*) { Head_pointer <> z1 &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*244*) { WBnet_proc <> z1 &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*245*) { ShWBnet_proc <> z1 &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*246*) { UnetProc[Home] <> z1 &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*247*) { CacheWait[z1] = WGetX &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*248*) { CacheWait[z1] = WGetX &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*249*) { CacheInvmarked[Home] = True &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*250*) { Invnet[Home] <> Empty_inv &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*251*) { Shlist[Home] = True &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*252*) { RP[Home] = True &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*253*) { Real[Home] = True &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*254*) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGetX

}

unsafe (z1 z2) (*255*) { CacheWait[z1] = WGetX &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*256*) { Home = z1 &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*257*) { Head_pointer <> z1 &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*258*) { WBnet_proc <> z1 &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*259*) { ShWBnet_proc <> z1 &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*260*) { UnetProc[Home] <> z1 &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*261*) { CacheWait[z1] = WGet &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*262*) { CacheWait[z1] = WGet &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*263*) { CacheInvmarked[Home] = True &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*264*) { Invnet[Home] <> Empty_inv &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*265*) { Shlist[Home] = True &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*266*) { RP[Home] = True &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*267*) { Real[Home] = True &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*268*) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGet

}

unsafe (z1 z2) (*269*) { Home = z1 &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*270*) { Head_pointer <> z1 &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*271*) { WBnet_proc <> z1 &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*272*) { ShWBnet_proc <> z1 &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*273*) { UnetProc[Home] <> z1 &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*274*) { CacheWait[z1] = None &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*275*) { CacheInvmarked[Home] = True &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*276*) { Invnet[Home] <> Empty_inv &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*277*) { Shlist[Home] = True &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*278*) { RP[Home] = True &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*279*) { Real[Home] = True &&
                CacheWait[z1] = None

}

unsafe (z1 z2) (*280*) { CacheWait[z1] = None &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*281*) { CacheWait[z1] = None &&
                UnetMtype[z1] <> Empty

}

unsafe (z1 z2) (*282*) { Home = z1 &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*283*) { Head_pointer <> z1 &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*284*) { WBnet_proc <> z1 &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*285*) { ShWBnet_proc <> z1 &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*286*) { UnetProc[Home] <> z1 &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*287*) { CacheState[z1] = Exclusive &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*288*) { CacheInvmarked[Home] = True &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*289*) { Invnet[Home] <> Empty_inv &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*290*) { Shlist[Home] = True &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*291*) { RP[Home] = True &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*292*) { Real[Home] = True &&
                CacheState[z1] = Exclusive

}

unsafe (z1 z2) (*293*) { CacheState[z1] = Exclusive &&
                CacheWait[z1] <> None

}

unsafe (z1 z2) (*294*) { CacheState[z1] = Exclusive &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*295*) { CacheState[z1] = Exclusive &&
                UnetMtype[z1] <> Empty

}

unsafe (z1 z2) (*296*) { Home = z1 &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*297*) { Head_pointer <> z1 &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*298*) { WBnet_proc <> z1 &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*299*) { ShWBnet_proc <> z1 &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*300*) { UnetProc[Home] <> z1 &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*301*) { CacheState[z1] = Shared &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*302*) { CacheInvmarked[Home] = True &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*303*) { Invnet[Home] <> Empty_inv &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*304*) { Shlist[Home] = True &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*305*) { RP[Home] = True &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*306*) { Real[Home] = True &&
                CacheState[z1] = Shared

}

unsafe (z1 z2) (*307*) { CacheState[z1] = Shared &&
                CacheWait[z1] <> None

}

unsafe (z1 z2) (*308*) { CacheState[z1] = Shared &&
                CacheInvmarked[z1] = True

}

unsafe (z1 z2) (*309*) { CacheState[z1] = Shared &&
                UnetMtype[z1] <> Empty

}

unsafe (z1 z2) (*310*) { Home = z1 &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*311*) { Head_pointer <> z1 &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*312*) { WBnet_proc <> z1 &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*313*) { ShWBnet_proc <> z1 &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*314*) { UnetProc[Home] <> z1 &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*315*) { CacheState[z1] = Invalid &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*316*) { CacheState[z1] = Invalid &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*317*) { CacheInvmarked[Home] = True &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*318*) { Invnet[Home] <> Empty_inv &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*319*) { Shlist[Home] = True &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*320*) { RP[Home] = True &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*321*) { Real[Home] = True &&
                CacheState[z1] = Invalid

}

unsafe (z1 z2) (*322*) { Home = z1 &&
                Real[Home] = False

}

unsafe (z1 z2) (*323*) { Head_pointer <> z1 &&
                Real[Home] = False

}

unsafe (z1 z2) (*324*) { WBnet_proc <> z1 &&
                Real[Home] = False

}

unsafe (z1 z2) (*325*) { ShWBnet_proc <> z1 &&
                Real[Home] = False

}

unsafe (z1 z2) (*326*) { UnetProc[Home] <> z1 &&
                Real[Home] = False

}

unsafe (z1 z2) (*327*) { Real[Home] = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*328*) { Real[Home] = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*329*) { CacheInvmarked[Home] = True &&
                Real[Home] = False

}

unsafe (z1 z2) (*330*) { Invnet[Home] <> Empty_inv &&
                Real[Home] = False

}

unsafe (z1 z2) (*331*) { Shlist[Home] = True &&
                Real[Home] = False

}

unsafe (z1 z2) (*332*) { RP[Home] = True &&
                Real[Home] = False

}

unsafe (z1 z2) (*333*) { Home = z1 &&
                RP[Home] = False

}

unsafe (z1 z2) (*334*) { Head_pointer <> z1 &&
                RP[Home] = False

}

unsafe (z1 z2) (*335*) { WBnet_proc <> z1 &&
                RP[Home] = False

}

unsafe (z1 z2) (*336*) { ShWBnet_proc <> z1 &&
                RP[Home] = False

}

unsafe (z1 z2) (*337*) { UnetProc[Home] <> z1 &&
                RP[Home] = False

}

unsafe (z1 z2) (*338*) { RP[Home] = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*339*) { RP[Home] = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*340*) { CacheInvmarked[Home] = True &&
                RP[Home] = False

}

unsafe (z1 z2) (*341*) { Invnet[Home] <> Empty_inv &&
                RP[Home] = False

}

unsafe (z1 z2) (*342*) { Shlist[Home] = True &&
                RP[Home] = False

}

unsafe (z1 z2) (*343*) { RP[Home] = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*344*) { Home = z1 &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*345*) { Head_pointer <> z1 &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*346*) { WBnet_proc <> z1 &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*347*) { ShWBnet_proc <> z1 &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*348*) { UnetProc[Home] <> z1 &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*349*) { Shlist[Home] = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*350*) { Shlist[Home] = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*351*) { CacheInvmarked[Home] = True &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*352*) { Invnet[Home] <> Empty_inv &&
                Shlist[Home] = False

}

unsafe (z1 z2) (*353*) { Shlist[Home] = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*354*) { Shlist[Home] = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*355*) { Home = z1 &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*356*) { Head_pointer <> z1 &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*357*) { WBnet_proc <> z1 &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*358*) { ShWBnet_proc <> z1 &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*359*) { UnetProc[Home] <> z1 &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*360*) { Invnet[Home] = Empty_inv &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*361*) { Invnet[Home] = Empty_inv &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*362*) { CacheInvmarked[Home] = True &&
                Invnet[Home] = Empty_inv

}

unsafe (z1 z2) (*363*) { Invnet[Home] = Empty_inv &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*364*) { Invnet[Home] = Empty_inv &&
                RP[Home] = True

}

unsafe (z1 z2) (*365*) { Invnet[Home] = Empty_inv &&
                Real[Home] = True

}

unsafe (z1 z2) (*366*) { Home = z1 &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*367*) { Head_pointer <> z1 &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*368*) { WBnet_proc <> z1 &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*369*) { ShWBnet_proc <> z1 &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*370*) { UnetProc[Home] <> z1 &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*371*) { UnetMtype[Home] = PutX &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*372*) { UnetMtype[Home] = PutX &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*373*) { Local = True &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*374*) { CacheState[Home] = Exclusive &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*375*) { CacheWait[Home] <> WGetX &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*376*) { CacheInvmarked[Home] = True &&
                UnetMtype[Home] = PutX

}

unsafe (z1 z2) (*377*) { UnetMtype[Home] = PutX &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*378*) { UnetMtype[Home] = PutX &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*379*) { UnetMtype[Home] = PutX &&
                RP[Home] = True

}

unsafe (z1 z2) (*380*) { UnetMtype[Home] = PutX &&
                Real[Home] = True

}

unsafe (z1 z2) (*381*) { Home = z1 &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*382*) { Head_pointer <> z1 &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*383*) { WBnet_proc <> z1 &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*384*) { ShWBnet_proc <> z1 &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*385*) { UnetProc[Home] <> z1 &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*386*) { UnetMtype[Home] = Put &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*387*) { UnetMtype[Home] = Put &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*388*) { Local = True &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*389*) { CacheState[Home] <> Invalid &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*390*) { CacheWait[Home] <> WGet &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*391*) { CacheInvmarked[Home] = True &&
                UnetMtype[Home] = Put

}

unsafe (z1 z2) (*392*) { UnetMtype[Home] = Put &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*393*) { UnetMtype[Home] = Put &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*394*) { UnetMtype[Home] = Put &&
                RP[Home] = True

}

unsafe (z1 z2) (*395*) { UnetMtype[Home] = Put &&
                Real[Home] = True

}

unsafe (z1 z2) (*396*) { Home = z1 &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*397*) { Head_pointer <> z1 &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*398*) { WBnet_proc <> z1 &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*399*) { ShWBnet_proc <> z1 &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*400*) { UnetProc[Home] <> z1 &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*401*) { UnetMtype[Home] = GetX &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*402*) { UnetMtype[Home] = GetX &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*403*) { Local = True &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*404*) { CacheState[Home] = Exclusive &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*405*) { CacheWait[Home] <> WGetX &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*406*) { CacheInvmarked[Home] = True &&
                UnetMtype[Home] = GetX

}

unsafe (z1 z2) (*407*) { UnetMtype[Home] = GetX &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*408*) { UnetMtype[Home] = GetX &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*409*) { UnetMtype[Home] = GetX &&
                RP[Home] = True

}

unsafe (z1 z2) (*410*) { UnetMtype[Home] = GetX &&
                Real[Home] = True

}

unsafe (z1 z2) (*411*) { Home = z1 &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*412*) { Head_pointer <> z1 &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*413*) { WBnet_proc <> z1 &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*414*) { ShWBnet_proc <> z1 &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*415*) { UnetProc[Home] <> z1 &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*416*) { UnetMtype[Home] = Get &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*417*) { UnetMtype[Home] = Get &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*418*) { Local = True &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*419*) { CacheState[Home] <> Invalid &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*420*) { CacheWait[Home] <> WGet &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*421*) { CacheInvmarked[Home] = True &&
                UnetMtype[Home] = Get

}

unsafe (z1 z2) (*422*) { UnetMtype[Home] = Get &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*423*) { UnetMtype[Home] = Get &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*424*) { UnetMtype[Home] = Get &&
                RP[Home] = True

}

unsafe (z1 z2) (*425*) { UnetMtype[Home] = Get &&
                Real[Home] = True

}

unsafe (z1 z2) (*426*) { Home = z1 &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*427*) { Head_pointer <> z1 &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*428*) { WBnet_proc <> z1 &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*429*) { ShWBnet_proc <> z1 &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*430*) { UnetProc[Home] <> z1 &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*431*) { UnetMtype[Home] = Empty &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*432*) { UnetMtype[Home] = Empty &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*433*) { CacheWait[Home] <> None &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*434*) { CacheInvmarked[Home] = True &&
                UnetMtype[Home] = Empty

}

unsafe (z1 z2) (*435*) { UnetMtype[Home] = Empty &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*436*) { UnetMtype[Home] = Empty &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*437*) { UnetMtype[Home] = Empty &&
                RP[Home] = True

}

unsafe (z1 z2) (*438*) { UnetMtype[Home] = Empty &&
                Real[Home] = True

}

unsafe (z1 z2) (*439*) { Home = z1 &&
                UnetProc[Home] = z1

}

unsafe (z1 z2) (*440*) { Head_pointer <> z1 &&
                UnetProc[Home] = z1

}

unsafe (z1 z2) (*441*) { WBnet_proc <> z1 &&
                UnetProc[Home] = z1

}

unsafe (z1 z2) (*442*) { ShWBnet_proc <> z1 &&
                UnetProc[Home] = z1

}

unsafe (z1 z2) (*443*) { UnetProc[Home] = z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*444*) { UnetProc[Home] = z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*445*) { CacheInvmarked[Home] = True &&
                UnetProc[Home] = z1

}

unsafe (z1 z2) (*446*) { UnetProc[Home] = z1 &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*447*) { UnetProc[Home] = z1 &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*448*) { UnetProc[Home] = z1 &&
                RP[Home] = True

}

unsafe (z1 z2) (*449*) { UnetProc[Home] = z1 &&
                Real[Home] = True

}

unsafe (z1 z2) (*450*) { Home = z1 &&
                CacheInvmarked[Home] = False

}

unsafe (z1 z2) (*451*) { Head_pointer <> z1 &&
                CacheInvmarked[Home] = False

}

unsafe (z1 z2) (*452*) { WBnet_proc <> z1 &&
                CacheInvmarked[Home] = False

}

unsafe (z1 z2) (*453*) { ShWBnet_proc <> z1 &&
                CacheInvmarked[Home] = False

}

unsafe (z1 z2) (*454*) { CacheInvmarked[Home] = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*455*) { CacheInvmarked[Home] = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*456*) { CacheInvmarked[Home] = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*457*) { CacheInvmarked[Home] = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*458*) { CacheInvmarked[Home] = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*459*) { CacheInvmarked[Home] = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*460*) { CacheInvmarked[Home] = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*461*) { Home = z1 &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*462*) { Head_pointer <> z1 &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*463*) { WBnet_proc <> z1 &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*464*) { ShWBnet_proc <> z1 &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*465*) { CacheWait[Home] = WGetX &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*466*) { CacheWait[Home] = WGetX &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*467*) { CacheWait[Home] = WGetX &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*468*) { Local = True &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*469*) { CacheState[Home] = Exclusive &&
                CacheWait[Home] = WGetX

}

unsafe (z1 z2) (*470*) { CacheWait[Home] = WGetX &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*471*) { CacheWait[Home] = WGetX &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*472*) { CacheWait[Home] = WGetX &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*473*) { CacheWait[Home] = WGetX &&
                RP[Home] = True

}

unsafe (z1 z2) (*474*) { CacheWait[Home] = WGetX &&
                Real[Home] = True

}

unsafe (z1 z2) (*475*) { Home = z1 &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*476*) { Head_pointer <> z1 &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*477*) { WBnet_proc <> z1 &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*478*) { ShWBnet_proc <> z1 &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*479*) { CacheWait[Home] = WGet &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*480*) { CacheWait[Home] = WGet &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*481*) { CacheWait[Home] = WGet &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*482*) { Local = True &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*483*) { CacheState[Home] <> Invalid &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*484*) { CacheWait[Home] = WGet &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*485*) { CacheWait[Home] = WGet &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*486*) { CacheWait[Home] = WGet &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*487*) { CacheWait[Home] = WGet &&
                RP[Home] = True

}

unsafe (z1 z2) (*488*) { CacheWait[Home] = WGet &&
                Real[Home] = True

}

unsafe (z1 z2) (*489*) { Home = z1 &&
                CacheWait[Home] = None

}

unsafe (z1 z2) (*490*) { Head_pointer <> z1 &&
                CacheWait[Home] = None

}

unsafe (z1 z2) (*491*) { WBnet_proc <> z1 &&
                CacheWait[Home] = None

}

unsafe (z1 z2) (*492*) { ShWBnet_proc <> z1 &&
                CacheWait[Home] = None

}

unsafe (z1 z2) (*493*) { CacheWait[Home] = None &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*494*) { CacheWait[Home] = None &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*495*) { CacheWait[Home] = None &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*496*) { CacheWait[Home] = None &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*497*) { CacheWait[Home] = None &&
                UnetMtype[Home] <> Empty

}

unsafe (z1 z2) (*498*) { CacheWait[Home] = None &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*499*) { CacheWait[Home] = None &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*500*) { CacheWait[Home] = None &&
                RP[Home] = True

}

unsafe (z1 z2) (*501*) { CacheWait[Home] = None &&
                Real[Home] = True

}

unsafe (z1 z2) (*502*) { Home = z1 &&
                CacheState[Home] = Exclusive

}

unsafe (z1 z2) (*503*) { Head_pointer <> z1 &&
                CacheState[Home] = Exclusive

}

unsafe (z1 z2) (*504*) { WBnet_proc <> z1 &&
                CacheState[Home] = Exclusive

}

unsafe (z1 z2) (*505*) { ShWBnet_proc <> z1 &&
                CacheState[Home] = Exclusive

}

unsafe (z1 z2) (*506*) { CacheState[Home] = Exclusive &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*507*) { CacheState[Home] = Exclusive &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*508*) { CacheState[Home] = Exclusive &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*509*) { CacheState[Home] = Exclusive &&
                CacheWait[Home] <> None

}

unsafe (z1 z2) (*510*) { CacheState[Home] = Exclusive &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*511*) { CacheState[Home] = Exclusive &&
                UnetMtype[Home] <> Empty

}

unsafe (z1 z2) (*512*) { CacheState[Home] = Exclusive &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*513*) { CacheState[Home] = Exclusive &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*514*) { CacheState[Home] = Exclusive &&
                RP[Home] = True

}

unsafe (z1 z2) (*515*) { CacheState[Home] = Exclusive &&
                Real[Home] = True

}

unsafe (z1 z2) (*516*) { Home = z1 &&
                CacheState[Home] = Shared

}

unsafe (z1 z2) (*517*) { Head_pointer <> z1 &&
                CacheState[Home] = Shared

}

unsafe (z1 z2) (*518*) { WBnet_proc <> z1 &&
                CacheState[Home] = Shared

}

unsafe (z1 z2) (*519*) { ShWBnet_proc <> z1 &&
                CacheState[Home] = Shared

}

unsafe (z1 z2) (*520*) { CacheState[Home] = Shared &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*521*) { CacheState[Home] = Shared &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*522*) { CacheState[Home] = Shared &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*523*) { CacheState[Home] = Shared &&
                CacheWait[Home] = WGet

}

unsafe (z1 z2) (*524*) { CacheState[Home] = Shared &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*525*) { CacheState[Home] = Shared &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*526*) { CacheState[Home] = Shared &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*527*) { CacheState[Home] = Shared &&
                RP[Home] = True

}

unsafe (z1 z2) (*528*) { CacheState[Home] = Shared &&
                Real[Home] = True

}

unsafe (z1 z2) (*529*) { Home = z1 &&
                CacheState[Home] = Invalid

}

unsafe (z1 z2) (*530*) { Head_pointer <> z1 &&
                CacheState[Home] = Invalid

}

unsafe (z1 z2) (*531*) { WBnet_proc <> z1 &&
                CacheState[Home] = Invalid

}

unsafe (z1 z2) (*532*) { ShWBnet_proc <> z1 &&
                CacheState[Home] = Invalid

}

unsafe (z1 z2) (*533*) { CacheState[Home] = Invalid &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*534*) { CacheState[Home] = Invalid &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*535*) { CacheState[Home] = Invalid &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*536*) { CacheState[Home] = Invalid &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*537*) { CacheState[Home] = Invalid &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*538*) { CacheState[Home] = Invalid &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*539*) { CacheState[Home] = Invalid &&
                RP[Home] = True

}

unsafe (z1 z2) (*540*) { CacheState[Home] = Invalid &&
                Real[Home] = True

}

unsafe (z1 z2) (*541*) { Home = z1 &&
                ShWBnet_proc = z1

}

unsafe (z1 z2) (*542*) { Head_pointer <> z1 &&
                ShWBnet_proc = z1

}

unsafe (z1 z2) (*543*) { WBnet_proc <> z1 &&
                ShWBnet_proc = z1

}

unsafe (z1 z2) (*544*) { ShWBnet_proc = z1 &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*545*) { ShWBnet_proc = z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*546*) { ShWBnet_proc = z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*547*) { ShWBnet_proc = z1 &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*548*) { ShWBnet_proc = z1 &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*549*) { ShWBnet_proc = z1 &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*550*) { ShWBnet_proc = z1 &&
                RP[Home] = True

}

unsafe (z1 z2) (*551*) { ShWBnet_proc = z1 &&
                Real[Home] = True

}

unsafe (z1 z2) (*552*) { Home = z1 &&
                ShWBnet_mtype = FAck

}

unsafe (z1 z2) (*553*) { Head_pointer <> z1 &&
                ShWBnet_mtype = FAck

}

unsafe (z1 z2) (*554*) { WBnet_proc <> z1 &&
                ShWBnet_mtype = FAck

}

unsafe (z1 z2) (*555*) { ShWBnet_mtype = FAck &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*556*) { ShWBnet_mtype = FAck &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*557*) { ShWBnet_mtype = FAck &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*558*) { ShWBnet_mtype = FAck &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*559*) { ShWBnet_mtype = FAck &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*560*) { ShWBnet_mtype = FAck &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*561*) { ShWBnet_mtype = FAck &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*562*) { ShWBnet_mtype = FAck &&
                RP[Home] = True

}

unsafe (z1 z2) (*563*) { ShWBnet_mtype = FAck &&
                Real[Home] = True

}

unsafe (z1 z2) (*564*) { Home = z1 &&
                ShWBnet_mtype = ShWB

}

unsafe (z1 z2) (*565*) { Head_pointer <> z1 &&
                ShWBnet_mtype = ShWB

}

unsafe (z1 z2) (*566*) { WBnet_proc <> z1 &&
                ShWBnet_mtype = ShWB

}

unsafe (z1 z2) (*567*) { ShWBnet_mtype = ShWB &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*568*) { ShWBnet_mtype = ShWB &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*569*) { ShWBnet_mtype = ShWB &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*570*) { ShWBnet_mtype = ShWB &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*571*) { ShWBnet_mtype = ShWB &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*572*) { ShWBnet_mtype = ShWB &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*573*) { ShWBnet_mtype = ShWB &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*574*) { ShWBnet_mtype = ShWB &&
                RP[Home] = True

}

unsafe (z1 z2) (*575*) { ShWBnet_mtype = ShWB &&
                Real[Home] = True

}

unsafe (z1 z2) (*576*) { Home = z1 &&
                ShWBnet_mtype = Empty_shwb

}

unsafe (z1 z2) (*577*) { Head_pointer <> z1 &&
                ShWBnet_mtype = Empty_shwb

}

unsafe (z1 z2) (*578*) { WBnet_proc <> z1 &&
                ShWBnet_mtype = Empty_shwb

}

unsafe (z1 z2) (*579*) { ShWBnet_mtype = Empty_shwb &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*580*) { ShWBnet_mtype = Empty_shwb &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*581*) { ShWBnet_mtype = Empty_shwb &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*582*) { ShWBnet_mtype = Empty_shwb &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*583*) { ShWBnet_mtype = Empty_shwb &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*584*) { ShWBnet_mtype = Empty_shwb &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*585*) { ShWBnet_mtype = Empty_shwb &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*586*) { ShWBnet_mtype = Empty_shwb &&
                RP[Home] = True

}

unsafe (z1 z2) (*587*) { ShWBnet_mtype = Empty_shwb &&
                Real[Home] = True

}

unsafe (z1 z2) (*588*) { Home = z1 &&
                WBnet_proc = z1

}

unsafe (z1 z2) (*589*) { Head_pointer <> z1 &&
                WBnet_proc = z1

}

unsafe (z1 z2) (*590*) { WBnet_proc = z1 &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*591*) { WBnet_proc = z1 &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*592*) { WBnet_proc = z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*593*) { WBnet_proc = z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*594*) { WBnet_proc = z1 &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*595*) { WBnet_proc = z1 &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*596*) { WBnet_proc = z1 &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*597*) { WBnet_proc = z1 &&
                RP[Home] = True

}

unsafe (z1 z2) (*598*) { WBnet_proc = z1 &&
                Real[Home] = True

}

unsafe (z1 z2) (*599*) { Home = z1 &&
                WBnet_mtype = WB

}

unsafe (z1 z2) (*600*) { Head_pointer <> z1 &&
                WBnet_mtype = WB

}

unsafe (z1 z2) (*601*) { WBnet_mtype = WB &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*602*) { WBnet_mtype = WB &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*603*) { WBnet_mtype = WB &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*604*) { WBnet_mtype = WB &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*605*) { WBnet_mtype = WB &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*606*) { WBnet_mtype = WB &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*607*) { WBnet_mtype = WB &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*608*) { WBnet_mtype = WB &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*609*) { WBnet_mtype = WB &&
                RP[Home] = True

}

unsafe (z1 z2) (*610*) { WBnet_mtype = WB &&
                Real[Home] = True

}

unsafe (z1 z2) (*611*) { Home = z1 &&
                WBnet_mtype = Empty_wb

}

unsafe (z1 z2) (*612*) { Head_pointer <> z1 &&
                WBnet_mtype = Empty_wb

}

unsafe (z1 z2) (*613*) { WBnet_mtype = Empty_wb &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*614*) { WBnet_mtype = Empty_wb &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*615*) { WBnet_mtype = Empty_wb &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*616*) { WBnet_mtype = Empty_wb &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*617*) { WBnet_mtype = Empty_wb &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*618*) { WBnet_mtype = Empty_wb &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*619*) { WBnet_mtype = Empty_wb &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*620*) { WBnet_mtype = Empty_wb &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*621*) { WBnet_mtype = Empty_wb &&
                RP[Home] = True

}

unsafe (z1 z2) (*622*) { WBnet_mtype = Empty_wb &&
                Real[Home] = True

}

unsafe (z1 z2) (*623*) { Home = z1 &&
                Nakc = False

}

unsafe (z1 z2) (*624*) { Head_pointer <> z1 &&
                Nakc = False

}

unsafe (z1 z2) (*625*) { Nakc = False &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*626*) { Nakc = False &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*627*) { Nakc = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*628*) { Nakc = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*629*) { Nakc = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*630*) { Nakc = False &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*631*) { Nakc = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*632*) { Nakc = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*633*) { Nakc = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*634*) { Nakc = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*635*) { Home = z1 &&
                Nakc = True

}

unsafe (z1 z2) (*636*) { Head_pointer <> z1 &&
                Nakc = True

}

unsafe (z1 z2) (*637*) { Nakc = True &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*638*) { Nakc = True &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*639*) { Nakc = True &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*640*) { Nakc = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*641*) { Nakc = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*642*) { Nakc = True &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*643*) { Nakc = True &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*644*) { Nakc = True &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*645*) { Nakc = True &&
                RP[Home] = True

}

unsafe (z1 z2) (*646*) { Nakc = True &&
                Real[Home] = True

}

unsafe (z1 z2) (*647*) { Home = z1 &&
                Head_pointer = z1

}

unsafe (z1 z2) (*648*) { Head_pointer = z1 &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*649*) { Head_pointer = z1 &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*650*) { Head_pointer = z1 &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*651*) { Head_pointer = z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*652*) { Head_pointer = z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*653*) { Head_pointer = z1 &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*654*) { Head_pointer = z1 &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*655*) { Head_pointer = z1 &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*656*) { Head_pointer = z1 &&
                RP[Home] = True

}

unsafe (z1 z2) (*657*) { Head_pointer = z1 &&
                Real[Home] = True

}

unsafe (z1 z2) (*658*) { Home = z1 &&
                Head_valid = False

}

unsafe (z1 z2) (*659*) { Head_valid = False &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*660*) { Head_valid = False &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*661*) { Head_valid = False &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*662*) { Head_valid = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*663*) { Head_valid = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*664*) { Head_valid = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*665*) { Head_valid = False &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*666*) { Head_valid = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*667*) { Head_valid = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*668*) { Head_valid = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*669*) { Head_valid = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*670*) { Home = z1 &&
                Head_valid = True

}

unsafe (z1 z2) (*671*) { Head_valid = True &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*672*) { Head_valid = True &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*673*) { Head_valid = True &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*674*) { Head_valid = True &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*675*) { Head_valid = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*676*) { Head_valid = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*677*) { Head_valid = True &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*678*) { Head_valid = True &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*679*) { Head_valid = True &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*680*) { Head_valid = True &&
                RP[Home] = True

}

unsafe (z1 z2) (*681*) { Head_valid = True &&
                Real[Home] = True

}

unsafe (z1 z2) (*682*) { Home = z1 &&
                Dirty = False

}

unsafe (z1 z2) (*683*) { Dirty = False &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*684*) { Dirty = False &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*685*) { Dirty = False &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*686*) { Dirty = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*687*) { Dirty = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*688*) { Dirty = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*689*) { Dirty = False &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*690*) { Dirty = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*691*) { Dirty = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*692*) { Dirty = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*693*) { Dirty = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*694*) { Home = z1 &&
                Dirty = True

}

unsafe (z1 z2) (*695*) { Dirty = True &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*696*) { Dirty = True &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*697*) { Dirty = True &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*698*) { Dirty = True &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*699*) { Dirty = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*700*) { Dirty = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*701*) { Dirty = True &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*702*) { Dirty = True &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*703*) { Dirty = True &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*704*) { Dirty = True &&
                RP[Home] = True

}

unsafe (z1 z2) (*705*) { Dirty = True &&
                Real[Home] = True

}

unsafe (z1 z2) (*706*) { Home = z1 &&
                Local = False

}

unsafe (z1 z2) (*707*) { Local = False &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*708*) { Local = False &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*709*) { Local = False &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*710*) { Local = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*711*) { Local = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*712*) { Local = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*713*) { Local = False &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*714*) { Local = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*715*) { Local = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*716*) { Local = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*717*) { Local = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*718*) { Home = z1 &&
                Local = True

}

unsafe (z1 z2) (*719*) { Local = True &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*720*) { Local = True &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*721*) { Local = True &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*722*) { Local = True &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*723*) { Local = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*724*) { Local = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*725*) { Local = True &&
                CacheWait[Home] <> None

}

unsafe (z1 z2) (*726*) { Local = True &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*727*) { Local = True &&
                UnetMtype[Home] <> Empty

}

unsafe (z1 z2) (*728*) { Local = True &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*729*) { Local = True &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*730*) { Local = True &&
                RP[Home] = True

}

unsafe (z1 z2) (*731*) { Local = True &&
                Real[Home] = True

}

unsafe (z1 z2) (*732*) { Home = z1 &&
                Pending = False

}

unsafe (z1 z2) (*733*) { Pending = False &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*734*) { Pending = False &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*735*) { Pending = False &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*736*) { Pending = False &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*737*) { Pending = False &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*738*) { Pending = False &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*739*) { Pending = False &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*740*) { Pending = False &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*741*) { Pending = False &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*742*) { Pending = False &&
                RP[Home] = True

}

unsafe (z1 z2) (*743*) { Pending = False &&
                Real[Home] = True

}

unsafe (z1 z2) (*744*) { Home = z1 &&
                Pending = True

}

unsafe (z1 z2) (*745*) { Pending = True &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*746*) { Pending = True &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*747*) { Pending = True &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*748*) { Pending = True &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*749*) { Pending = True &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*750*) { Pending = True &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*751*) { Pending = True &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*752*) { Pending = True &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*753*) { Pending = True &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*754*) { Pending = True &&
                RP[Home] = True

}

unsafe (z1 z2) (*755*) { Pending = True &&
                Real[Home] = True

}

unsafe (z1 z2) (*756*) { Pending = True &&
                Shlist[z1] = True

}

unsafe (z1 z2) (*757*) { Home <> z1 &&
                Head_pointer <> z1

}

unsafe (z1 z2) (*758*) { Home <> z1 &&
                WBnet_proc <> z1

}

unsafe (z1 z2) (*759*) { Home <> z1 &&
                ShWBnet_proc <> z1

}

unsafe (z1 z2) (*760*) { Home <> z1 &&
                UnetProc[Home] <> z1

}

unsafe (z1 z2) (*761*) { Home <> z1 &&
                UnetProc[z1] <> z1

}

unsafe (z1 z2) (*762*) { Home <> z1 &&
                UnetProc[z1] = z1

}

unsafe (z1 z2) (*763*) { Home <> z1 &&
                CacheInvmarked[Home] = True

}

unsafe (z1 z2) (*764*) { Home <> z1 &&
                Invnet[Home] <> Empty_inv

}

unsafe (z1 z2) (*765*) { Home <> z1 &&
                Shlist[Home] = True

}

unsafe (z1 z2) (*766*) { Home <> z1 &&
                RP[Home] = True

}

unsafe (z1 z2) (*767*) { Home <> z1 &&
                Real[Home] = True
			  }















unsafe (p1 p2) { CacheState[p1] = Exclusive && CacheState[p2] = Exclusive }

transition pi_Local_Get_Dirty (home)
requires { Home = home &&
           CacheState[home] = Invalid && CacheWait[home] = None && 
	   Pending = False && Dirty = True }
{ 
  Home:= home; 
  Pending := True;
  CacheWait[j] := case 
  	           | j = home : WGet 
		   | _ : CacheWait[j] ;
  UnetProc[j] := case 
  	      	   | j = home : Head_pointer 
		   | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = home : Get 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = home : Undefined | _ : UnetData[j] } *)
}

transition pi_Local_Get_Other1 (home)
requires { Home = home &&
          CacheState[home] = Invalid && CacheWait[home] = None && 
	  Pending = False && Dirty = False && CacheInvmarked[home] = True }
{ 
  Home:= home; 
  Local := True;
  CacheWait[j] := case 
                   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = home : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition pi_Local_Get_Other2 (home)
requires { Home = home &&
           CacheState[home] = Invalid && CacheWait[home] = None && 
	   Pending = False && Dirty = False && CacheInvmarked[home] = False }
{ 
  Home:= home; 
  Local := True;
  CacheWait[j] := case 
                   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheData[j] := case 
  	       	   | j = home : Memory 
		   | _ : CacheData[j] ;
  CacheState[j] := case
  		    | j = home : Shared 
		    | _ : CacheState[j] 
}


transition pi_Remote_Get (src home)
requires { Home = home &&
           CacheState[src] = Invalid && CacheWait[src] = None }
{ 
  Home:= home ;
  CacheWait[j] := case 
  	       	   | j = src : WGet 
		   | _ : CacheWait[j] ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	  | j = src : Get 
		  | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}



transition pi_Local_GetX_Dirty (home)
requires { Home = home &&
           CacheState[home] <> Exclusive && CacheWait[home] = None &&
 	  Pending = False && Dirty = True }
{  
  Home:= home; 
  Pending := True;
  CacheWait[j] := case 
  	       	   | j = home : WGetX 
		   | _ : CacheWait[j] ;
  UnetProc[j] := case 
  	      	   | j = home : Head_pointer 
		   | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = home : GetX 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = home : Undefined | _ : UnetData[j] } *)
}

transition pi_Local_GetX_Other (home)
requires { Home = home &&
           Head_valid = False &&
	   CacheState[home] <> Exclusive && CacheWait[home] = None && 
	   Pending = False && Dirty = False }
{ 
  Home:= home; 
  Local := True; 
  Dirty := True;
  CacheData[j] := case 
  	       	   | j = home : Memory 
		   | _ : CacheData[j] ;
  CacheWait[j] := case 
  	       	   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = home : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Exclusive 
		    | _ : CacheState[j] 
}

transition pi_Local_GetX_Other_head (home)
requires { Home = home &&
           Head_valid = True &&
	   CacheState[home] <> Exclusive && CacheWait[home] = None && 
	   Pending = False && Dirty = False }
{ Home:= home; 
  Local := True; 
  Dirty := True;
  Pending := True;
  Head_valid := False;
  CacheData[j] := case 
  	       	   | j = home : Memory 
		   | _ : CacheData[j] ;
  CacheWait[j] := case 
  	       	   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = home : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Exclusive 
		    | _ : CacheState[j] ;
  Shlist[j] := case | _ : False ;
  Invnet[j] := case 
  	        | j = home : Empty_inv
	        | j = Head_pointer : Inv
	        | Shlist[j] = True : Inv
	        | _ : Empty_inv ;
  Real[j] := case 
  	      | j = home : False 
	      | j = Head_pointer : True 
	      | _ : Shlist[j] 
}

transition pi_Remote_GetX (src home)
requires { Home = home && CacheState[src] = Invalid && CacheWait[src] = None }
{ 
  Home:= home ;
  CacheWait[j] := case 
  	           | j = src : WGetX 
		   | _ : CacheWait[j] ;
  UnetProc[j] := case 
  	      	   | j = src : home 
		   | _ : UnetProc[j] ;
  UnetMtype[j] := case
  	       	   | j = src : GetX 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition pi_Local_PutX_Pending (home)
requires { Home = home &&
          CacheState[home] = Exclusive && CacheWait[home] = None &&
	  Pending = True}
{ 
  Home:= home; 
  Dirty := False; 
  Memory := CacheData[home] ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition pi_Local_PutX_Other (home)
requires { Home = home &&
          CacheState[home] = Exclusive && CacheWait[home] = None &&
	  Pending = True}
{ 
  Home:= home; 
  Local := False; 
  Dirty := False; 
  Memory := CacheData[home] ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition pi_Remote_PutX (dst home)
requires { Home = home &&
           CacheState[dst] = Exclusive }
{ 
  Home:= home; 
  WBnet_proc := dst; 
  WBnet_mtype := WB; 
  WBnet_data := CacheData[dst];
  CacheState[j] := case 
  		    | j = dst : Invalid 
		    | _ : CacheState[j] 
}


transition pi_Local_Replace (home)
requires { Home = home &&
           CacheState[home] = Shared && CacheWait[home] = None }
{ 
  Home:= home; 
  Local := False;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition pi_Remote_Replace (src home)
requires { Home = home &&
           CacheState[src] = Shared && CacheWait[src] = None }
{ 
  Home:= home;
  CacheState[j] := case 
  		    | j = src : Invalid 
		    | _ : CacheState[j] ;
  RP[j] := case 
  	    | j = src : True 
	    | _ : RP[j] 
}



transition ni_NAK (dst)
requires { UnetMtype[dst] = Nak }
{ 
  UnetMtype[j] := case 
  	       	   | j = dst : Empty 
		   | _ : UnetMtype[j] ;
  CacheWait[j] := case 
  	       	   | j = dst : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = dst : False 
			| _ : CacheInvmarked[j] 
}

transition ni_NAK_Clear ()
requires { Nakc = True }
{ 
  Pending := False; 
  Nakc := False
}

transition ni_Local_Get_Pending (src home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = home && RP[src] = False &&
	   Pending = True }
{ 
  Home:= home ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Nak 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Local_Get_Dirty_NotLocal (src home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = home && RP[src] = False &&
	   Pending = False && Dirty = True && Local = False }
{ 
  Home:= home; 
  Pending := True;
  UnetProc[j] := case 
  	      	  | j = src : Head_pointer 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Get 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Local_Get_Dirty_Local (src home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = home && RP[src] = False &&
	   Pending = False && Dirty = True && Local = True }
{ 
  Home:= home; 
  Dirty := False; 
  Head_valid := True; 
  Head_pointer := src;
  Memory := CacheData[home] ;
  CacheState[j] := case 
  		    | j = home : Shared 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Put 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : CacheData[home] 
		  | _ : UnetData[j] 
}

transition ni_Local_Get_NotDirty_Head (src home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = home && RP[src] = False &&
	   Pending = False && Dirty = False && Head_valid = True }
{ 
  Home:= home;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Put 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case 
  	        | j = src : True 
		| _ : Shlist[j] ;
  Real[j] := case 
              | j = src : True 
	      | _ : Shlist[j] 
}

transition ni_Local_Get_NotDirty (src home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = home && RP[src] = False &&
	   Pending = False && Dirty = False && Head_valid = False }
{ 
  Home:= home; 
  Head_valid := True; 
  Head_pointer := src ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Put 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] 
}

transition ni_Remote_Get1 (src dst home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = dst && 
	   CacheState[dst] <> Exclusive }
{ 
  Home:= home; 
  Nakc := True;
  UnetProc[j] := case 
  	      	  | j = src : dst 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Nak 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Remote_Get2 (home dst)
requires { Home = home &&
           UnetMtype[home] = Get &&
  	   UnetProc[home] = dst &&
 	   CacheState[dst] = Exclusive && CacheInvmarked[home] = False }
{ 
  Home:= home;
  CacheState[j] := case 
  		    | j = dst : Shared 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = home : dst 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = home : Put 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = home : CacheData[dst] 
		  | _ : UnetData[j] 
}

transition ni_Remote_Get3 (src dst home)
requires { Home = home &&
           UnetMtype[src] = Get &&
	   UnetProc[src] = dst &&
	   CacheState[dst] = Exclusive && CacheInvmarked[src] = False }
{ 
  Home:= home ; 
  ShWBnet_proc := src ;
  ShWBnet_mtype := ShWB ;
  ShWBnet_data := CacheData[dst] ;
  CacheState[j] := case 
  		    | j = dst : Shared 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = src : dst 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Put 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : CacheData[dst] 
		  | _ : UnetData[j] 
}


transition ni_Local_GetX_Pending (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
	   Pending = True }
{ 
  Home:= home ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : Nak 
		   | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Local_GetX_Dirty_NotLocal (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
 	  Pending = False && Dirty = True && Local = False }
{ 
  Home:= home; 
  Pending := True;
  UnetProc[j] := case 
  	      	  | j = src : Head_pointer 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	  | j = src : GetX 
		  | _ : UnetMtype[j] ;
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Local_GetX_Dirty_Local (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
           Pending = False && Dirty = True && Local = True }
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	  | j = src : PutX 
		  | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : CacheData[home] 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_NotLocal (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
	   Pending = False && Dirty = False && Local = False &&
	   Head_valid = False }
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True;
  Head_pointer := src;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : PutX 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local1 (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
	   Pending = False && Dirty = False && Local = True &&
	   Head_valid = False && CacheWait[home] = WGet }
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] ;
  UnetProc[j] := case
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	  | j = src : PutX 
		  | _ : UnetMtype[j];
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False ;
  CacheInvmarked[j] := case
			| j = home : True 
			| _ : CacheInvmarked[j] 
}

transition ni_Local_GetX_NotDirty_Local2 (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
	   Pending = False && Dirty = False && Local = True &&
	   Head_valid = False && CacheWait[home] <> WGet }
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j];
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case
  	       	  | j = src : PutX 
		  | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Head (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
 	   Pending = False && Dirty = False &&
	   Head_valid = True }
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src; 
  Pending := True;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : PutX 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case
  	      | j = home : False
	      | j = src : False
	      | j = Head_pointer : True 
	      | _ : Shlist[j] ;
  Invnet[j] := case 
  	        | j = home : Empty_inv
	      	| j = src : Empty_inv
		| j = Head_pointer : Inv
	        | Shlist[j] = True : Inv
	        | _ : Empty_inv 
}

transition ni_Local_GetX_NotDirty_Head_Local1 (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
	   Pending = False && Dirty = False &&
	   Head_valid = True && Local = True && CacheWait[home] = WGet}
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;	
  Pending := True;
  UnetProc[j] := case 
  	      	  | j = src : home 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : PutX 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
  	      | j = home : False
	      | j = src : False
	      | j = Head_pointer : True 
	      | _ : Shlist[j] ;
  Invnet[j] := case
  	        | j = home : Empty_inv
		| j = src : Empty_inv
	      	| j = Head_pointer : Inv
	      	| Shlist[j] = True : Inv
	      	| _ : Empty_inv ;
  CacheInvmarked[j] := case 
  		       	| j = home : True 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition ni_Local_GetX_NotDirty_Head_Local2 (src home)
requires { Home = home &&
           UnetMtype[src] = GetX && UnetProc[src] = home &&
 	   Pending = False && Dirty = False &&
	   Head_valid = True && Local = True && CacheWait[home] <> WGet}
{ 
  Home:= home; 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src; 
  Pending := True ;
  UnetProc[j] := case 
  	      	  | j = src : home
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = src : PutX 
		   | _ : UnetMtype[j];
  UnetData[j] := case 
  	      	  | j = src : Memory 
		  | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case
  	      | j = home : False
	      | j = src : False
	      | j = Head_pointer : True 
	      | _ : Shlist[j] ;
  Invnet[j] := case 
  	        | j = home : Empty_inv
	      	| j = src : Empty_inv
	      	| j = Head_pointer : Inv
	      	| Shlist[j] = True : Inv
	      	| _ : Empty_inv ;
  CacheState[j] := case 
  		    | j = home : Invalid	
		    | _ : CacheState[j] 
}

transition ni_Remote_GetX1 (src dst home)
requires { Home = home &&
           UnetMtype[src] = GetX &&
	   UnetProc[src] = dst && 
	   CacheState[dst] <> Exclusive }
{
  Home:= home; 
  Nakc := True;
  UnetProc[j] := case 
  	      	  | j = src : dst 
		  | _ : UnetProc[j];
  UnetMtype[j] := case
  	       	   | j = src : Nak 
		   | _ : UnetMtype[j];
  (* UnetData[j] := {| j = src : Undefined | _ : UnetData[j] } *)
}

transition ni_Remote_GetX2 (home dst)
requires { Home = home &&
           UnetMtype[home] = GetX &&
  	   UnetProc[home] = dst &&
	   CacheState[dst] = Exclusive }
{ Home:= home ;
  CacheState[j] := case
  		    | j = dst : Invalid 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = home : dst 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case 
  	       	   | j = home : PutX 
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = home : CacheData[dst] 
		  | _ : UnetData[j] 
}

transition ni_Remote_GetX3 (src dst home)
requires { Home = home &&
           UnetMtype[src] = GetX &&
  	   UnetProc[src] = dst &&
	   CacheState[dst] = Exclusive}
{ 
  Home:= home; 
  ShWBnet_proc := src;
  ShWBnet_mtype := FAck;
  (* ShWBnet_data := Undefined ; *) 
  CacheState[j] := case 
  		    | j = dst : Invalid 
		    | _ : CacheState[j] ;
  UnetProc[j] := case 
  	      	  | j = src : dst 
		  | _ : UnetProc[j] ;
  UnetMtype[j] := case
  	       	   | j = src : PutX
		   | _ : UnetMtype[j] ;
  UnetData[j] := case 
  	      	  | j = src : CacheData[dst] 
		  | _ : UnetData[j] 
}

transition ni_Local_Put1 (home)
requires { Home = home &&
           UnetMtype[home] = Put &&
  	   CacheInvmarked[home] = True }
{ 
  Home:= home; 
  Pending := False; 
  Dirty := False; 
  Local := True;
  Memory := UnetData[home] ;
  UnetMtype[j] := case 
  	       	   | j = home : Empty 
		   | _ : UnetMtype[j] ;
  CacheWait[j] := case
  	       	   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = home : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Invalid 
		    | _ : CacheState[j] 
}

transition ni_Local_Put2 (home)
requires { Home = home &&
           UnetMtype[home] = Put &&
	   CacheInvmarked[home] = False }
{ 
  Home:= home;
  Pending := False; 
  Dirty := False; 
  Local := True;
  Memory := UnetData[home];
  UnetMtype[j] := case 
  	       	   | j = home : Empty 
		   | _ : UnetMtype[j] ;
  CacheWait[j] := case
  	       	   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheData[j] := case 
  	       	   | j = home : UnetData[home] 
		   | _ : CacheData[j] ;
  CacheState[j] := case
  		    | j = home : Shared 
		    | _ : CacheState[j] 
}

transition ni_Remote_Put1 (dst home)
requires { Home = home &&
           UnetMtype[dst] = Put &&
	   CacheInvmarked[dst] = True }
{ 
  Home:= home;
  UnetMtype[j] := case 
  	       	   | j = dst : Empty 
		   | _ : UnetMtype[j] ;
  CacheWait[j] := case 
  	       	   | j = dst : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case
  		        | j = dst : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = dst : Invalid 
		    | _ : CacheState[j] 
}

transition ni_Remote_Put2 (dst home)
requires { Home = home &&
           UnetMtype[dst] = Put &&
  	   CacheInvmarked[dst] = False }
{ 
  Home:= home;
  UnetMtype[j] := case 
  	       	   | j = dst : Empty 
		   | _ : UnetMtype[j];
  CacheWait[j] := case 
  	       	   | j = dst : None 
		   | _ : CacheWait[j] ;
  CacheData[j] := case 
  	       	   | j = dst : UnetData[dst] 
		   | _ : CacheData[j] ;
  CacheState[j] := case 
  		    | j = dst : Shared 
		    | _ : CacheState[j] 
}

transition ni_Local_PutXAcksDone (home)
requires { Home = home &&
           UnetMtype[home] = PutX }
{ 
  Home:= home; 
  Pending := False; 
  Head_valid := False; 
  Local := True;
  UnetMtype[j] := case 
  	       	   | j = home : Empty 
		   | _ : UnetMtype[j] ;
  CacheData[j] := case 
  	       	   | j = home : UnetData[home] 
		   | _ : CacheData[j] ;
  CacheWait[j] := case 
  	       	   | j = home : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		       	| j = home : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = home : Exclusive 
		    | _ : CacheState[j] 
}

transition ni_Remote_PutX (dst home)
requires { Home = home &&
           UnetMtype[dst] = PutX &&
  	   CacheWait[dst] = WGetX }
{ 
  Home:= home;
  UnetMtype[j] := case 
  	       	   | j = dst : Empty 
		   | _ : UnetMtype[j] ;
  CacheData[j] := case 
  	       	   | j = dst : UnetData[dst] 
		   | _ : CacheData[j] ;
  CacheWait[j] := case 
  	       	   | j = dst : None 
		   | _ : CacheWait[j] ;
  CacheInvmarked[j] := case 
  		        | j = dst : False 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = dst : Exclusive 
		    | _ : CacheState[j] 
}

transition ni_Inv1 (dst home)
requires { Home = home &&
           Invnet[dst] = Inv &&
 	   CacheWait[dst] = WGet }
{ 
  Home:= home;
  Invnet[j] := case 
  	       	| j = dst : InvAck 
		| _ : Invnet[j] ;
  CacheInvmarked[j] := case
			| j = dst : True 
			| _ : CacheInvmarked[j] ;
  CacheState[j] := case 
  		    | j = dst : Invalid 
		    | _ : CacheState[j] 
}

transition ni_Inv2 (dst home)
requires { Home = home &&
           Invnet[dst] = Inv &&
	   CacheWait[dst] <> WGet }
{ 
  Home:= home;
  Invnet[j] := case 
  	        | j = dst : InvAck 
		| _ : Invnet[j] ;
  CacheState[j] := case
	  	    | j = dst : Invalid 
		    | _ : CacheState[j] 
}

transition ni_InvAck1 (src home other)
requires { Home = home &&
           Pending = True && 
 	   Invnet[src] = InvAck && Real[src] = True &&
           Real[other] = False }
{ 
  Home:= home;
  Invnet[j] := case 
  	        | j = src : Empty_inv	
		| _ : Invnet[j] ;
  Real[j] := case
  	      | j = src : False 
	      | _ : Real[j] 
}

transition ni_InvAck2 (src home)
requires { Home = home &&
           Pending = True && 
 	   Invnet[src] = InvAck && Real[src] = True && 
	   Dirty = False &&
	   forall_other j. Real[j] = False }
{ 
  Home:= home; 
  Pending := False; 
  Local := False ;
  Invnet[j] := case 
  	        | j = src : Empty_inv 
		| _ : Invnet[j] ;
  Real[j] := case
  	      | j = src : False 
	      | _ : Real[j] 
}

transition ni_InvAck3 (src home)
requires { Home = home &&
           Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True && 
	   Dirty = True &&
	   forall_other j.  Real[j] = False }
{ 
  Home:= home; 
  Pending := False;
  Invnet[j] := case 
  	        | j = src : Empty_inv 
		| _ : Invnet[j] ;
  Real[j] := case
  	      | j = src : False 
	      | _ : Real[j] 
}

transition ni_WB ()
requires { WBnet_mtype = WB }
{ 
  Dirty := False; 
  Head_valid := False; 
  Memory := WBnet_data;
  WBnet_mtype := Empty_wb 
}


transition ni_FAck1 ()
requires { ShWBnet_mtype = FAck && Dirty = False }
{ 
  ShWBnet_mtype := Empty_shwb;	
  Pending := False 
}

transition ni_FAck2 ()
requires { ShWBnet_mtype = FAck && Dirty = True }
{ 
  ShWBnet_mtype := Empty_shwb; 
  Pending := False; 
  Head_pointer := ShWBnet_proc 
}

transition ni_ShWB ()
requires { ShWBnet_mtype = ShWB }
{ 
  ShWBnet_mtype := Empty_shwb; 
  Pending := False;
  Dirty := False; 
  Memory := ShWBnet_data;
  Shlist[j] := case
  	        | j = ShWBnet_proc : True 
		| _ : Shlist[j] ;
  Real[j] := case 
  	      | j = ShWBnet_proc : True 
	      | _ : Shlist[j] 
}

transition ni_Replace (src)
requires { RP[src] = True }
{ 
  Shlist[j] := case 
  	        | j = src : False 
		| _ : Shlist[j] ;
  Real[j] := case 
  	      | j = src : False 
	      | _ : Real[j] 
}
