type loc = L0 | L1 | L2 | Wait | L4 | L5 | Crit

array PC[proc] : loc
array Want[proc] : int
array Cpt[proc] : int
array Turn[proc] : proc

var N : int
var J : proc
var TMP : int


init (z) { PC[z] = L0 && Want[z] = 0 && Cpt[z] = 1 && 3 <= N }

unsafe (z1 z2) { PC[z1] = Crit && PC[z2] = Crit } 




transition for_enter (n)
requires { PC[n] = L0  && Cpt[n] <= N - 1 }
{
  PC[j] := case | j = n : L1 | _ : PC[j] }

transition for_exit (n)
requires { PC[n] = L0  && Cpt[n] = N }
{ 
  PC[j] := case | j = n : L5 | _ : PC[j];
  Cpt[j] := case | j = n : 1 | _ : Cpt[j]
 }



transition req (n)
requires { PC[n] = L1 }
{ 
  Want[j] := case | j = n : Cpt[n] | _ : Want[j];
  PC[j] := case | j = n : L2 | _ : PC[j] }


transition myturn (n)
requires { PC[n] = L2 && Cpt[n] = J }
{ 
  Turn[j] := case | j = J : n | _ : Turn[j];
  PC[j] := case | j = n : Wait | _ : PC[j] }


transition wait (n k)
requires { PC[n] = Wait && Cpt[n] = J && Turn[J] = n && Cpt[n] <= Want[k] }
{ PC[j] := case | j = n : Wait | _ : PC[j] }

transition stop_wait_1 (n)
requires { PC[n] = Wait && Cpt[n] = J && Turn[J] <> n }
{ PC[j] := case | j = n : L4 | _ : PC[j] }

transition stop_wait_2 (n)
requires { PC[n] = Wait && forall_other k. Want[k] < Cpt[n] }
{ PC[j] := case | j = n : L4 | _ : PC[j] }


transition incr (n)
requires { PC[n] = L4 && Cpt[n] = TMP }
{
  Cpt[j] := case | j = n : TMP + 1 | _ : Cpt[j];
  PC[j] := case | j = n : L0 | _ : PC[j]
}
 

transition enter (n)
requires { PC[n] = L5 }
{ PC[j] := case | j = n : Crit | _ : PC[j] }  

transition exit (n)
requires { PC[n] = Crit }
{ 
  Want[j] := case | j = n : 0 | _ : Want[j]; 
  PC[j] := case | j = n : L0 | _ : PC[j] 
}  
