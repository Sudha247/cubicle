type state = Invalid | Shared | Exclusive
type msg = Empty | Get | GetX | Nak | Put | PutX
type wait = None | WGet | WGetX
type inv = Empty_inv | Inv | InvAck
type wb_msg = Empty_wb | WB
type shwb_msg = Empty_shwb | ShWB | FAck
type data


var Home : proc
var Memory : data
var Pending : bool
var Local : bool
var Dirty : bool
var Head_valid : bool
var Head_pointer : proc

var Nakc :bool

var WBnet_mtype : wb_msg
var WBnet_data : data
var WBnet_proc : proc

var ShWBnet_mtype : shwb_msg
var ShWBnet_data : data
var ShWBnet_proc : proc

array CacheState[proc] : state
array CacheWait[proc] : wait
array CacheData[proc] : data
array CacheInvmarked[proc] : bool

var CacheState_home : state
var CacheWait_home : wait
var CacheData_home : data
var CacheInvmarked_home : bool

array UnetProc[proc] : proc
array UnetMtype[proc] : msg
array UnetData[proc] : data

var UnetProc_home : proc
var UnetMtype_home : msg
var UnetData_home : data

array Invnet[proc] : inv
array Shlist[proc] : bool
array RP[proc] : bool
array Real[proc] : bool

var Invnet_home : inv
var Shlist_home : bool
var RP_home : bool
var Real_home : bool

var CurrData : data
var PrevData : data
var Store_data : data

var Collecting : bool

init (p) {
     Home <> p &&

     Pending = False &&
     Local = False &&
     Dirty = False &&
     Head_valid = False &&

     Nakc = False &&

     WBnet_mtype = Empty_wb &&

     ShWBnet_mtype = Empty_shwb &&

     CacheState[p] = Invalid &&
     CacheWait[p] = None &&
     CacheInvmarked[p] = False &&

     CacheState_home = Invalid &&
     CacheWait_home = None &&
     CacheInvmarked_home = False &&

     UnetMtype[p] = Empty &&
     UnetMtype_home = Empty &&

     Invnet[p] = Empty_inv &&
     Shlist[p] = False &&
     Real[p] = False &&
     RP[p] = False &&

     Invnet_home = Empty_inv &&
     Shlist_home = False &&
     Real_home = False &&
     RP_home = False &&

     CurrData = Memory &&
     PrevData = Memory &&

     Collecting = False

}


(* invariant (z) { z = Home } *)



(* (\* Lemma 1 *\) *)
(* unsafe (i) { CacheState[i] = Exclusive && Dirty = False } *)
(* unsafe (i) { CacheState[i] = Exclusive && WBnet_mtype = WB } *)
(* unsafe (i) { CacheState[i] = Exclusive && ShWBnet_mtype = ShWB } *)
(* unsafe (i) { CacheState[i] = Exclusive && UnetMtype_home = Put } *)
(* unsafe (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX } *)


(* (\* Lemma 2 *\) *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = Get && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Pending = False } *)
(* unsafe (i) { UnetMtype[i] = GetX && UnetProc[i] <> Home && Local = True } *)


(* (\* Lemma 3 *\) *)
(* unsafe (i) { Invnet[i] = InvAck && Pending = False } *)
(* unsafe (i) { Invnet[i] = InvAck && Nakc = True } *)
(* unsafe (i) { Invnet[i] = InvAck && ShWBnet_mtype <> Empty_shwb } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = Get && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = GetX && UnetProc[j] <> Home } *)
(* unsafe (i j) { Invnet[i] = InvAck && UnetMtype[j] = PutX && UnetProc[j] <> Home } *)


(* invariant (j) { CacheState_home = Exclusive && UnetMtype[j] = PutX }  *)
(* invariant (i j) { CacheState[i] = Exclusive && UnetMtype[j] = PutX }  *)





candidate (z1) (*1*) { Real_home = True &&
              Real[z1] = False}

candidate (z1) (*2*) { RP_home = True &&
              Real[z1] = False}

candidate (z1) (*3*) { Shlist_home = True &&
              Real[z1] = False}

candidate (z1) (*4*) { Invnet_home <> Empty_inv &&
              Real[z1] = False}

candidate (z1) (*5*) { CacheInvmarked_home = True &&
              Real[z1] = False}

candidate (z1) (*6*) { Real_home = True &&
              Real[z1] = True}

candidate (z1) (*7*) { RP_home = True &&
              Real[z1] = True}

candidate (z1) (*8*) { Shlist_home = True &&
              Real[z1] = True}

candidate (z1) (*9*) { Invnet_home <> Empty_inv &&
              Real[z1] = True}

candidate (z1) (*10*) { CacheInvmarked_home = True &&
               Real[z1] = True}

candidate (z1) (*11*) { Real_home = True &&
               RP[z1] = False}

candidate (z1) (*12*) { RP_home = True &&
               RP[z1] = False}

candidate (z1) (*13*) { Shlist_home = True &&
               RP[z1] = False}

candidate (z1) (*14*) { Invnet_home <> Empty_inv &&
               RP[z1] = False}

candidate (z1) (*15*) { CacheInvmarked_home = True &&
               RP[z1] = False}

candidate (z1) (*16*) { Real_home = True &&
               RP[z1] = True}

candidate (z1) (*17*) { RP_home = True &&
               RP[z1] = True}

candidate (z1) (*18*) { Shlist_home = True &&
               RP[z1] = True}

candidate (z1) (*19*) { Invnet_home <> Empty_inv &&
               RP[z1] = True}

candidate (z1) (*20*) { CacheInvmarked_home = True &&
               RP[z1] = True}

candidate (z1) (*21*) { Real_home = True &&
               Shlist[z1] = False}

candidate (z1) (*22*) { RP_home = True &&
               Shlist[z1] = False}

candidate (z1) (*23*) { Shlist_home = True &&
               Shlist[z1] = False}

candidate (z1) (*24*) { Invnet_home <> Empty_inv &&
               Shlist[z1] = False}

candidate (z1) (*25*) { CacheInvmarked_home = True &&
               Shlist[z1] = False}

candidate (z1) (*26*) { Shlist[z1] = True &&
               Real[z1] = False}

candidate (z1) (*27*) { Real_home = True &&
               Shlist[z1] = True}

candidate (z1) (*28*) { RP_home = True &&
               Shlist[z1] = True}

candidate (z1) (*29*) { Shlist_home = True &&
               Shlist[z1] = True}

candidate (z1) (*30*) { Invnet_home <> Empty_inv &&
               Shlist[z1] = True}

candidate (z1) (*31*) { UnetMtype_home <> Empty &&
               UnetMtype_home <> Get &&
               UnetMtype_home <> GetX &&
               Shlist[z1] = True}

candidate (z1) (*32*) { CacheInvmarked_home = True &&
               Shlist[z1] = True}

candidate (z1) (*33*) { WBnet_mtype <> Empty_wb &&
               Shlist[z1] = True}

candidate (z1) (*34*) { Real_home = True &&
               Invnet[z1] = InvAck}

candidate (z1) (*35*) { RP_home = True &&
               Invnet[z1] = InvAck}

candidate (z1) (*36*) { Shlist_home = True &&
               Invnet[z1] = InvAck}

candidate (z1) (*37*) { Invnet_home <> Empty_inv &&
               Invnet[z1] = InvAck}

candidate (z1) (*38*) { CacheInvmarked_home = True &&
               Invnet[z1] = InvAck}

candidate (z1) (*39*) { Real_home = True &&
               Invnet[z1] = Inv}

candidate (z1) (*40*) { RP_home = True &&
               Invnet[z1] = Inv}

candidate (z1) (*41*) { Shlist_home = True &&
               Invnet[z1] = Inv}

candidate (z1) (*42*) { Invnet_home <> Empty_inv &&
               Invnet[z1] = Inv}

candidate (z1) (*43*) { CacheInvmarked_home = True &&
               Invnet[z1] = Inv}

candidate (z1) (*44*) { Real_home = True &&
               Invnet[z1] = Empty_inv}

candidate (z1) (*45*) { RP_home = True &&
               Invnet[z1] = Empty_inv}

candidate (z1) (*46*) { Shlist_home = True &&
               Invnet[z1] = Empty_inv}

candidate (z1) (*47*) { Invnet_home <> Empty_inv &&
               Invnet[z1] = Empty_inv}

candidate (z1) (*48*) { CacheInvmarked_home = True &&
               Invnet[z1] = Empty_inv}

candidate (z1 z2) (*49*) { UnetMtype[z2] = PutX &&
               Shlist[z1] = True}

candidate (z1) (*50*) { UnetMtype[z1] = Put &&
               RP[z1] = True}

candidate (z1 z2) (*51*) { UnetMtype[z1] = PutX &&
               Shlist[z2] = True}

candidate (z1) (*52*) { UnetMtype[z1] = PutX &&
               Shlist[z1] = True}

candidate (z1 z2) (*53*) { UnetMtype[z1] = PutX &&
               UnetMtype[z2] = PutX}

candidate (z1) (*54*) { CacheInvmarked[z1] = True &&
               UnetMtype[z1] = PutX}

candidate (z1) (*55*) { CacheWait[z1] <> WGetX &&
               UnetMtype[z1] = PutX}

candidate (z1) (*56*) { CacheState[z1] <> Invalid &&
               UnetMtype[z1] = PutX}

candidate (z1) (*57*) { Real_home = True &&
               UnetMtype[z1] = PutX}

candidate (z1) (*58*) { RP_home = True &&
               UnetMtype[z1] = PutX}

candidate (z1) (*59*) { Shlist_home = True &&
               UnetMtype[z1] = PutX}

candidate (z1) (*60*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = PutX}

candidate (z1) (*61*) { UnetMtype_home <> Empty &&
               UnetMtype_home <> Get &&
               UnetMtype_home <> GetX &&
               UnetMtype[z1] = PutX}

candidate (z1) (*62*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = PutX}

candidate (z1) (*63*) { WBnet_mtype <> Empty_wb &&
               UnetMtype[z1] = PutX}

candidate (z1) (*64*) { CacheWait[z1] <> WGet &&
               UnetMtype[z1] = Put}

candidate (z1) (*65*) { CacheState[z1] <> Invalid &&
               UnetMtype[z1] = Put}

candidate (z1) (*66*) { Real_home = True &&
               UnetMtype[z1] = Put}

candidate (z1) (*67*) { RP_home = True &&
               UnetMtype[z1] = Put}

candidate (z1) (*68*) { Shlist_home = True &&
               UnetMtype[z1] = Put}

candidate (z1) (*69*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = Put}

candidate (z1) (*70*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = Put}

candidate (z1) (*71*) { CacheWait[z1] = None &&
               UnetMtype[z1] = Nak}

candidate (z1) (*72*) { CacheState[z1] <> Invalid &&
               UnetMtype[z1] = Nak}

candidate (z1) (*73*) { Real_home = True &&
               UnetMtype[z1] = Nak}

candidate (z1) (*74*) { RP_home = True &&
               UnetMtype[z1] = Nak}

candidate (z1) (*75*) { Shlist_home = True &&
               UnetMtype[z1] = Nak}

candidate (z1) (*76*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = Nak}

candidate (z1) (*77*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = Nak}

candidate (z1) (*78*) { CacheInvmarked[z1] = True &&
               UnetMtype[z1] = GetX}

candidate (z1) (*79*) { CacheWait[z1] <> WGetX &&
               UnetMtype[z1] = GetX}

candidate (z1) (*80*) { CacheState[z1] <> Invalid &&
               UnetMtype[z1] = GetX}

candidate (z1) (*81*) { Real_home = True &&
               UnetMtype[z1] = GetX}

candidate (z1) (*82*) { RP_home = True &&
               UnetMtype[z1] = GetX}

candidate (z1) (*83*) { Shlist_home = True &&
               UnetMtype[z1] = GetX}

candidate (z1) (*84*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = GetX}

candidate (z1) (*85*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = GetX}

candidate (z1) (*86*) { CacheWait[z1] <> WGet &&
               UnetMtype[z1] = Get}

candidate (z1) (*87*) { CacheState[z1] <> Invalid &&
               UnetMtype[z1] = Get}

candidate (z1) (*88*) { Real_home = True &&
               UnetMtype[z1] = Get}

candidate (z1) (*89*) { RP_home = True &&
               UnetMtype[z1] = Get}

candidate (z1) (*90*) { Shlist_home = True &&
               UnetMtype[z1] = Get}

candidate (z1) (*91*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = Get}

candidate (z1) (*92*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = Get}

candidate (z1) (*93*) { CacheInvmarked[z1] = True &&
               UnetMtype[z1] = Empty}

candidate (z1) (*94*) { CacheWait[z1] <> None &&
               UnetMtype[z1] = Empty}

candidate (z1) (*95*) { Real_home = True &&
               UnetMtype[z1] = Empty}

candidate (z1) (*96*) { RP_home = True &&
               UnetMtype[z1] = Empty}

candidate (z1) (*97*) { Shlist_home = True &&
               UnetMtype[z1] = Empty}

candidate (z1) (*98*) { Invnet_home <> Empty_inv &&
               UnetMtype[z1] = Empty}

candidate (z1) (*99*) { CacheInvmarked_home = True &&
               UnetMtype[z1] = Empty}

candidate (z1) (*100*) { Real_home = True &&
                CacheInvmarked[z1] = False}

candidate (z1) (*101*) { RP_home = True &&
                CacheInvmarked[z1] = False}

candidate (z1) (*102*) { Shlist_home = True &&
                CacheInvmarked[z1] = False}

candidate (z1) (*103*) { Invnet_home <> Empty_inv &&
                CacheInvmarked[z1] = False}

candidate (z1) (*104*) { CacheInvmarked_home = True &&
                CacheInvmarked[z1] = False}

candidate (z1) (*105*) { CacheInvmarked[z1] = True &&
                UnetMtype[z1] <> Get &&
                UnetMtype[z1] <> Nak &&
                UnetMtype[z1] <> Put}

candidate (z1) (*106*) { CacheWait[z1] <> WGet &&
                CacheInvmarked[z1] = True}

candidate (z1) (*107*) { CacheState[z1] <> Invalid &&
                CacheInvmarked[z1] = True}

candidate (z1) (*108*) { Real_home = True &&
                CacheInvmarked[z1] = True}

candidate (z1) (*109*) { RP_home = True &&
                CacheInvmarked[z1] = True}

candidate (z1) (*110*) { Shlist_home = True &&
                CacheInvmarked[z1] = True}

candidate (z1) (*111*) { Invnet_home <> Empty_inv &&
                CacheInvmarked[z1] = True}

candidate (z1) (*112*) { CacheInvmarked_home = True &&
                CacheInvmarked[z1] = True}

candidate (z1) (*113*) { CacheWait[z1] = WGetX &&
                UnetMtype[z1] <> GetX &&
                UnetMtype[z1] <> Nak &&
                UnetMtype[z1] <> PutX}

candidate (z1) (*114*) { CacheWait[z1] = WGetX &&
                CacheInvmarked[z1] = True}

candidate (z1) (*115*) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGetX}

candidate (z1) (*116*) { Real_home = True &&
                CacheWait[z1] = WGetX}

candidate (z1) (*117*) { RP_home = True &&
                CacheWait[z1] = WGetX}

candidate (z1) (*118*) { Shlist_home = True &&
                CacheWait[z1] = WGetX}

candidate (z1) (*119*) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = WGetX}

candidate (z1) (*120*) { CacheInvmarked_home = True &&
                CacheWait[z1] = WGetX}

candidate (z1) (*121*) { CacheWait[z1] = WGet &&
                UnetMtype[z1] <> Get &&
                UnetMtype[z1] <> Nak &&
                UnetMtype[z1] <> Put}

candidate (z1) (*122*) { CacheState[z1] <> Invalid &&
                CacheWait[z1] = WGet}

candidate (z1) (*123*) { Real_home = True &&
                CacheWait[z1] = WGet}

candidate (z1) (*124*) { RP_home = True &&
                CacheWait[z1] = WGet}

candidate (z1) (*125*) { Shlist_home = True &&
                CacheWait[z1] = WGet}

candidate (z1) (*126*) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = WGet}

candidate (z1) (*127*) { CacheInvmarked_home = True &&
                CacheWait[z1] = WGet}

candidate (z1) (*128*) { CacheWait[z1] = None &&
                UnetMtype[z1] <> Empty}

candidate (z1) (*129*) { CacheWait[z1] = None &&
                CacheInvmarked[z1] = True}

candidate (z1) (*130*) { Real_home = True &&
                CacheWait[z1] = None}

candidate (z1) (*131*) { RP_home = True &&
                CacheWait[z1] = None}

candidate (z1) (*132*) { Shlist_home = True &&
                CacheWait[z1] = None}

candidate (z1) (*133*) { Invnet_home <> Empty_inv &&
                CacheWait[z1] = None}

candidate (z1) (*134*) { CacheInvmarked_home = True &&
                CacheWait[z1] = None}

candidate (z1 z2) (*135*) { CacheState[z2] = Exclusive &&
                Shlist[z1] = True}

candidate (z1 z2) (*136*) { CacheState[z2] = Exclusive &&
                UnetMtype[z1] = PutX}

candidate (z1 z2) (*137*) { CacheState[z1] = Exclusive &&
                Shlist[z2] = True}

candidate (z1) (*138*) { CacheState[z1] = Exclusive &&
                Shlist[z1] = True}

candidate (z1 z2) (*139*) { CacheState[z1] = Exclusive &&
                UnetMtype[z2] = PutX}

candidate (z1) (*140*) { CacheState[z1] = Exclusive &&
                UnetMtype[z1] <> Empty}

candidate (z1) (*141*) { CacheState[z1] = Exclusive &&
                CacheInvmarked[z1] = True}

candidate (z1) (*142*) { CacheState[z1] = Exclusive &&
                CacheWait[z1] <> None}

candidate (z1 z2) (*143*) { CacheState[z1] = Exclusive &&
                CacheState[z2] = Exclusive}

candidate (z1) (*144*) { Real_home = True &&
                CacheState[z1] = Exclusive}

candidate (z1) (*145*) { RP_home = True &&
                CacheState[z1] = Exclusive}

candidate (z1) (*146*) { Shlist_home = True &&
                CacheState[z1] = Exclusive}

candidate (z1) (*147*) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Exclusive}

candidate (z1) (*148*) { UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX &&
                CacheState[z1] = Exclusive}

candidate (z1) (*149*) { CacheInvmarked_home = True &&
                CacheState[z1] = Exclusive}

candidate (z1) (*150*) { WBnet_mtype <> Empty_wb &&
                CacheState[z1] = Exclusive}

candidate (z1) (*151*) { CacheState[z1] = Shared &&
                UnetMtype[z1] <> Empty}

candidate (z1) (*152*) { CacheState[z1] = Shared &&
                CacheInvmarked[z1] = True}

candidate (z1) (*153*) { CacheState[z1] = Shared &&
                CacheWait[z1] <> None}

candidate (z1) (*154*) { Real_home = True &&
                CacheState[z1] = Shared}

candidate (z1) (*155*) { RP_home = True &&
                CacheState[z1] = Shared}

candidate (z1) (*156*) { Shlist_home = True &&
                CacheState[z1] = Shared}

candidate (z1) (*157*) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Shared}

candidate (z1) (*158*) { CacheInvmarked_home = True &&
                CacheState[z1] = Shared}

candidate (z1) (*159*) { Real_home = True &&
                CacheState[z1] = Invalid}

candidate (z1) (*160*) { RP_home = True &&
                CacheState[z1] = Invalid}

candidate (z1) (*161*) { Shlist_home = True &&
                CacheState[z1] = Invalid}

candidate (z1) (*162*) { Invnet_home <> Empty_inv &&
                CacheState[z1] = Invalid}

candidate (z1) (*163*) { CacheInvmarked_home = True &&
                CacheState[z1] = Invalid}

candidate (z1) (*164*) { RP_home = True &&
                Real_home = False}

candidate (z1) (*165*) { Shlist_home = True &&
                Real_home = False}

candidate (z1) (*166*) { Invnet_home <> Empty_inv &&
                Real_home = False}

candidate (z1) (*167*) { CacheInvmarked_home = True &&
                Real_home = False}

candidate (z1) (*168*) { RP_home = False &&
                Real_home = True}

candidate (z1) (*169*) { Shlist_home = True &&
                RP_home = False}

candidate (z1) (*170*) { Invnet_home <> Empty_inv &&
                RP_home = False}

candidate (z1) (*171*) { CacheInvmarked_home = True &&
                RP_home = False}

candidate (z1) (*172*) { Shlist_home = False &&
                Real_home = True}

candidate (z1) (*173*) { Shlist_home = False &&
                RP_home = True}

candidate (z1) (*174*) { Invnet_home <> Empty_inv &&
                Shlist_home = False}

candidate (z1) (*175*) { CacheInvmarked_home = True &&
                Shlist_home = False}

candidate (z1) (*176*) { Invnet_home = Empty_inv &&
                Real_home = True}

candidate (z1) (*177*) { Invnet_home = Empty_inv &&
                RP_home = True}

candidate (z1) (*178*) { Invnet_home = Empty_inv &&
                Shlist_home = True}

candidate (z1) (*179*) { CacheInvmarked_home = True &&
                Invnet_home = Empty_inv}

candidate (z1) (*180*) { UnetMtype_home = PutX &&
                Shlist[z1] = True}

candidate (z1) (*181*) { UnetMtype_home = PutX &&
                UnetMtype[z1] = PutX}

candidate (z1) (*182*) { UnetMtype_home = PutX &&
                CacheState[z1] = Exclusive}

candidate (z1) (*183*) { UnetMtype_home = PutX &&
                Real_home = True}

candidate (z1) (*184*) { UnetMtype_home = PutX &&
                RP_home = True}

candidate (z1) (*185*) { UnetMtype_home = PutX &&
                Shlist_home = True}

candidate (z1) (*186*) { UnetMtype_home = PutX &&
                Invnet_home <> Empty_inv}

candidate (z1) (*187*) { CacheInvmarked_home = True &&
                UnetMtype_home = PutX}

candidate (z1) (*188*) { CacheWait_home <> WGetX &&
                UnetMtype_home = PutX}

candidate (z1) (*189*) { CacheState_home = Exclusive &&
                UnetMtype_home = PutX}

candidate (z1) (*190*) { ShWBnet_mtype = ShWB &&
                UnetMtype_home = PutX}

candidate (z1) (*191*) { WBnet_mtype <> Empty_wb &&
                UnetMtype_home = PutX}

candidate (z1) (*192*) { Head_valid = False &&
                UnetMtype_home = PutX}

candidate (z1) (*193*) { Dirty = False &&
                UnetMtype_home = PutX}

candidate (z1) (*194*) { Local = True &&
                UnetMtype_home = PutX}

candidate (z1) (*195*) { UnetMtype_home = Put &&
                Shlist[z1] = True}

candidate (z1) (*196*) { UnetMtype_home = Put &&
                UnetMtype[z1] = PutX}

candidate (z1) (*197*) { UnetMtype_home = Put &&
                CacheState[z1] = Exclusive}

candidate (z1) (*198*) { UnetMtype_home = Put &&
                Real_home = True}

candidate (z1) (*199*) { UnetMtype_home = Put &&
                RP_home = True}

candidate (z1) (*200*) { UnetMtype_home = Put &&
                Shlist_home = True}

candidate (z1) (*201*) { UnetMtype_home = Put &&
                Invnet_home <> Empty_inv}

candidate (z1) (*202*) { CacheInvmarked_home = True &&
                UnetMtype_home = Put}

candidate (z1) (*203*) { CacheWait_home <> WGet &&
                UnetMtype_home = Put}

candidate (z1) (*204*) { CacheState_home <> Invalid &&
                UnetMtype_home = Put}

candidate (z1) (*205*) { ShWBnet_mtype = ShWB &&
                UnetMtype_home = Put}

candidate (z1) (*206*) { WBnet_mtype <> Empty_wb &&
                UnetMtype_home = Put}

candidate (z1) (*207*) { Head_valid = False &&
                UnetMtype_home = Put}

candidate (z1) (*208*) { Dirty = False &&
                UnetMtype_home = Put}

candidate (z1) (*209*) { Local = True &&
                UnetMtype_home = Put}

candidate (z1) (*210*) { UnetMtype_home = GetX &&
                Real_home = True}

candidate (z1) (*211*) { UnetMtype_home = GetX &&
                RP_home = True}

candidate (z1) (*212*) { UnetMtype_home = GetX &&
                Shlist_home = True}

candidate (z1) (*213*) { UnetMtype_home = GetX &&
                Invnet_home <> Empty_inv}

candidate (z1) (*214*) { CacheInvmarked_home = True &&
                UnetMtype_home = GetX}

candidate (z1) (*215*) { CacheWait_home <> WGetX &&
                UnetMtype_home = GetX}

candidate (z1) (*216*) { CacheState_home = Exclusive &&
                UnetMtype_home = GetX}

candidate (z1) (*217*) { Local = True &&
                UnetMtype_home = GetX}

candidate (z1) (*218*) { UnetMtype_home = Get &&
                Real_home = True}

candidate (z1) (*219*) { UnetMtype_home = Get &&
                RP_home = True}

candidate (z1) (*220*) { UnetMtype_home = Get &&
                Shlist_home = True}

candidate (z1) (*221*) { UnetMtype_home = Get &&
                Invnet_home <> Empty_inv}

candidate (z1) (*222*) { CacheInvmarked_home = True &&
                UnetMtype_home = Get}

candidate (z1) (*223*) { CacheWait_home <> WGet &&
                UnetMtype_home = Get}

candidate (z1) (*224*) { CacheState_home <> Invalid &&
                UnetMtype_home = Get}

candidate (z1) (*225*) { Local = True &&
                UnetMtype_home = Get}

candidate (z1) (*226*) { UnetMtype_home = Empty &&
                Real_home = True}

candidate (z1) (*227*) { UnetMtype_home = Empty &&
                RP_home = True}

candidate (z1) (*228*) { UnetMtype_home = Empty &&
                Shlist_home = True}

candidate (z1) (*229*) { UnetMtype_home = Empty &&
                Invnet_home <> Empty_inv}

candidate (z1) (*230*) { CacheInvmarked_home = True &&
                UnetMtype_home = Empty}

candidate (z1) (*231*) { CacheWait_home <> None &&
                UnetMtype_home = Empty}

candidate (z1) (*232*) { CacheInvmarked_home = False &&
                Real_home = True}

candidate (z1) (*233*) { CacheInvmarked_home = False &&
                RP_home = True}

candidate (z1) (*234*) { CacheInvmarked_home = False &&
                Shlist_home = True}

candidate (z1) (*235*) { CacheInvmarked_home = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*236*) { CacheWait_home = WGetX &&
                Real_home = True}

candidate (z1) (*237*) { CacheWait_home = WGetX &&
                RP_home = True}

candidate (z1) (*238*) { CacheWait_home = WGetX &&
                Shlist_home = True}

candidate (z1) (*239*) { CacheWait_home = WGetX &&
                Invnet_home <> Empty_inv}

candidate (z1) (*240*) { CacheWait_home = WGetX &&
                UnetMtype_home <> GetX &&
                UnetMtype_home <> PutX}

candidate (z1) (*241*) { CacheWait_home = WGetX &&
                CacheInvmarked_home = True}

candidate (z1) (*242*) { CacheState_home = Exclusive &&
                CacheWait_home = WGetX}

candidate (z1) (*243*) { Local = True &&
                CacheWait_home = WGetX}

candidate (z1) (*244*) { CacheWait_home = WGet &&
                Real_home = True}

candidate (z1) (*245*) { CacheWait_home = WGet &&
                RP_home = True}

candidate (z1) (*246*) { CacheWait_home = WGet &&
                Shlist_home = True}

candidate (z1) (*247*) { CacheWait_home = WGet &&
                Invnet_home <> Empty_inv}

candidate (z1) (*248*) { CacheWait_home = WGet &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> Put}

candidate (z1) (*249*) { CacheWait_home = WGet &&
                CacheInvmarked_home = True}

candidate (z1) (*250*) { CacheState_home <> Invalid &&
                CacheWait_home = WGet}

candidate (z1) (*251*) { Local = True &&
                CacheWait_home = WGet}

candidate (z1) (*252*) { CacheWait_home = None &&
                Real_home = True}

candidate (z1) (*253*) { CacheWait_home = None &&
                RP_home = True}

candidate (z1) (*254*) { CacheWait_home = None &&
                Shlist_home = True}

candidate (z1) (*255*) { CacheWait_home = None &&
                Invnet_home <> Empty_inv}

candidate (z1) (*256*) { CacheWait_home = None &&
                UnetMtype_home <> Empty}

candidate (z1) (*257*) { CacheWait_home = None &&
                CacheInvmarked_home = True}

candidate (z1) (*258*) { CacheState_home = Exclusive &&
                Shlist[z1] = True}

candidate (z1) (*259*) { CacheState_home = Exclusive &&
                UnetMtype[z1] = PutX}

candidate (z1) (*260*) { CacheState_home = Exclusive &&
                CacheState[z1] = Exclusive}

candidate (z1) (*261*) { CacheState_home = Exclusive &&
                Real_home = True}

candidate (z1) (*262*) { CacheState_home = Exclusive &&
                RP_home = True}

candidate (z1) (*263*) { CacheState_home = Exclusive &&
                Shlist_home = True}

candidate (z1) (*264*) { CacheState_home = Exclusive &&
                Invnet_home <> Empty_inv}

candidate (z1) (*265*) { CacheState_home = Exclusive &&
                UnetMtype_home <> Empty}

candidate (z1) (*266*) { CacheState_home = Exclusive &&
                CacheInvmarked_home = True}

candidate (z1) (*267*) { CacheState_home = Exclusive &&
                CacheWait_home <> None}

candidate (z1) (*268*) { WBnet_mtype <> Empty_wb &&
                CacheState_home = Exclusive}

candidate (z1) (*269*) { CacheState_home = Shared &&
                Real_home = True}

candidate (z1) (*270*) { CacheState_home = Shared &&
                RP_home = True}

candidate (z1) (*271*) { CacheState_home = Shared &&
                Shlist_home = True}

candidate (z1) (*272*) { CacheState_home = Shared &&
                Invnet_home <> Empty_inv}

candidate (z1) (*273*) { CacheState_home = Shared &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> GetX &&
                UnetMtype_home <> PutX}

candidate (z1) (*274*) { CacheState_home = Shared &&
                CacheInvmarked_home = True}

candidate (z1) (*275*) { CacheState_home = Shared &&
                CacheWait_home = WGet}

candidate (z1) (*276*) { CacheState_home = Invalid &&
                Real_home = True}

candidate (z1) (*277*) { CacheState_home = Invalid &&
                RP_home = True}

candidate (z1) (*278*) { CacheState_home = Invalid &&
                Shlist_home = True}

candidate (z1) (*279*) { CacheState_home = Invalid &&
                Invnet_home <> Empty_inv}

candidate (z1) (*280*) { CacheState_home = Invalid &&
                CacheInvmarked_home = True}

candidate (z1) (*281*) { ShWBnet_mtype = FAck &&
                Real_home = True}

candidate (z1) (*282*) { ShWBnet_mtype = FAck &&
                RP_home = True}

candidate (z1) (*283*) { ShWBnet_mtype = FAck &&
                Shlist_home = True}

candidate (z1) (*284*) { ShWBnet_mtype = FAck &&
                Invnet_home <> Empty_inv}

candidate (z1) (*285*) { ShWBnet_mtype = FAck &&
                CacheInvmarked_home = True}

candidate (z1) (*286*) { ShWBnet_mtype = ShWB &&
                Shlist[z1] = True}

candidate (z1) (*287*) { ShWBnet_mtype = ShWB &&
                UnetMtype[z1] = PutX}

candidate (z1) (*288*) { ShWBnet_mtype = ShWB &&
                CacheState[z1] = Exclusive}

candidate (z1) (*289*) { ShWBnet_mtype = ShWB &&
                Real_home = True}

candidate (z1) (*290*) { ShWBnet_mtype = ShWB &&
                RP_home = True}

candidate (z1) (*291*) { ShWBnet_mtype = ShWB &&
                Shlist_home = True}

candidate (z1) (*292*) { ShWBnet_mtype = ShWB &&
                Invnet_home <> Empty_inv}

candidate (z1) (*293*) { ShWBnet_mtype = ShWB &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX}

candidate (z1) (*294*) { ShWBnet_mtype = ShWB &&
                CacheInvmarked_home = True}

candidate (z1) (*295*) { ShWBnet_mtype = ShWB &&
                CacheState_home = Exclusive}

candidate (z1) (*296*) { WBnet_mtype <> Empty_wb &&
                ShWBnet_mtype = ShWB}

candidate (z1) (*297*) { ShWBnet_mtype = Empty_shwb &&
                Real_home = True}

candidate (z1) (*298*) { ShWBnet_mtype = Empty_shwb &&
                RP_home = True}

candidate (z1) (*299*) { ShWBnet_mtype = Empty_shwb &&
                Shlist_home = True}

candidate (z1) (*300*) { ShWBnet_mtype = Empty_shwb &&
                Invnet_home <> Empty_inv}

candidate (z1) (*301*) { ShWBnet_mtype = Empty_shwb &&
                CacheInvmarked_home = True}

candidate (z1) (*302*) { WBnet_mtype = WB &&
                Shlist[z1] = True}

candidate (z1) (*303*) { WBnet_mtype = WB &&
                UnetMtype[z1] = PutX}

candidate (z1) (*304*) { WBnet_mtype = WB &&
                CacheState[z1] = Exclusive}

candidate (z1) (*305*) { WBnet_mtype = WB &&
                Real_home = True}

candidate (z1) (*306*) { WBnet_mtype = WB &&
                RP_home = True}

candidate (z1) (*307*) { WBnet_mtype = WB &&
                Shlist_home = True}

candidate (z1) (*308*) { WBnet_mtype = WB &&
                Invnet_home <> Empty_inv}

candidate (z1) (*309*) { WBnet_mtype = WB &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX}

candidate (z1) (*310*) { WBnet_mtype = WB &&
                CacheInvmarked_home = True}

candidate (z1) (*311*) { WBnet_mtype = WB &&
                CacheState_home = Exclusive}

candidate (z1) (*312*) { WBnet_mtype = WB &&
                ShWBnet_mtype = ShWB}

candidate (z1) (*313*) { Head_valid = False &&
                WBnet_mtype = WB}

candidate (z1) (*314*) { Dirty = False &&
                WBnet_mtype = WB}

candidate (z1) (*315*) { Local = True &&
                WBnet_mtype = WB}

candidate (z1) (*316*) { WBnet_mtype = Empty_wb &&
                Real_home = True}

candidate (z1) (*317*) { WBnet_mtype = Empty_wb &&
                RP_home = True}

candidate (z1) (*318*) { WBnet_mtype = Empty_wb &&
                Shlist_home = True}

candidate (z1) (*319*) { WBnet_mtype = Empty_wb &&
                Invnet_home <> Empty_inv}

candidate (z1) (*320*) { WBnet_mtype = Empty_wb &&
                CacheInvmarked_home = True}

candidate (z1) (*321*) { Nakc = False &&
                Real_home = True}

candidate (z1) (*322*) { Nakc = False &&
                RP_home = True}

candidate (z1) (*323*) { Nakc = False &&
                Shlist_home = True}

candidate (z1) (*324*) { Nakc = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*325*) { Nakc = False &&
                CacheInvmarked_home = True}

candidate (z1) (*326*) { Nakc = True &&
                Real_home = True}

candidate (z1) (*327*) { Nakc = True &&
                RP_home = True}

candidate (z1) (*328*) { Nakc = True &&
                Shlist_home = True}

candidate (z1) (*329*) { Nakc = True &&
                Invnet_home <> Empty_inv}

candidate (z1) (*330*) { Nakc = True &&
                CacheInvmarked_home = True}

candidate (z1) (*331*) { Head_valid = False &&
                Shlist[z1] = True}

candidate (z1) (*332*) { Head_valid = False &&
                UnetMtype[z1] = PutX}

candidate (z1) (*333*) { Head_valid = False &&
                CacheState[z1] = Exclusive}

candidate (z1) (*334*) { Head_valid = False &&
                Real_home = True}

candidate (z1) (*335*) { Head_valid = False &&
                RP_home = True}

candidate (z1) (*336*) { Head_valid = False &&
                Shlist_home = True}

candidate (z1) (*337*) { Head_valid = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*338*) { Head_valid = False &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX}

candidate (z1) (*339*) { Head_valid = False &&
                CacheInvmarked_home = True}

candidate (z1) (*340*) { Head_valid = False &&
                ShWBnet_mtype = ShWB}

candidate (z1) (*341*) { Head_valid = False &&
                WBnet_mtype <> Empty_wb}

candidate (z1) (*342*) { Head_valid = True &&
                Real_home = True}

candidate (z1) (*343*) { Head_valid = True &&
                RP_home = True}

candidate (z1) (*344*) { Head_valid = True &&
                Shlist_home = True}

candidate (z1) (*345*) { Head_valid = True &&
                Invnet_home <> Empty_inv}

candidate (z1) (*346*) { Head_valid = True &&
                CacheInvmarked_home = True}

candidate (z1) (*347*) { Head_valid = True &&
                CacheState_home = Exclusive}

candidate (z1) (*348*) { Dirty = False &&
                UnetMtype[z1] = PutX}

candidate (z1) (*349*) { Dirty = False &&
                CacheState[z1] = Exclusive}

candidate (z1) (*350*) { Dirty = False &&
                Real_home = True}

candidate (z1) (*351*) { Dirty = False &&
                RP_home = True}

candidate (z1) (*352*) { Dirty = False &&
                Shlist_home = True}

candidate (z1) (*353*) { Dirty = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*354*) { Dirty = False &&
                UnetMtype_home <> Empty &&
                UnetMtype_home <> Get &&
                UnetMtype_home <> GetX}

candidate (z1) (*355*) { Dirty = False &&
                CacheInvmarked_home = True}

candidate (z1) (*356*) { Dirty = False &&
                CacheState_home = Exclusive}

candidate (z1) (*357*) { Dirty = False &&
                ShWBnet_mtype = ShWB}

candidate (z1) (*358*) { Dirty = False &&
                WBnet_mtype <> Empty_wb}

candidate (z1) (*359*) { Dirty = True &&
                Shlist[z1] = True}

candidate (z1) (*360*) { Dirty = True &&
                Real_home = True}

candidate (z1) (*361*) { Dirty = True &&
                RP_home = True}

candidate (z1) (*362*) { Dirty = True &&
                Shlist_home = True}

candidate (z1) (*363*) { Dirty = True &&
                Invnet_home <> Empty_inv}

candidate (z1) (*364*) { Dirty = True &&
                CacheInvmarked_home = True}

candidate (z1) (*365*) { Local = False &&
                Real_home = True}

candidate (z1) (*366*) { Local = False &&
                RP_home = True}

candidate (z1) (*367*) { Local = False &&
                Shlist_home = True}

candidate (z1) (*368*) { Local = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*369*) { Local = False &&
                CacheInvmarked_home = True}

candidate (z1) (*370*) { Local = False &&
                CacheState_home = Exclusive}

candidate (z1) (*371*) { Local = True &&
                UnetMtype[z1] = PutX}

candidate (z1) (*372*) { Local = True &&
                CacheState[z1] = Exclusive}

candidate (z1) (*373*) { Local = True &&
                Real_home = True}

candidate (z1) (*374*) { Local = True &&
                RP_home = True}

candidate (z1) (*375*) { Local = True &&
                Shlist_home = True}

candidate (z1) (*376*) { Local = True &&
                Invnet_home <> Empty_inv}

candidate (z1) (*377*) { Local = True &&
                UnetMtype_home <> Empty}

candidate (z1) (*378*) { Local = True &&
                CacheInvmarked_home = True}

candidate (z1) (*379*) { Local = True &&
                CacheWait_home <> None}

candidate (z1) (*380*) { Local = True &&
                ShWBnet_mtype = ShWB}

candidate (z1) (*381*) { Local = True &&
                WBnet_mtype <> Empty_wb}

candidate (z1) (*382*) { Pending = False &&
                Real_home = True}

candidate (z1) (*383*) { Pending = False &&
                RP_home = True}

candidate (z1) (*384*) { Pending = False &&
                Shlist_home = True}

candidate (z1) (*385*) { Pending = False &&
                Invnet_home <> Empty_inv}

candidate (z1) (*386*) { Pending = False &&
                CacheInvmarked_home = True}

candidate (z1) (*387*) { Pending = True &&
                Shlist[z1] = True}

candidate (z1) (*388*) { Pending = True &&
                Real_home = True}

candidate (z1) (*389*) { Pending = True &&
                RP_home = True}

candidate (z1) (*390*) { Pending = True &&
                Shlist_home = True}

candidate (z1) (*391*) { Pending = True &&
                Invnet_home <> Empty_inv}

candidate (z1) (*392*) { Pending = True &&
                CacheInvmarked_home = True }





(* Control *)
unsafe (p) { CacheState_home = Exclusive && CacheState[p] = Exclusive }
unsafe (i j) { CacheState[i] = Exclusive && CacheState[j] = Exclusive }


(* Data *)
unsafe () { Dirty = False && Memory <> CurrData }

unsafe ()  { CacheState_home = Exclusive && CacheData_home <> CurrData }
unsafe (p) { CacheState[p] = Exclusive && CacheData[p] <> CurrData }

unsafe ()  { CacheState_home = Shared && Collecting = True &&
             CacheData_home <> PrevData }
unsafe (p) { CacheState[p] = Shared && Collecting = True &&
             CacheData[p] <> PrevData }

unsafe ()  { CacheState_home = Shared && Collecting = False &&
             CacheData_home <> CurrData }
unsafe (p) { CacheState[p] = Shared && Collecting = False &&
             CacheData[p] <> CurrData }



transition pi_Local_Get_Dirty ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = True }
{ 
  Pending := True;
  CacheWait_home := WGet;
  UnetProc_home := Head_pointer;
  UnetMtype_home := Get;
  Collecting := False;
}

transition pi_Local_Get_Other1 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = True }
{ 
  Local := True;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Invalid 
}

transition pi_Local_Get_Other2 ()
requires { CacheState_home = Invalid && CacheWait_home = None && 
	  Pending = False && Dirty = False && CacheInvmarked_home = False }
{ 	 
  Local := True;
  CacheWait_home := None;
  CacheData_home := Memory;
  CacheState_home := Shared 
}




transition pi_Remote_Get (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGet | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] 
}



transition pi_Local_GetX_Dirty ()
requires { CacheState_home <> Exclusive && CacheWait_home = None &&
	  Pending = False && Dirty = True }
{ 
  Pending := True;
  CacheWait_home := WGetX;
  UnetProc_home := Head_pointer;
  UnetMtype_home := GetX;
  Collecting := False;  
}

transition pi_Local_GetX_Other ()
requires { Head_valid = False &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 CacheData_home := Memory;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive }

transition pi_Local_GetX_Other_head ()
requires { Head_valid = True &&
	  CacheState_home <> Exclusive && CacheWait_home = None && 
	  Pending = False && Dirty = False }
{ Local := True; Dirty := True;
	 Pending := True;
	 Head_valid := False;
	 CacheData_home := Memory;
	 PrevData := CurrData;
	 CacheWait_home := None;
	 CacheInvmarked_home := False;
	 CacheState_home := Exclusive;
	 Shlist_home := False;
	 Invnet_home := Empty_inv;
	 Real_home := False ;
	 Shlist[j] := case | _ : False ;
	 Invnet[j] := case 
                       | j = Head_pointer : Inv
		       | Shlist[j] = True : Inv
		       | _ : Empty_inv ;
	 Real[j] := case | j = Head_pointer : True 
		         | Shlist[j] = True : True
		         | _ : False ;

	 Collecting := True;			 
}




transition pi_Remote_GetX (src)
requires { CacheState[src] = Invalid && CacheWait[src] = None }
{
  CacheWait[j] := case | j = src : WGetX | _ : CacheWait[j] ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] 
}




transition pi_Local_PutX_Pending ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Dirty := False; Memory := CacheData_home;
	 CacheState_home := Invalid }

transition pi_Local_PutX_Other ()
requires { CacheState_home = Exclusive && CacheWait_home = None &&
	  Pending = True}
{ Local := False; Dirty := False; Memory := CacheData_home;
	 CacheState_home := Invalid }




transition pi_Remote_PutX (dst)
requires { CacheState[dst] = Exclusive }
{ WBnet_proc := dst; WBnet_mtype := WB; WBnet_data := CacheData[dst];
CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] }



transition pi_Local_Replace ()
requires { CacheState_home = Shared && CacheWait_home = None }
{ Local := False; CacheState_home := Invalid }




transition pi_Remote_Replace (src)
requires { CacheState[src] = Shared && CacheWait[src] = None }
{
  CacheState[j] := case | j = src : Invalid | _ : CacheState[j] ;
  RP[j] := case | j = src : True | _ : RP[j] }



transition ni_NAK (dst)
requires { UnetMtype[dst] = Nak }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] 
}



transition ni_NAK_Clear ()
requires { Nakc = True }
{ Pending := False; Nakc := False }



transition ni_Local_Get_Pending (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_Get_Dirty_NotLocal (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = False }
{
  Pending := True ;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Get | _ : UnetMtype[j] ;
  Collecting := False;
}

transition ni_Local_Get_Dirty_Local (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = True && Local = True }
{ Dirty := False; Head_valid := True; Head_pointer := src;
         Memory := CacheData_home;
	 CacheState_home := Shared;
	 UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
	 UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
	 UnetData[j] := case | j = src : CacheData_home | _ : UnetData[j];
}

transition ni_Local_Get_NotDirty_Head (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | j = src : True | _ : Shlist[j] ;
  Real[j] := case | j = src : True | _ : Shlist[j] 
}

transition ni_Local_Get_NotDirty (src)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = Home && RP[src] = False &&
	  Pending = False && Dirty = False && Head_valid = False }
{ 
  Head_valid := True; Head_pointer := src;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] 
}



transition ni_Remote_Get1 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ Nakc := True ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] }

transition ni_Remote_Get2 (dst)
requires { UnetMtype_home = Get &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked_home = False }
{
  UnetProc_home := dst;
  UnetMtype_home := Put;
  UnetData_home := CacheData[dst];
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}

transition ni_Remote_Get3 (src dst)
requires { UnetMtype[src] = Get &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive && CacheInvmarked[src] = False }
{
  ShWBnet_proc := src;
  ShWBnet_mtype := ShWB;
  ShWBnet_data := CacheData[dst];
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Put | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData[dst] | _ : UnetData[j] 
}





transition ni_Local_GetX_Pending (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = True }
{
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Local_GetX_Dirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = False }
{ Pending := True;
  UnetProc[j] := case | j = src : Head_pointer | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : GetX | _ : UnetMtype[j] ;
  Collecting := False;
}

transition ni_Local_GetX_Dirty_Local (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = True && Local = True }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData_home | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_NotLocal (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = False &&
	  Head_valid = False }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home = WGet }
{ 
  Local := False;
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  CacheInvmarked_home := True;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False && Local = True &&
	  Head_valid = False && CacheWait_home <> WGet }
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  CacheState_home := Invalid;
  Shlist_home := False; 
  Real_home := False ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case | _ : False 
}

transition ni_Local_GetX_NotDirty_Head (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True }
{ 
  Local := False;
  Dirty := True;
  Head_valid := True; 
  Head_pointer := src; Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv;
  PrevData := CurrData;
  Collecting := True;
}

transition ni_Local_GetX_NotDirty_Head_Local1 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home = WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheInvmarked_home := True;
  CacheState_home := Invalid ;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv ;
  PrevData := CurrData;
  Collecting := True;
}

transition ni_Local_GetX_NotDirty_Head_Local2 (src)
requires { UnetMtype[src] = GetX && UnetProc[src] = Home &&
	  Pending = False && Dirty = False &&
	  Head_valid = True && Local = True && CacheWait_home <> WGet}
{ 
  Local := False; 
  Dirty := True; 
  Head_valid := True; 
  Head_pointer := src;
  Pending := True;
  Shlist_home := False; 
  Real_home := False;
  Invnet_home := Empty_inv;
  CacheState_home := Invalid;
  UnetProc[j] := case | j = src : Home | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : Memory | _ : UnetData[j] ;
  Shlist[j] := case | _ : False ;
  Real[j] := case 
               | j = src : False
	       | j = Head_pointer : True 
	       | Shlist[j] = True : True
	       | _ : False;
  Invnet[j] := case 
	       | j = src : Empty_inv
	       | j = Head_pointer : Inv
	       | Shlist[j] = True : Inv
	       | _ : Empty_inv ;
  PrevData := CurrData;
  Collecting := True;
}





transition ni_Remote_GetX1 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst && 
	  CacheState[dst] <> Exclusive }
{ 
  Nakc := True;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : Nak | _ : UnetMtype[j] 
}

transition ni_Remote_GetX2 (dst)
requires { UnetMtype_home = GetX &&
	  UnetProc_home = dst &&
	  CacheState[dst] = Exclusive }
{ 
  UnetProc_home := dst;
  UnetMtype_home := PutX;
  UnetData_home := CacheData[dst];
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_GetX3 (src dst)
requires { UnetMtype[src] = GetX &&
	  UnetProc[src] = dst &&
	  CacheState[dst] = Exclusive}
{ 
  ShWBnet_proc := src;
  ShWBnet_mtype := FAck;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] ;
  UnetProc[j] := case | j = src : dst | _ : UnetProc[j] ;
  UnetMtype[j] := case | j = src : PutX | _ : UnetMtype[j] ;
  UnetData[j] := case | j = src : CacheData[dst] | _ : UnetData[j]
}





transition ni_Local_Put1 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = True }
{ 
  Pending := False;
  Dirty := False;
  Local := True;
  Memory := UnetData_home;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Invalid 
}

transition ni_Local_Put2 ()
requires { UnetMtype_home = Put &&
	  CacheInvmarked_home = False }
{ 
  Pending := False; 
  Dirty := False;
  Local := True;
  Memory := UnetData_home;
  UnetMtype_home := Empty;
  CacheWait_home := None;
  CacheData_home := UnetData_home;
  CacheState_home := Shared 
}




transition ni_Remote_Put1 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = True }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Remote_Put2 (dst)
requires { UnetMtype[dst] = Put &&
	  CacheInvmarked[dst] = False }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheData[j] := case | j = dst : UnetData[dst] | _ : CacheData[j] ;
  CacheState[j] := case | j = dst : Shared | _ : CacheState[j] 
}





transition ni_Local_PutXAcksDone ()
requires { UnetMtype_home = PutX }
{ 
  Pending := False;
  Head_valid := False;
  Local := True;
  UnetMtype_home := Empty;
  CacheData_home := UnetData_home;
  CacheWait_home := None;
  CacheInvmarked_home := False;
  CacheState_home := Exclusive 
}




transition ni_Remote_PutX (dst)
requires { UnetMtype[dst] = PutX &&
	  CacheWait[dst] = WGetX }
{
  UnetMtype[j] := case | j = dst : Empty | _ : UnetMtype[j] ;
  CacheData[j] := case | j = dst : UnetData[dst] | _ : CacheData[j] ;
  CacheWait[j] := case | j = dst : None | _ : CacheWait[j] ;
  CacheInvmarked[j] := case | j = dst : False | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Exclusive | _ : CacheState[j] 
}





transition ni_Inv1 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] = WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheInvmarked[j] := case | j = dst : True | _ : CacheInvmarked[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}

transition ni_Inv2 (dst)
requires { Invnet[dst] = Inv &&
	  CacheWait[dst] <> WGet }
{
  Invnet[j] := case | j = dst : InvAck | _ : Invnet[j] ;
  CacheState[j] := case | j = dst : Invalid | _ : CacheState[j] 
}





transition ni_InvAck1 (src other)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
           Real[other] = True }
{
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j];
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck2 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&           
	   Dirty = False && 
           forall_other j. Real[j] = False }
{ 
  Pending := False; 
  Local := False;
  Collecting := False;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}

transition ni_InvAck3 (src)
requires { Pending = True && 
	   Invnet[src] = InvAck && Real[src] = True &&
	   Dirty = True &&
           forall_other j. Real[j] = False }
{ Pending := False ;
  Collecting := False;
  Invnet[j] := case | j = src : Empty_inv | _ : Invnet[j] ;
  Real[j] := case | j = src : False | _ : Real[j] }





transition ni_WB ()
requires { WBnet_mtype = WB }
{
  Dirty := False; 
  Head_valid := False; 
  Memory := WBnet_data;
  WBnet_mtype := Empty_wb 
}





transition ni_FAck1 ()
requires { ShWBnet_mtype = FAck && Dirty = False }
{ ShWBnet_mtype := Empty_shwb; Pending := False }

transition ni_FAck2 ()
requires { ShWBnet_mtype = FAck && Dirty = True }
{ ShWBnet_mtype := Empty_shwb; Pending := False; 
         Head_pointer := ShWBnet_proc }






transition ni_ShWB ()
requires { ShWBnet_mtype = ShWB }
{ 
  ShWBnet_mtype := Empty_shwb; Pending := False;
  Dirty := False; Memory := ShWBnet_data;
  Shlist[j] := case | j = ShWBnet_proc : True | _ : Shlist[j] ;
  Real[j] := case | j = ShWBnet_proc : True | _ : Shlist[j];
  Real_home := Shlist_home;
}





transition ni_Replace (src)
requires { RP[src] = True }
{
  Shlist[j] := case | j = src : False | _ : Shlist[j] ;
  Real[j] := case | j = src : False | _ : Real[j] 
}


transition store (dst)
requires { CacheState[dst] = Exclusive }
{
	Memory := Store_data;
	CurrData := Store_data;
	CacheData[dst] := Store_data;
}

transition store_home ()
requires { CacheState_home = Exclusive }
{
	Memory := Store_data;
	CurrData := Store_data;
	CacheData_home := Store_data;
}