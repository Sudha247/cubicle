(*
   Ticket mutual exclusion algorithm with 2 processes
   ---------------------------------------------------
   
   Taken from Monika Maidl, "Using Model Checking for System
   Verification", 2000, PhD Thesis.  Table 5.1, page 123.
   
   The program consists of two components having local variables a, c1,
   b, and c2 and shared variables t and s.  There are three program
   locations: trying (T, renamed below as 1), when the program issues a
   request for the critical section, waiting (W, renamed below as 2), and
   critical section (C, renamed below as 3).  The property to verify is
   that of mutual exclusion:
   
                   [] (c1 = C /\ c2 = C)  .
   
   The system enters an infinite loop regardless with most options.
   use -brab 0 -abstr-num 0 2
*)

type location = L1 | L2 | L3

var C1 : location
var C2 : location
var A : int
var D : int
var T : int
var S : int


init (x) { T = 0 && S = 0 (* T = S *) && C1 = L1 && C2 = L1 }

unsafe () { C1 = L3 && C2 = L3 }


transition t1 ()
requires { C1 = L1 }
{
  C1 := L2;
  A := T;
  T := T + 1;
}


transition t2 ()
requires { C1 = L2 && A <= S }
{
  C1 := L3;
}


transition t3 ()
requires { C1 = L3 }
{
  C1 := L1;
  S := S + 1;
}


transition t4 ()
requires { C2 = L1 }
{
  C2 := L2;
  B := T;
  T := T + 1;
}


transition t5 ()
requires { C2 = L2 && B <= S }
{
  C2 := L3;
}


transition t6 ()
requires { C2 = L3 }
{
  C2 := L1;
  S := S + 1;
}

