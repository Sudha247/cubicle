
type kind = K1 | K2 | K3

array Kind[proc] : kind
var Seq : int
chan C[CAUSAL] : int

init (p) { Seq = 1 }

invariant (p1 p2) { Kind[p1] = Kind[p2] }

unsafe () { Seq = 7 }

transition t11 ([p])
requires { Kind[p] = K1 && Seq = 1 }
{ Seq := 2; C!1 }

transition t12 ([p])
requires { Kind[p] = K1 && Seq = 2 }
{ Seq := 3; C!2 }

transition t21 ([p])
requires { Kind[p] = K2 && Seq = 3 && C? = 2 }
{ Seq := 4 }

transition t22 ([p])
requires { Kind[p] = K2 && Seq = 4 }
{ Seq := 5; C!3 }

transition t31 ([p])
requires { Kind[p] = K3 && Seq = 5 && C? = 3 }
{ Seq := 6 }

transition t32 ([p])
requires { Kind[p] = K3 && Seq = 6 && C? = 1 }
{ Seq := 7 }
