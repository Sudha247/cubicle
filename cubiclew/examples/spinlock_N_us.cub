
(* Spinlock example *)

type loc = Acquire | Acquire2 | Spin | CS | Release

(* Program counters *)
array PC[proc] : loc

(* Global variables *)
weak var LOCK : int

(* Registers *)
array T[proc] : int


init (p) { PC[p] = Acquire && LOCK = 1 }

unsafe (p1 p2) { PC[p1] = CS && PC[p2] = CS }


transition t1a_Acquire_dec_gz_CS ([p])
requires { PC[p] = Acquire }
{ PC[p] := Acquire2; T[p] := LOCK }

transition t1b_Acquire_dec_gz_CS ([p])
requires { PC[p] = Acquire2 && 0 < T[p] }
{ PC[p] := CS; LOCK := T[p] - 1 }

transition t1b_Acquire_dec_lez_Spin ([p])
requires { PC[p] = Acquire2 && T[p] <= 0 }
{ PC[p] := Spin; LOCK := T[p] - 1 }

transition t2_Spin_cmp_lez_Spin ([p])
requires { PC[p] = Spin && LOCK <= 0 }
{ PC[p] := Spin }

transition t2_Spin_cmp_gz_Acquire ([p])
requires { PC[p] = Spin && 0 < LOCK }
{ PC[p] := Acquire }

transition t3_CS_Release ([p])
requires { PC[p] = CS }
{ PC[p] := Release }

transition t4_Release_Acquire ([p])
requires { PC[p] = Release }
{ PC[p] := Acquire; LOCK := 1 }
