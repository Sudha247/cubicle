

type location = L1 | L2 | L2b | L3 | L4

weak var F : bool
array B[proc] : bool
array A[proc] : location

init (z) { A[z] = L1 && B[z] = False && F = True }
 
unsafe (z1 z2) { A[z1] = L3 && A[z2] = L3 }

transition t1 (x)
requires { A[x] = L1 }
{ A[x] := L2; }

transition t2a (x)
requires { A[x] = L2 && B[x] = False && forall_other j . B[j] = False }
{ B[x] := True;
  write(x, F, False);
  A[x] := L2b }

transition t2b (x)
fences (x)
requires { A[x] = L2b }
{
  B[x] := False;
  A[x] := L3 }
(*
transition t3 (x)
requires { A[x] = L3 }
{ A[x] := L4; }

transition t4 (x)
requires { A[x] = L4 }
{ write(x, F, True);
  A[x] := L1; }
*)