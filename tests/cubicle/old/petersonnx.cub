
type loc = L1 | L2 | L3 | L4 | L5 | CS | End

(* Program counters *)
array PC[proc] : loc

(* Global variables *)
weak array Want[proc] : int
weak var Turn : proc

init (p) { PC[p] = L1 && Want[p] = 0 }

unsafe (p1 p2) { PC[p1] = CS && PC[p2] = CS }


transition t_L1_L2_W_Want_Self_True (p)
requires { PC[p] = L1 }
{ PC[p] := L2; write(p, Want[p], 1) }

transition t_L2_L3_W_Turn_Other (p q)
requires { PC[p] = L2 }
{ PC[p] := L3; write(p, Turn, q) }

transition t_L3_CS_R_Turn_Self (p)
fences (p)
requires { PC[p] = L3 && read(p, Turn) = p }
{ PC[p] := CS }

transition t_L3_L4_R_Turn_Other (p)
fences (p)
requires { PC[p] = L3 && read(p, Turn) <> p }
{ PC[p] := L4 }

transition t_L4_CS_R_Want_Other_False (p)
requires { PC[p] = L4 && forall_other q. read(p, Want[q]) = 0 }
{ PC[p] := CS }

transition t_L4_L3_R_Want_Other_True (p q)
requires { PC[p] = L4 && read(p, Want[q]) = 1 }
{ PC[p] := L3 }

(* Critical section *)

transition t_CS_L1_W_Want_Self_False (p)
requires { PC[p] = CS }
{ PC[p] := L1; write(p, Want[p], 0) }
