
type loc =  L1 | L2 | L3 | L4 | L5 | L6 | L7 | L8 | CS

(* Program counters *)
array PC[proc] : loc

(* Global variables *)
weak var X : int
weak var Y : int

(* Local variables *)
array LX[proc] : int
array LY[proc] : int

(* Process IDs *)
array ProcID[proc] : int
var NullProc : int

init (p) { PC[p] = L1 && X = NullProc && Y = NullProc }

invariant (p1 p2) { ProcID[p1] = ProcID[p2] }
invariant (p) { NullProc = ProcID[p] }

unsafe (p1 p2) { PC[p1] = CS && PC[p2] = CS }


transition t_L1_L2_W_X_Self (p)
requires { PC[p] = L1 }
{ PC[p] := L2; write(p, X, ProcID[p]) }

transition t_L2_L3_R_Y (p)
fences (p)
requires { PC[p] = L2 }
{ PC[p] := L3; LY[p] := read(p, Y) }

transition t_L3_L1_Y_NotNull (p)
requires { PC[p] = L3 && LY[p] <> NullProc }
{ PC[p] := L1 }

transition t_L3_L4_Y_Null (p)
requires { PC[p] = L3 && LY[p] = NullProc }
{ PC[p] := L4 }

transition t_L4_L5_W_Y_Self (p)
requires { PC[p] = L4 }
{ PC[p] := L5; write(p, Y, ProcID[p]) }

transition t_L5_L6_R_X (p)
fences (p)
requires { PC[p] = L5 }
{ PC[p] := L6; LX[p] := read(p, X) }

transition t_L6_L7_X_Other (p)
requires { PC[p] = L6 && LX[p] <> ProcID[p] }
{ PC[p] := L7 }

transition t_L7_L8_R_Y (p)
requires { PC[p] = L7 }
{ PC[p] := L8; LY[p] := read(p, Y) }

transition t_L8_L1_Y_Other (p)
requires { PC[p] = L8 && LY[p] <> ProcID[p] }
{ PC[p] := L1 }

transition t_L6_CS_X_Self (p)
requires { PC[p] = L6 && LX[p] = ProcID[p] }
{ PC[p] := CS }

(* Critical section *)

transition t_CS_L1_W_Y_Null (p)
requires { PC[p] = CS }
{ PC[p] := L1; write(p, Y, NullProc) }
