
number_procs 2

type loc = L1 | L2 | L3 | L4 | L5 | L6 | L7 | L8

(* Program counters *)
array PC[proc] : loc

(* Global variables *)
weak array Want[proc] : bool (* local_weak improves a lot here *)
weak var Turn : proc

init (p) { PC[p] = L1 && Want[p] = False && Turn = #1 }

unsafe (p1 p2) { PC[p1] = L7 && PC[p2] = L7 }


(* Thread 1 *)

transition t1_L1_L2_W_Want1_True (p)
requires { p = #1 && PC[p] = L1 }
{ PC[p] := L2; write(p, Want[p], True) }

transition t1_L2_L3_R_Want2_True (p)
fences (p)
requires { p = #1 && PC[p] = L2 && read(p, Want[#2]) = True }
{ PC[p] := L3 }

transition t1_L2_L7_R_Want2_False (p)
fences (p)
requires { p = #1 && PC[p] = L2 && read(p, Want[#2]) = False }
{ PC[p] := L7 }

transition t1_L3_L4_R_Turn_Other (p)
requires { p = #1 && PC[p] = L3 && read(p, Turn) <> #1 }
{ PC[p] := L4 }

transition t1_L5_L2_R_Turn_Self (p)
requires { p = #1 && PC[p] = L3 && read(p, Turn) = #1 }
{ PC[p] := L2 }

transition t1_L4_L5_W_Want1_False (p)
requires { p = #1 && PC[p] = L4 }
{ PC[p] := L5; write(p, Want[p], False) }

transition t1_L5_L5_R_Turn_Other (p)
requires { p = #1 && PC[p] = L5 && read(p, Turn) <> #1 }
{ PC[p] := L5 }

transition t1_L5_L6_R_Turn_Self (p)
requires { p = #1 && PC[p] = L5 && read(p, Turn) = #1 }
{ PC[p] := L6 }

transition t1_L6_L2_W_Want1_True (p)
requires { p = #1 && PC[p] = L6 }
{ PC[p] := L2; write(p, Want[p], True) }

(* Critical section *)

transition t1_L7_L8_W_Turn_Other (p)
requires { p = #1 && PC[p] = L7 }
{ PC[p] := L8; write(p, Turn, #2) }

transition t1_L8_L1_W_Want1_False (p)
requires { p = #1 && PC[p] = L8 }
{ PC[p] := L1; write(p, Want[p], False) }


(* Thread 2 *)

transition t2_L1_L2_W_Want2_True (p)
requires { p = #2 && PC[p] = L1 }
{ PC[p] := L2; write(p, Want[p], True) }

transition t2_L2_L3_R_Want1_True (p)
fences (p)
requires { p = #2 && PC[p] = L2 && read(p, Want[#1]) = True }
{ PC[p] := L3 }

transition t2_L2_L7_R_Want1_False (p)
fences (p)
requires { p = #2 && PC[p] = L2 && read(p, Want[#1]) = False }
{ PC[p] := L7 }

transition t2_L3_L4_R_Turn_Other (p)
requires { p = #2 && PC[p] = L3 && read(p, Turn) <> #2 }
{ PC[p] := L4 }

transition t2_L5_L2_R_Turn_Self (p)
requires { p = #2 && PC[p] = L3 && read(p, Turn) = #2 }
{ PC[p] := L2 }

transition t2_L4_L5_W_Want2_False (p)
requires { p = #2 && PC[p] = L4 }
{ PC[p] := L5; write(p, Want[p], False) }

transition t2_L5_L5_R_Turn_Other (p)
requires { p = #2 && PC[p] = L5 && read(p, Turn) <> #2 }
{ PC[p] := L5 }

transition t2_L5_L6_R_Turn_Self (p)
requires { p = #2 && PC[p] = L5 && read(p, Turn) = #2 }
{ PC[p] := L6 }

transition t2_L6_L2_W_Want2_True (p)
requires { p = #2 && PC[p] = L6 }
{ PC[p] := L2; write(p, Want[p], True) }

(* Critical section *)

transition t2_L7_L8_W_Turn_Other (p)
requires { p = #2 && PC[p] = L7 }
{ PC[p] := L8; write(p, Turn, #1) }

transition t2_L8_L1_W_Want2_False (p)
requires { p = #2 && PC[p] = L8 }
{ PC[p] := L1; write(p, Want[p], False) }

