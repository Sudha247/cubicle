
weak var Turn : proc
weak array Want[proc] : bool
array Crit[proc] : bool

array LTurn[proc] : proc
array LWant[proc] : bool
array RTurn[proc] : bool
array RWant[proc] : bool

init (z) { Want[z] = False && Crit[z] = False &&
     	   RTurn[z] = False && RWant[z] = False }

unsafe (z1 z2) { Crit[z1] = True && Crit[z2] = True }

transition req (i)
requires { read(i, Want[i]) = False }
{ write(i, Want[i], True) }

transition pre_enter_R_Want (i)
requires { RWant[i] = False && Crit[i] = False }
{ LWant[i] := read(i, Want[i]); RWant[i] := True }

transition pre_enter_R_Turn (i)
requires { RTurn[i] = False && Crit[i] = False }
{ LTurn[i] := read(i, Turn); RTurn[i] := True }

transition enter (i)
requires { RWant[i] = True && LWant[i] = True &&
	   RTurn[i] = True && LTurn[i] = i &&
	   Crit[i] = False }
{ Crit[i] := True; RWant[i] := False; RTurn[i] := False; }

transition exit (i j)
requires { Crit[i] = True }
{ 
  Crit[i] := False; 
  write(i, Turn, j);
  write(i, Want[i], False);
}


