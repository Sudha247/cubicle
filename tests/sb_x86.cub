type loc = IDLE | L_end_2 | L__start | L_thread_2 | L_thread_2_2 | L_end_1 | L_thread_2_4 | L_thread_2_1 | L_thread_2_2b | L__start_4 | L_thread_1 | L_thread_1_3 | L_thread_1_5 | L_thread_1_2 | L_thread_1_1 | L__start_2 | L__start_3 | L_thread_1_2b | L__start_1 | L_thread_1_4 | L_thread_2_5 | L_thread_2_3 | END
type tvar = None | Vy | Vx

var GLOB_x : int
var GLOB_y : int
var ECX_1x1 : int
var EDX_2x1 : int
var PC_0x1 : loc
var RES_0x1 : int
var TMP_0x1 : int
var ARG_0x1 : int
var PC_1x1 : loc
var RES_1x1 : int
var TMP_1x1 : int
var ARG_1x1 : int
var PC_2x1 : loc
var RES_2x1 : int
var TMP_2x1 : int
var ARG_2x1 : int
var LOCK : bool
array BVAR_0x1[proc] : tvar
array BVAL_0x1[proc] : int
var BLEN_0x1 : int
array BVAR_1x1[proc] : tvar
array BVAL_1x1[proc] : int
var BLEN_1x1 : int
array BVAR_2x1[proc] : tvar
array BVAL_2x1[proc] : int
var BLEN_2x1 : int

init (p b) { GLOB_x = 0 && GLOB_y = 0 && PC_0x1 = IDLE && PC_1x1 = IDLE && PC_2x1 = IDLE && LOCK = False && BVAR_0x1[b] = None && BLEN_0x1 = 0 && BVAR_1x1[b] = None && BLEN_1x1 = 0 && BVAR_2x1[b] = None && BLEN_2x1 = 0 }

unsafe (p) { PC_1x1 = L_thread_1_5 && PC_2x1 = L_thread_2_5 }

transition t0x1_IDLE_L__start ()
requires { PC_0x1 = IDLE }
{ PC_0x1 := L__start }

transition t0x1_L__start_L__start_1_pthread_create ()
requires { PC_0x1 = L__start }
{ PC_0x1 := L__start_1; PC_1x1 := L_thread_1 }

transition t0x1_L__start_1_L__start_2_pthread_create ()
requires { PC_0x1 = L__start_1 }
{ PC_0x1 := L__start_2; PC_2x1 := L_thread_2 }

transition t0x1_L__start_2_L__start_3_pthread_join ()
requires { PC_0x1 = L__start_2 && PC_1x1 = END }
{ PC_0x1 := L__start_3 }

transition t0x1_L__start_3_L__start_4_pthread_join ()
requires { PC_0x1 = L__start_3 && PC_2x1 = END }
{ PC_0x1 := L__start_4 }

transition t0x1_L__start_4_END ()
requires { PC_0x1 = L__start_4 }
{ PC_0x1 := END }

transition t1x1_L_thread_1_L_thread_1_1_mov (bd)
requires { PC_1x1 = L_thread_1 && BVAR_1x1[bd] = None && forall_other bx. (bx < bd || BVAR_1x1[bx] = None) }
{ PC_1x1 := L_thread_1_1; BVAL_1x1[bd] := 1; BVAR_1x1[bd] := Vx; BLEN_1x1 := BLEN_1x1 + 1 }

transition t1x1_L_thread_1_1_L_thread_1_2_mfence ()
requires { PC_1x1 = L_thread_1_1 && BLEN_1x1 = 0 }
{ PC_1x1 := L_thread_1_2 }

transition t1x1_L_thread_1_2_L_thread_1_2b_pre_early (bs)
requires { PC_1x1 = L_thread_1_2 && LOCK = False && BVAR_1x1[bs] = Vy && forall_other bx. (bx < bs || BVAR_1x1[bx] <> Vy) }
{ PC_1x1 := L_thread_1_2b; TMP_1x1 := BVAL_1x1[bs] }

transition t1x1_L_thread_1_2_L_thread_1_2b_pre_direct (bs)
requires { PC_1x1 = L_thread_1_2 && LOCK = False && forall_other bx. (BVAR_1x1[bx] <> Vy) }
{ PC_1x1 := L_thread_1_2b; TMP_1x1 := GLOB_y }

transition t1x1_L_thread_1_2b_L_thread_1_3_mov ()
requires { PC_1x1 = L_thread_1_2b }
{ PC_1x1 := L_thread_1_3; ECX_1x1 := TMP_1x1 }

transition t1x1_L_thread_1_3_L_thread_1_4_cmp ()
requires { PC_1x1 = L_thread_1_3 }
{ PC_1x1 := L_thread_1_4; RES_1x1 := ECX_1x1 - 0 }

transition t1x1_L_thread_1_4_L_end_1_jmp_true ()
requires { PC_1x1 = L_thread_1_4 && RES_1x1 <> 0 }
{ PC_1x1 := L_end_1 }

transition t1x1_L_thread_1_4_L_thread_1_5_jmp_false ()
requires { PC_1x1 = L_thread_1_4 && RES_1x1 = 0 }
{ PC_1x1 := L_thread_1_5 }

transition t1x1_L_end_1_END ()
requires { PC_1x1 = L_end_1 }
{ PC_1x1 := END }

transition t2x1_L_thread_2_L_thread_2_1_mov (bd)
requires { PC_2x1 = L_thread_2 && BVAR_2x1[bd] = None && forall_other bx. (bx < bd || BVAR_2x1[bx] = None) }
{ PC_2x1 := L_thread_2_1; BVAL_2x1[bd] := 1; BVAR_2x1[bd] := Vy; BLEN_2x1 := BLEN_2x1 + 1 }

transition t2x1_L_thread_2_1_L_thread_2_2_mfence ()
requires { PC_2x1 = L_thread_2_1 && BLEN_2x1 = 0 }
{ PC_2x1 := L_thread_2_2 }

transition t2x1_L_thread_2_2_L_thread_2_2b_pre_early (bs)
requires { PC_2x1 = L_thread_2_2 && LOCK = False && BVAR_2x1[bs] = Vx && forall_other bx. (bx < bs || BVAR_2x1[bx] <> Vx) }
{ PC_2x1 := L_thread_2_2b; TMP_2x1 := BVAL_2x1[bs] }

transition t2x1_L_thread_2_2_L_thread_2_2b_pre_direct (bs)
requires { PC_2x1 = L_thread_2_2 && LOCK = False && forall_other bx. (BVAR_2x1[bx] <> Vx) }
{ PC_2x1 := L_thread_2_2b; TMP_2x1 := GLOB_x }

transition t2x1_L_thread_2_2b_L_thread_2_3_mov ()
requires { PC_2x1 = L_thread_2_2b }
{ PC_2x1 := L_thread_2_3; EDX_2x1 := TMP_2x1 }

transition t2x1_L_thread_2_3_L_thread_2_4_cmp ()
requires { PC_2x1 = L_thread_2_3 }
{ PC_2x1 := L_thread_2_4; RES_2x1 := EDX_2x1 - 0 }

transition t2x1_L_thread_2_4_L_end_2_jmp_true ()
requires { PC_2x1 = L_thread_2_4 && RES_2x1 <> 0 }
{ PC_2x1 := L_end_2 }

transition t2x1_L_thread_2_4_L_thread_2_5_jmp_false ()
requires { PC_2x1 = L_thread_2_4 && RES_2x1 = 0 }
{ PC_2x1 := L_thread_2_5 }

transition t2x1_L_end_2_END ()
requires { PC_2x1 = L_end_2 }
{ PC_2x1 := END }

(* transition mt1x1_store_x (b) *)
(* requires { LOCK = False && BVAR_1x1[b] = Vx && forall_other bx. (b <= bx || BVAR_1x1[bx] = None) } *)
(* { BVAR_1x1[b] := None; GLOB_x := BVAL_1x1[b]; BLEN_1x1 := BLEN_1x1 - 1 } *)

(* transition mt2x1_store_y (b) *)
(* requires { LOCK = False && BVAR_2x1[b] = Vy && forall_other bx. (b <= bx || BVAR_2x1[bx] = None) } *)
(* { BVAR_2x1[b] := None; GLOB_y := BVAL_2x1[b]; BLEN_2x1 := BLEN_2x1 - 1 } *)

