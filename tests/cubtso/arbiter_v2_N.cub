
(* The Arbiter algortihm (version 2)

https://www.semanticscholar.org/paper/The-arbiter-an-active-system-component-for-impleme-Goeman/c282cb70cd6cdf3d5e08bd39c016f54b006b6555
*)

type kind = Arb | Proc
type loc = L1 | L2 | L3 | L4 | CS

(* Local variables *)
const Kind[proc] : kind
array PC[proc] : loc
array Pr[proc] : proc

(* Global variables *)
weak array Attn[proc] : bool
weak array Answ[proc] : bool


invariant (p1 p2) { Kind[p1] = Arb && Kind[p2] = Arb }

init (p) { PC[p] = L1 && Attn[p] = False && Answ[p] = False }

unsafe (p1 p2) { PC[p1] = CS && PC[p2] = CS }


(* Arbitrer (1) *)

transition t_arb_L1_L2 ([p] q)
requires { Kind[p] = Arb && PC[p] = L1 && Attn[q] = True }
{ PC[p] := L2; Pr[p] := q }

transition t_arb_L2_L3 ([p] q)
requires { Kind[p] = Arb && PC[p] = L2 && Pr[p] = q }
{ PC[p] := L3; Answ[q] := True }

transition t_arb_L3_L4 ([p] q)
requires { Kind[p] = Arb && PC[p] = L3 && Pr[p] = q && Attn[q] = False }
{ PC[p] := L4 }

transition t_arb_L4_L1 ([p] q)
requires { Kind[p] = Arb && PC[p] = L4 && Pr[p] = q }
{ PC[p] := L1; Answ[q] := False }


(* Processes (N) *)

transition t_proc_L1_L2 ([p])
requires { Kind[p] = Proc && PC[p] = L1 && Answ[p] = False }
{ PC[p] := L2 }

transition t_proc_L2_L3 ([p])
requires { Kind[p] = Proc && PC[p] = L2 }
{ PC[p] := L3; Attn[p] := True }

transition t_proc_L3_CS ([p])
requires { Kind[p] = Proc && PC[p] = L3 && Answ[p] = True }
{ PC[p] := CS }

transition t_proc_CS_L1 ([p])
requires { Kind[p] = Proc && PC[p] = CS }
{ PC[p] := L1; Attn[p] := False }
