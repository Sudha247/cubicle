
(* Naive mutual exclusion algorithm for N processes *)

type loc = L1 | L2 | L3

array PC[proc] : loc

(* Global variables *)
weak array R[proc] : bool


init (p) { PC[p] = L1 && R[p] = False }

unsafe (p1 p2) { PC[p1] = L3 && PC[p2] = L3 }


transition t1 ([p])
requires { PC[p] = L1 }
{ PC[p] := L2; R[p] := True }

transition t2 ([p])
requires { PC[p] = L2 && forall_other q. R[q] = False && fence() }
{ PC[p] := L3 }

transition t3 ([p] q)
requires { PC[p] = L2 && R[q] = True && fence() }
{ PC[p] := L1; R[p] := False }

(* Critical section *)

transition t4 ([p])
requires { PC[p] = L3 }
{ PC[p] := L1; R[p] := False }
