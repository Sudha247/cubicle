
(* Mutex with an x86-like lock xchg instruction *)

type loc = L1 | L2 | L3

array PC[proc] : loc

(* Global variables *)
weak var Lock : int

(* Registers *)
array R[proc] : int


init (p) { PC[p] = L1 && Lock = 0 }

unsafe (p1 p2) { PC[p1] = L3 && PC[p2] = L3 }


transition t1 ([p])
requires { PC[p] = L1 }
{ PC[p] := L2; R[p] := Lock; Lock := 1 }

transition t2a ([p])
requires { PC[p] = L2 && R[p] = 0 }
{ PC[p] := L3 }

transition t2b ([p])
requires { PC[p] = L2 && R[p] <> 0 }
{ PC[p] := L1 }

(* Critical section *)

transition t3 ([p])
requires { PC[p] = L3 }
{ PC[p] := L1; Lock := 0 }
