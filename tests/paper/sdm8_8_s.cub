
(* Example 8-8 Locked Instructions Have a Total Order *)

number_procs 4

type loc = L1 | L2 | End

array PC[proc] : loc

array ESI[proc] : int
array EDI[proc] : int
array EAX[proc] : int
array EBX[proc] : int
array ECX[proc] : int
array EDX[proc] : int

weak var X : int
weak var Y : int

init (p) {
    PC[p] = L1 && ESI[p] = 1 && EDI[p] = 1 &&
    EAX[p] = 0 && EBX[p] = 0 && ECX[p] = 0 && EDX[p] = 0 &&
    X = 0 && Y = 0 }

(* FORBIDDEN Final State *)
unsafe (p1 p2 p3 p4) {
    p1 = #1 && p2 = #2 && p3 = #3 && p4 = #4 &&
    PC[p1] = End && PC[p2] = End && PC[p3] = End && PC[p4] = End &&
    EAX[p3] = 1 && EBX[p3] = 0 && ECX[p4] = 1 && EDX[p4] = 0 }

transition t1_1 ([p])
requires { p = #1 && PC[p] = L1 }
{ PC[p] := End; ESI[p] := X; X := ESI[p] }

transition t2_1 ([p])
requires { p = #2 && PC[p] = L1 }
{ PC[p] := End; EDI[p] := Y; Y := EDI[p] }

transition t3_1 ([p])
requires { p = #3 && PC[p] = L1 }
{ PC[p] := L2; EAX[p] := X }

transition t3_2 ([p])
requires { p = #3 && PC[p] = L2 }
{ PC[p] := End; EBX[p] := Y }

transition t4_1 ([p])
requires { p = #4 && PC[p] = L1 }
{ PC[p] := L2; ECX[p] := Y }

transition t4_2 ([p])
requires { p = #4 && PC[p] = L2 }
{ PC[p] := End; EDX[p] := X }
