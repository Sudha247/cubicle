State 0:
system' -> . system [ # ]
-- On SIZEPROC shift to state 1
-- On system shift to state 3
-- On size_proc shift to state 4
-- On VAR reduce production size_proc -> 
-- On UNSAFE reduce production size_proc -> 
-- On UNIVTRANSITION reduce production size_proc -> 
-- On TYPE reduce production size_proc -> 
-- On TREGEXP reduce production size_proc -> 
-- On TRANSITION reduce production size_proc -> 
-- On PREDICATE reduce production size_proc -> 
-- On METATRANSITION reduce production size_proc -> 
-- On INVARIANT reduce production size_proc -> 
-- On INIT reduce production size_proc -> 
-- On HIDETRANSITION reduce production size_proc -> 
-- On CONST reduce production size_proc -> 
-- On ARRAY reduce production size_proc -> 

State 1:
size_proc -> SIZEPROC . INT [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On INT shift to state 2

State 2:
size_proc -> SIZEPROC INT . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production size_proc -> SIZEPROC INT 
-- On UNSAFE reduce production size_proc -> SIZEPROC INT 
-- On UNIVTRANSITION reduce production size_proc -> SIZEPROC INT 
-- On TYPE reduce production size_proc -> SIZEPROC INT 
-- On TREGEXP reduce production size_proc -> SIZEPROC INT 
-- On TRANSITION reduce production size_proc -> SIZEPROC INT 
-- On PREDICATE reduce production size_proc -> SIZEPROC INT 
-- On METATRANSITION reduce production size_proc -> SIZEPROC INT 
-- On INVARIANT reduce production size_proc -> SIZEPROC INT 
-- On INIT reduce production size_proc -> SIZEPROC INT 
-- On HIDETRANSITION reduce production size_proc -> SIZEPROC INT 
-- On CONST reduce production size_proc -> SIZEPROC INT 
-- On ARRAY reduce production size_proc -> SIZEPROC INT 

State 3:
system' -> system . [ # ]
-- On # accept system

State 4:
system -> size_proc . type_defs symbold_decls decl_list EOF [ # ]
-- On TYPE shift to state 5
-- On type_defs shift to state 16
-- On type_def_plus shift to state 304
-- On type_def shift to state 305
-- On VAR reduce production type_defs -> 
-- On UNSAFE reduce production type_defs -> 
-- On UNIVTRANSITION reduce production type_defs -> 
-- On TREGEXP reduce production type_defs -> 
-- On TRANSITION reduce production type_defs -> 
-- On PREDICATE reduce production type_defs -> 
-- On METATRANSITION reduce production type_defs -> 
-- On INVARIANT reduce production type_defs -> 
-- On INIT reduce production type_defs -> 
-- On HIDETRANSITION reduce production type_defs -> 
-- On CONST reduce production type_defs -> 
-- On ARRAY reduce production type_defs -> 

State 5:
type_def -> TYPE . lident [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def -> TYPE . lident EQ constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def -> TYPE . lident EQ BAR constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LIDENT shift to state 6
-- On lident shift to state 7

State 6:
lident -> LIDENT . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION THEN RIGHTSQ RIGHTPAR RIGHTBR PV PREDICATE PLUS OR NEQ MINUS MIDENT METATRANSITION LT LIDENT LEFTPAR LE INVARIANT INIT IMP HIDETRANSITION GT GE EQUIV EQ ELSE DOT CONST COMMA COLON BAR ARRAY AND ]
-- On VAR reduce production lident -> LIDENT 
-- On UNSAFE reduce production lident -> LIDENT 
-- On UNIVTRANSITION reduce production lident -> LIDENT 
-- On TYPE reduce production lident -> LIDENT 
-- On TREGEXP reduce production lident -> LIDENT 
-- On TRANSITION reduce production lident -> LIDENT 
-- On THEN reduce production lident -> LIDENT 
-- On RIGHTSQ reduce production lident -> LIDENT 
-- On RIGHTPAR reduce production lident -> LIDENT 
-- On RIGHTBR reduce production lident -> LIDENT 
-- On PV reduce production lident -> LIDENT 
-- On PREDICATE reduce production lident -> LIDENT 
-- On PLUS reduce production lident -> LIDENT 
-- On OR reduce production lident -> LIDENT 
-- On NEQ reduce production lident -> LIDENT 
-- On MINUS reduce production lident -> LIDENT 
-- On MIDENT reduce production lident -> LIDENT 
-- On METATRANSITION reduce production lident -> LIDENT 
-- On LT reduce production lident -> LIDENT 
-- On LIDENT reduce production lident -> LIDENT 
-- On LEFTPAR reduce production lident -> LIDENT 
-- On LE reduce production lident -> LIDENT 
-- On INVARIANT reduce production lident -> LIDENT 
-- On INIT reduce production lident -> LIDENT 
-- On IMP reduce production lident -> LIDENT 
-- On HIDETRANSITION reduce production lident -> LIDENT 
-- On GT reduce production lident -> LIDENT 
-- On GE reduce production lident -> LIDENT 
-- On EQUIV reduce production lident -> LIDENT 
-- On EQ reduce production lident -> LIDENT 
-- On ELSE reduce production lident -> LIDENT 
-- On DOT reduce production lident -> LIDENT 
-- On CONST reduce production lident -> LIDENT 
-- On COMMA reduce production lident -> LIDENT 
-- On COLON reduce production lident -> LIDENT 
-- On BAR reduce production lident -> LIDENT 
-- On ARRAY reduce production lident -> LIDENT 
-- On AND reduce production lident -> LIDENT 

State 7:
type_def -> TYPE lident . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def -> TYPE lident . EQ constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def -> TYPE lident . EQ BAR constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On EQ shift to state 8
-- On VAR reduce production type_def -> TYPE lident 
-- On UNSAFE reduce production type_def -> TYPE lident 
-- On UNIVTRANSITION reduce production type_def -> TYPE lident 
-- On TYPE reduce production type_def -> TYPE lident 
-- On TREGEXP reduce production type_def -> TYPE lident 
-- On TRANSITION reduce production type_def -> TYPE lident 
-- On PREDICATE reduce production type_def -> TYPE lident 
-- On METATRANSITION reduce production type_def -> TYPE lident 
-- On INVARIANT reduce production type_def -> TYPE lident 
-- On INIT reduce production type_def -> TYPE lident 
-- On HIDETRANSITION reduce production type_def -> TYPE lident 
-- On CONST reduce production type_def -> TYPE lident 
-- On ARRAY reduce production type_def -> TYPE lident 

State 8:
type_def -> TYPE lident EQ . constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def -> TYPE lident EQ . BAR constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On BAR shift to state 10
-- On mident shift to state 11
-- On constructors shift to state 15

State 9:
mident -> MIDENT . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION TIMES THEN RIGHTPAR RIGHTBR PV PREDICATE PLUS OR NEQ MINUS MIDENT METATRANSITION LT LIDENT LEFTSQ LEFTPAR LE INVARIANT INIT IMP HIDETRANSITION GT GE EQUIV EQ ELSE CONST COMMA COLON BAR ARRAY AND AFFECT ]
-- On VAR reduce production mident -> MIDENT 
-- On UNSAFE reduce production mident -> MIDENT 
-- On UNIVTRANSITION reduce production mident -> MIDENT 
-- On TYPE reduce production mident -> MIDENT 
-- On TREGEXP reduce production mident -> MIDENT 
-- On TRANSITION reduce production mident -> MIDENT 
-- On TIMES reduce production mident -> MIDENT 
-- On THEN reduce production mident -> MIDENT 
-- On RIGHTPAR reduce production mident -> MIDENT 
-- On RIGHTBR reduce production mident -> MIDENT 
-- On PV reduce production mident -> MIDENT 
-- On PREDICATE reduce production mident -> MIDENT 
-- On PLUS reduce production mident -> MIDENT 
-- On OR reduce production mident -> MIDENT 
-- On NEQ reduce production mident -> MIDENT 
-- On MINUS reduce production mident -> MIDENT 
-- On MIDENT reduce production mident -> MIDENT 
-- On METATRANSITION reduce production mident -> MIDENT 
-- On LT reduce production mident -> MIDENT 
-- On LIDENT reduce production mident -> MIDENT 
-- On LEFTSQ reduce production mident -> MIDENT 
-- On LEFTPAR reduce production mident -> MIDENT 
-- On LE reduce production mident -> MIDENT 
-- On INVARIANT reduce production mident -> MIDENT 
-- On INIT reduce production mident -> MIDENT 
-- On IMP reduce production mident -> MIDENT 
-- On HIDETRANSITION reduce production mident -> MIDENT 
-- On GT reduce production mident -> MIDENT 
-- On GE reduce production mident -> MIDENT 
-- On EQUIV reduce production mident -> MIDENT 
-- On EQ reduce production mident -> MIDENT 
-- On ELSE reduce production mident -> MIDENT 
-- On CONST reduce production mident -> MIDENT 
-- On COMMA reduce production mident -> MIDENT 
-- On COLON reduce production mident -> MIDENT 
-- On BAR reduce production mident -> MIDENT 
-- On ARRAY reduce production mident -> MIDENT 
-- On AND reduce production mident -> MIDENT 
-- On AFFECT reduce production mident -> MIDENT 

State 10:
type_def -> TYPE lident EQ BAR . constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On mident shift to state 11
-- On constructors shift to state 14

State 11:
constructors -> mident . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
constructors -> mident . BAR constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On BAR shift to state 12
-- On VAR reduce production constructors -> mident 
-- On UNSAFE reduce production constructors -> mident 
-- On UNIVTRANSITION reduce production constructors -> mident 
-- On TYPE reduce production constructors -> mident 
-- On TREGEXP reduce production constructors -> mident 
-- On TRANSITION reduce production constructors -> mident 
-- On PREDICATE reduce production constructors -> mident 
-- On METATRANSITION reduce production constructors -> mident 
-- On INVARIANT reduce production constructors -> mident 
-- On INIT reduce production constructors -> mident 
-- On HIDETRANSITION reduce production constructors -> mident 
-- On CONST reduce production constructors -> mident 
-- On ARRAY reduce production constructors -> mident 

State 12:
constructors -> mident BAR . constructors [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On mident shift to state 11
-- On constructors shift to state 13

State 13:
constructors -> mident BAR constructors . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production constructors -> mident BAR constructors 
-- On UNSAFE reduce production constructors -> mident BAR constructors 
-- On UNIVTRANSITION reduce production constructors -> mident BAR constructors 
-- On TYPE reduce production constructors -> mident BAR constructors 
-- On TREGEXP reduce production constructors -> mident BAR constructors 
-- On TRANSITION reduce production constructors -> mident BAR constructors 
-- On PREDICATE reduce production constructors -> mident BAR constructors 
-- On METATRANSITION reduce production constructors -> mident BAR constructors 
-- On INVARIANT reduce production constructors -> mident BAR constructors 
-- On INIT reduce production constructors -> mident BAR constructors 
-- On HIDETRANSITION reduce production constructors -> mident BAR constructors 
-- On CONST reduce production constructors -> mident BAR constructors 
-- On ARRAY reduce production constructors -> mident BAR constructors 

State 14:
type_def -> TYPE lident EQ BAR constructors . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production type_def -> TYPE lident EQ BAR constructors 
-- On UNSAFE reduce production type_def -> TYPE lident EQ BAR constructors 
-- On UNIVTRANSITION reduce production type_def -> TYPE lident EQ BAR constructors 
-- On TYPE reduce production type_def -> TYPE lident EQ BAR constructors 
-- On TREGEXP reduce production type_def -> TYPE lident EQ BAR constructors 
-- On TRANSITION reduce production type_def -> TYPE lident EQ BAR constructors 
-- On PREDICATE reduce production type_def -> TYPE lident EQ BAR constructors 
-- On METATRANSITION reduce production type_def -> TYPE lident EQ BAR constructors 
-- On INVARIANT reduce production type_def -> TYPE lident EQ BAR constructors 
-- On INIT reduce production type_def -> TYPE lident EQ BAR constructors 
-- On HIDETRANSITION reduce production type_def -> TYPE lident EQ BAR constructors 
-- On CONST reduce production type_def -> TYPE lident EQ BAR constructors 
-- On ARRAY reduce production type_def -> TYPE lident EQ BAR constructors 

State 15:
type_def -> TYPE lident EQ constructors . [ VAR UNSAFE UNIVTRANSITION TYPE TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production type_def -> TYPE lident EQ constructors 
-- On UNSAFE reduce production type_def -> TYPE lident EQ constructors 
-- On UNIVTRANSITION reduce production type_def -> TYPE lident EQ constructors 
-- On TYPE reduce production type_def -> TYPE lident EQ constructors 
-- On TREGEXP reduce production type_def -> TYPE lident EQ constructors 
-- On TRANSITION reduce production type_def -> TYPE lident EQ constructors 
-- On PREDICATE reduce production type_def -> TYPE lident EQ constructors 
-- On METATRANSITION reduce production type_def -> TYPE lident EQ constructors 
-- On INVARIANT reduce production type_def -> TYPE lident EQ constructors 
-- On INIT reduce production type_def -> TYPE lident EQ constructors 
-- On HIDETRANSITION reduce production type_def -> TYPE lident EQ constructors 
-- On CONST reduce production type_def -> TYPE lident EQ constructors 
-- On ARRAY reduce production type_def -> TYPE lident EQ constructors 

State 16:
system -> size_proc type_defs . symbold_decls decl_list EOF [ # ]
-- On VAR shift to state 17
-- On CONST shift to state 21
-- On ARRAY shift to state 25
-- On var_decl shift to state 36
-- On symbold_decls shift to state 42
-- On const_decl shift to state 38
-- On array_decl shift to state 40
-- On UNSAFE reduce production symbold_decls -> 
-- On UNIVTRANSITION reduce production symbold_decls -> 
-- On TREGEXP reduce production symbold_decls -> 
-- On TRANSITION reduce production symbold_decls -> 
-- On PREDICATE reduce production symbold_decls -> 
-- On METATRANSITION reduce production symbold_decls -> 
-- On INVARIANT reduce production symbold_decls -> 
-- On INIT reduce production symbold_decls -> 
-- On HIDETRANSITION reduce production symbold_decls -> 

State 17:
var_decl -> VAR . mident COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On mident shift to state 18

State 18:
var_decl -> VAR mident . COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On COLON shift to state 19

State 19:
var_decl -> VAR mident COLON . lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LIDENT shift to state 6
-- On lident shift to state 20

State 20:
var_decl -> VAR mident COLON lident . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production var_decl -> VAR mident COLON lident 
-- On UNSAFE reduce production var_decl -> VAR mident COLON lident 
-- On UNIVTRANSITION reduce production var_decl -> VAR mident COLON lident 
-- On TREGEXP reduce production var_decl -> VAR mident COLON lident 
-- On TRANSITION reduce production var_decl -> VAR mident COLON lident 
-- On PREDICATE reduce production var_decl -> VAR mident COLON lident 
-- On METATRANSITION reduce production var_decl -> VAR mident COLON lident 
-- On INVARIANT reduce production var_decl -> VAR mident COLON lident 
-- On INIT reduce production var_decl -> VAR mident COLON lident 
-- On HIDETRANSITION reduce production var_decl -> VAR mident COLON lident 
-- On CONST reduce production var_decl -> VAR mident COLON lident 
-- On ARRAY reduce production var_decl -> VAR mident COLON lident 

State 21:
const_decl -> CONST . mident COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On mident shift to state 22

State 22:
const_decl -> CONST mident . COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On COLON shift to state 23

State 23:
const_decl -> CONST mident COLON . lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LIDENT shift to state 6
-- On lident shift to state 24

State 24:
const_decl -> CONST mident COLON lident . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production const_decl -> CONST mident COLON lident 
-- On UNSAFE reduce production const_decl -> CONST mident COLON lident 
-- On UNIVTRANSITION reduce production const_decl -> CONST mident COLON lident 
-- On TREGEXP reduce production const_decl -> CONST mident COLON lident 
-- On TRANSITION reduce production const_decl -> CONST mident COLON lident 
-- On PREDICATE reduce production const_decl -> CONST mident COLON lident 
-- On METATRANSITION reduce production const_decl -> CONST mident COLON lident 
-- On INVARIANT reduce production const_decl -> CONST mident COLON lident 
-- On INIT reduce production const_decl -> CONST mident COLON lident 
-- On HIDETRANSITION reduce production const_decl -> CONST mident COLON lident 
-- On CONST reduce production const_decl -> CONST mident COLON lident 
-- On ARRAY reduce production const_decl -> CONST mident COLON lident 

State 25:
array_decl -> ARRAY . mident LEFTSQ lident_list_plus RIGHTSQ COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On MIDENT shift to state 9
-- On mident shift to state 26

State 26:
array_decl -> ARRAY mident . LEFTSQ lident_list_plus RIGHTSQ COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LEFTSQ shift to state 27

State 27:
array_decl -> ARRAY mident LEFTSQ . lident_list_plus RIGHTSQ COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(COMMA,lident) shift to state 28
-- On lident_list_plus shift to state 29
-- On lident shift to state 33

State 28:
lident_list_plus -> separated_nonempty_list(COMMA,lident) . [ RIGHTSQ ]
-- On RIGHTSQ reduce production lident_list_plus -> separated_nonempty_list(COMMA,lident) 

State 29:
array_decl -> ARRAY mident LEFTSQ lident_list_plus . RIGHTSQ COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On RIGHTSQ shift to state 30

State 30:
array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ . COLON lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On COLON shift to state 31

State 31:
array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON . lident [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On LIDENT shift to state 6
-- On lident shift to state 32

State 32:
array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On UNSAFE reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On UNIVTRANSITION reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On TREGEXP reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On TRANSITION reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On PREDICATE reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On METATRANSITION reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On INVARIANT reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On INIT reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On HIDETRANSITION reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On CONST reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 
-- On ARRAY reduce production array_decl -> ARRAY mident LEFTSQ lident_list_plus RIGHTSQ COLON lident 

State 33:
separated_nonempty_list(COMMA,lident) -> lident . [ RIGHTSQ RIGHTPAR ]
separated_nonempty_list(COMMA,lident) -> lident . COMMA separated_nonempty_list(COMMA,lident) [ RIGHTSQ RIGHTPAR ]
-- On COMMA shift to state 34
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,lident) -> lident 
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,lident) -> lident 

State 34:
separated_nonempty_list(COMMA,lident) -> lident COMMA . separated_nonempty_list(COMMA,lident) [ RIGHTSQ RIGHTPAR ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(COMMA,lident) shift to state 35
-- On lident shift to state 33

State 35:
separated_nonempty_list(COMMA,lident) -> lident COMMA separated_nonempty_list(COMMA,lident) . [ RIGHTSQ RIGHTPAR ]
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,lident) -> lident COMMA separated_nonempty_list(COMMA,lident) 
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,lident) -> lident COMMA separated_nonempty_list(COMMA,lident) 

State 36:
symbold_decls -> var_decl . symbold_decls [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On VAR shift to state 17
-- On CONST shift to state 21
-- On ARRAY shift to state 25
-- On var_decl shift to state 36
-- On symbold_decls shift to state 37
-- On const_decl shift to state 38
-- On array_decl shift to state 40
-- On UNSAFE reduce production symbold_decls -> 
-- On UNIVTRANSITION reduce production symbold_decls -> 
-- On TREGEXP reduce production symbold_decls -> 
-- On TRANSITION reduce production symbold_decls -> 
-- On PREDICATE reduce production symbold_decls -> 
-- On METATRANSITION reduce production symbold_decls -> 
-- On INVARIANT reduce production symbold_decls -> 
-- On INIT reduce production symbold_decls -> 
-- On HIDETRANSITION reduce production symbold_decls -> 

State 37:
symbold_decls -> var_decl symbold_decls . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On UNSAFE reduce production symbold_decls -> var_decl symbold_decls 
-- On UNIVTRANSITION reduce production symbold_decls -> var_decl symbold_decls 
-- On TREGEXP reduce production symbold_decls -> var_decl symbold_decls 
-- On TRANSITION reduce production symbold_decls -> var_decl symbold_decls 
-- On PREDICATE reduce production symbold_decls -> var_decl symbold_decls 
-- On METATRANSITION reduce production symbold_decls -> var_decl symbold_decls 
-- On INVARIANT reduce production symbold_decls -> var_decl symbold_decls 
-- On INIT reduce production symbold_decls -> var_decl symbold_decls 
-- On HIDETRANSITION reduce production symbold_decls -> var_decl symbold_decls 

State 38:
symbold_decls -> const_decl . symbold_decls [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On VAR shift to state 17
-- On CONST shift to state 21
-- On ARRAY shift to state 25
-- On var_decl shift to state 36
-- On symbold_decls shift to state 39
-- On const_decl shift to state 38
-- On array_decl shift to state 40
-- On UNSAFE reduce production symbold_decls -> 
-- On UNIVTRANSITION reduce production symbold_decls -> 
-- On TREGEXP reduce production symbold_decls -> 
-- On TRANSITION reduce production symbold_decls -> 
-- On PREDICATE reduce production symbold_decls -> 
-- On METATRANSITION reduce production symbold_decls -> 
-- On INVARIANT reduce production symbold_decls -> 
-- On INIT reduce production symbold_decls -> 
-- On HIDETRANSITION reduce production symbold_decls -> 

State 39:
symbold_decls -> const_decl symbold_decls . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On UNSAFE reduce production symbold_decls -> const_decl symbold_decls 
-- On UNIVTRANSITION reduce production symbold_decls -> const_decl symbold_decls 
-- On TREGEXP reduce production symbold_decls -> const_decl symbold_decls 
-- On TRANSITION reduce production symbold_decls -> const_decl symbold_decls 
-- On PREDICATE reduce production symbold_decls -> const_decl symbold_decls 
-- On METATRANSITION reduce production symbold_decls -> const_decl symbold_decls 
-- On INVARIANT reduce production symbold_decls -> const_decl symbold_decls 
-- On INIT reduce production symbold_decls -> const_decl symbold_decls 
-- On HIDETRANSITION reduce production symbold_decls -> const_decl symbold_decls 

State 40:
symbold_decls -> array_decl . symbold_decls [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On VAR shift to state 17
-- On CONST shift to state 21
-- On ARRAY shift to state 25
-- On var_decl shift to state 36
-- On symbold_decls shift to state 41
-- On const_decl shift to state 38
-- On array_decl shift to state 40
-- On UNSAFE reduce production symbold_decls -> 
-- On UNIVTRANSITION reduce production symbold_decls -> 
-- On TREGEXP reduce production symbold_decls -> 
-- On TRANSITION reduce production symbold_decls -> 
-- On PREDICATE reduce production symbold_decls -> 
-- On METATRANSITION reduce production symbold_decls -> 
-- On INVARIANT reduce production symbold_decls -> 
-- On INIT reduce production symbold_decls -> 
-- On HIDETRANSITION reduce production symbold_decls -> 

State 41:
symbold_decls -> array_decl symbold_decls . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION ]
-- On UNSAFE reduce production symbold_decls -> array_decl symbold_decls 
-- On UNIVTRANSITION reduce production symbold_decls -> array_decl symbold_decls 
-- On TREGEXP reduce production symbold_decls -> array_decl symbold_decls 
-- On TRANSITION reduce production symbold_decls -> array_decl symbold_decls 
-- On PREDICATE reduce production symbold_decls -> array_decl symbold_decls 
-- On METATRANSITION reduce production symbold_decls -> array_decl symbold_decls 
-- On INVARIANT reduce production symbold_decls -> array_decl symbold_decls 
-- On INIT reduce production symbold_decls -> array_decl symbold_decls 
-- On HIDETRANSITION reduce production symbold_decls -> array_decl symbold_decls 

State 42:
system -> size_proc type_defs symbold_decls . decl_list EOF [ # ]
-- On UNSAFE shift to state 43
-- On UNIVTRANSITION shift to state 185
-- On TREGEXP shift to state 186
-- On TRANSITION shift to state 212
-- On PREDICATE shift to state 213
-- On METATRANSITION shift to state 223
-- On INVARIANT shift to state 224
-- On INIT shift to state 234
-- On HIDETRANSITION shift to state 244
-- On unsafe shift to state 250
-- On transition_type shift to state 251
-- On transition_decl shift to state 293
-- On nonempty_list(decl) shift to state 294
-- On invariant shift to state 295
-- On init shift to state 296
-- On hide_transition shift to state 297
-- On function_decl shift to state 298
-- On decl_regexp shift to state 299
-- On decl_list shift to state 300
-- On decl shift to state 302

State 43:
unsafe -> UNSAFE . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
unsafe -> UNSAFE . LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTPAR shift to state 44
-- On LEFTBR shift to state 182

State 44:
unsafe -> UNSAFE LEFTPAR . lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 45
-- On lidents shift to state 46
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 45:
lidents -> list(lident) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production lidents -> list(lident) 

State 46:
unsafe -> UNSAFE LEFTPAR lidents . RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTPAR shift to state 47

State 47:
unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTBR shift to state 48

State 48:
unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 178
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 49:
literal -> TRUE . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> TRUE 
-- On RIGHTPAR reduce production literal -> TRUE 
-- On RIGHTBR reduce production literal -> TRUE 
-- On OR reduce production literal -> TRUE 
-- On IMP reduce production literal -> TRUE 
-- On EQUIV reduce production literal -> TRUE 
-- On ELSE reduce production literal -> TRUE 
-- On COMMA reduce production literal -> TRUE 
-- On COLON reduce production literal -> TRUE 
-- On AND reduce production literal -> TRUE 

State 50:
constnum -> REAL . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production constnum -> REAL 
-- On RIGHTPAR reduce production constnum -> REAL 
-- On RIGHTBR reduce production constnum -> REAL 
-- On PV reduce production constnum -> REAL 
-- On OR reduce production constnum -> REAL 
-- On NEQ reduce production constnum -> REAL 
-- On LT reduce production constnum -> REAL 
-- On LE reduce production constnum -> REAL 
-- On IMP reduce production constnum -> REAL 
-- On GT reduce production constnum -> REAL 
-- On GE reduce production constnum -> REAL 
-- On EQUIV reduce production constnum -> REAL 
-- On EQ reduce production constnum -> REAL 
-- On ELSE reduce production constnum -> REAL 
-- On COMMA reduce production constnum -> REAL 
-- On COLON reduce production constnum -> REAL 
-- On BAR reduce production constnum -> REAL 
-- On AND reduce production constnum -> REAL 

State 51:
expr -> NOT . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 177
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 52:
arith_term -> MINUS . INT TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On INT shift to state 53

State 53:
arith_term -> MINUS INT . TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 54

State 54:
arith_term -> MINUS INT TIMES . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On MIDENT shift to state 9
-- On mident shift to state 55

State 55:
arith_term -> MINUS INT TIMES mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> MINUS INT TIMES mident 
-- On RIGHTPAR reduce production arith_term -> MINUS INT TIMES mident 
-- On RIGHTBR reduce production arith_term -> MINUS INT TIMES mident 
-- On PV reduce production arith_term -> MINUS INT TIMES mident 
-- On OR reduce production arith_term -> MINUS INT TIMES mident 
-- On NEQ reduce production arith_term -> MINUS INT TIMES mident 
-- On LT reduce production arith_term -> MINUS INT TIMES mident 
-- On LE reduce production arith_term -> MINUS INT TIMES mident 
-- On IMP reduce production arith_term -> MINUS INT TIMES mident 
-- On GT reduce production arith_term -> MINUS INT TIMES mident 
-- On GE reduce production arith_term -> MINUS INT TIMES mident 
-- On EQUIV reduce production arith_term -> MINUS INT TIMES mident 
-- On EQ reduce production arith_term -> MINUS INT TIMES mident 
-- On ELSE reduce production arith_term -> MINUS INT TIMES mident 
-- On COMMA reduce production arith_term -> MINUS INT TIMES mident 
-- On COLON reduce production arith_term -> MINUS INT TIMES mident 
-- On BAR reduce production arith_term -> MINUS INT TIMES mident 
-- On AND reduce production arith_term -> MINUS INT TIMES mident 

State 56:
simple_expr -> LEFTPAR . expr RIGHTPAR [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 175
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 57:
arith_term -> INT . TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
constnum -> INT . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 58
-- On THEN reduce production constnum -> INT 
-- On RIGHTPAR reduce production constnum -> INT 
-- On RIGHTBR reduce production constnum -> INT 
-- On PV reduce production constnum -> INT 
-- On OR reduce production constnum -> INT 
-- On NEQ reduce production constnum -> INT 
-- On LT reduce production constnum -> INT 
-- On LE reduce production constnum -> INT 
-- On IMP reduce production constnum -> INT 
-- On GT reduce production constnum -> INT 
-- On GE reduce production constnum -> INT 
-- On EQUIV reduce production constnum -> INT 
-- On EQ reduce production constnum -> INT 
-- On ELSE reduce production constnum -> INT 
-- On COMMA reduce production constnum -> INT 
-- On COLON reduce production constnum -> INT 
-- On BAR reduce production constnum -> INT 
-- On AND reduce production constnum -> INT 

State 58:
arith_term -> INT TIMES . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On MIDENT shift to state 9
-- On mident shift to state 59

State 59:
arith_term -> INT TIMES mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> INT TIMES mident 
-- On RIGHTPAR reduce production arith_term -> INT TIMES mident 
-- On RIGHTBR reduce production arith_term -> INT TIMES mident 
-- On PV reduce production arith_term -> INT TIMES mident 
-- On OR reduce production arith_term -> INT TIMES mident 
-- On NEQ reduce production arith_term -> INT TIMES mident 
-- On LT reduce production arith_term -> INT TIMES mident 
-- On LE reduce production arith_term -> INT TIMES mident 
-- On IMP reduce production arith_term -> INT TIMES mident 
-- On GT reduce production arith_term -> INT TIMES mident 
-- On GE reduce production arith_term -> INT TIMES mident 
-- On EQUIV reduce production arith_term -> INT TIMES mident 
-- On EQ reduce production arith_term -> INT TIMES mident 
-- On ELSE reduce production arith_term -> INT TIMES mident 
-- On COMMA reduce production arith_term -> INT TIMES mident 
-- On COLON reduce production arith_term -> INT TIMES mident 
-- On BAR reduce production arith_term -> INT TIMES mident 
-- On AND reduce production arith_term -> INT TIMES mident 

State 60:
expr -> IF . expr THEN expr ELSE expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 170
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 61:
expr -> HASH . LEFTBR lident DOT expr RIGHTBR EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH . LEFTBR lident DOT expr RIGHTBR NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH . LEFTBR lident DOT expr RIGHTBR LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH . LEFTBR lident DOT expr RIGHTBR LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH . LEFTBR lident DOT expr RIGHTBR GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH . LEFTBR lident DOT expr RIGHTBR GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LEFTBR shift to state 62

State 62:
expr -> HASH LEFTBR . lident DOT expr RIGHTBR EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR . lident DOT expr RIGHTBR NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR . lident DOT expr RIGHTBR LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR . lident DOT expr RIGHTBR LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR . lident DOT expr RIGHTBR GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR . lident DOT expr RIGHTBR GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LIDENT shift to state 6
-- On lident shift to state 63

State 63:
expr -> HASH LEFTBR lident . DOT expr RIGHTBR EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident . DOT expr RIGHTBR NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident . DOT expr RIGHTBR LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident . DOT expr RIGHTBR LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident . DOT expr RIGHTBR GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident . DOT expr RIGHTBR GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On DOT shift to state 64

State 64:
expr -> HASH LEFTBR lident DOT . expr RIGHTBR EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT . expr RIGHTBR NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT . expr RIGHTBR LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT . expr RIGHTBR LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT . expr RIGHTBR GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT . expr RIGHTBR GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 153
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 65:
expr -> FORALL_OTHER . lident DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LIDENT shift to state 6
-- On lident shift to state 66

State 66:
expr -> FORALL_OTHER lident . DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On DOT shift to state 67

State 67:
expr -> FORALL_OTHER lident DOT . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 152
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 68:
expr -> FORALL . lidents_plus_distinct DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(NEQ,lident) shift to state 69
-- On lidents_plus_distinct shift to state 70
-- On lident shift to state 147

State 69:
lidents_plus_distinct -> separated_nonempty_list(NEQ,lident) . [ DOT ]
-- On DOT reduce production lidents_plus_distinct -> separated_nonempty_list(NEQ,lident) 

State 70:
expr -> FORALL lidents_plus_distinct . DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On DOT shift to state 71

State 71:
expr -> FORALL lidents_plus_distinct DOT . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 151
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 72:
literal -> FALSE . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> FALSE 
-- On RIGHTPAR reduce production literal -> FALSE 
-- On RIGHTBR reduce production literal -> FALSE 
-- On OR reduce production literal -> FALSE 
-- On IMP reduce production literal -> FALSE 
-- On EQUIV reduce production literal -> FALSE 
-- On ELSE reduce production literal -> FALSE 
-- On COMMA reduce production literal -> FALSE 
-- On COLON reduce production literal -> FALSE 
-- On AND reduce production literal -> FALSE 

State 73:
expr -> EXISTS_OTHER . lident DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LIDENT shift to state 6
-- On lident shift to state 74

State 74:
expr -> EXISTS_OTHER lident . DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On DOT shift to state 75

State 75:
expr -> EXISTS_OTHER lident DOT . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 150
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 76:
expr -> EXISTS . lidents_plus_distinct DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(NEQ,lident) shift to state 69
-- On lidents_plus_distinct shift to state 77
-- On lident shift to state 147

State 77:
expr -> EXISTS lidents_plus_distinct . DOT expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On DOT shift to state 78

State 78:
expr -> EXISTS lidents_plus_distinct DOT . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 146
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 79:
const_proc -> CONSTPROC . [ THEN RIGHTSQ RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production const_proc -> CONSTPROC 
-- On RIGHTSQ reduce production const_proc -> CONSTPROC 
-- On RIGHTPAR reduce production const_proc -> CONSTPROC 
-- On RIGHTBR reduce production const_proc -> CONSTPROC 
-- On PV reduce production const_proc -> CONSTPROC 
-- On PLUS reduce production const_proc -> CONSTPROC 
-- On OR reduce production const_proc -> CONSTPROC 
-- On NEQ reduce production const_proc -> CONSTPROC 
-- On MINUS reduce production const_proc -> CONSTPROC 
-- On LT reduce production const_proc -> CONSTPROC 
-- On LE reduce production const_proc -> CONSTPROC 
-- On IMP reduce production const_proc -> CONSTPROC 
-- On GT reduce production const_proc -> CONSTPROC 
-- On GE reduce production const_proc -> CONSTPROC 
-- On EQUIV reduce production const_proc -> CONSTPROC 
-- On EQ reduce production const_proc -> CONSTPROC 
-- On ELSE reduce production const_proc -> CONSTPROC 
-- On COMMA reduce production const_proc -> CONSTPROC 
-- On COLON reduce production const_proc -> CONSTPROC 
-- On BAR reduce production const_proc -> CONSTPROC 
-- On AND reduce production const_proc -> CONSTPROC 

State 80:
top_id_term -> var_term . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
var_or_array_term -> var_term . [ PLUS MINUS ]
-- On THEN reduce production top_id_term -> var_term 
-- On RIGHTPAR reduce production top_id_term -> var_term 
-- On RIGHTBR reduce production top_id_term -> var_term 
-- On PV reduce production top_id_term -> var_term 
-- On PLUS reduce production var_or_array_term -> var_term 
-- On OR reduce production top_id_term -> var_term 
-- On NEQ reduce production top_id_term -> var_term 
-- On MINUS reduce production var_or_array_term -> var_term 
-- On LT reduce production top_id_term -> var_term 
-- On LE reduce production top_id_term -> var_term 
-- On IMP reduce production top_id_term -> var_term 
-- On GT reduce production top_id_term -> var_term 
-- On GE reduce production top_id_term -> var_term 
-- On EQUIV reduce production top_id_term -> var_term 
-- On EQ reduce production top_id_term -> var_term 
-- On ELSE reduce production top_id_term -> var_term 
-- On COMMA reduce production top_id_term -> var_term 
-- On COLON reduce production top_id_term -> var_term 
-- On BAR reduce production top_id_term -> var_term 
-- On AND reduce production top_id_term -> var_term 

State 81:
arith_term -> var_or_array_term . PLUS constnum [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . MINUS constnum [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . PLUS mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . PLUS INT TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . PLUS mident TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . MINUS mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . MINUS INT TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term . MINUS mident TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On PLUS shift to state 82
-- On MINUS shift to state 90

State 82:
arith_term -> var_or_array_term PLUS . constnum [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term PLUS . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term PLUS . INT TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term PLUS . mident TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On REAL shift to state 50
-- On MIDENT shift to state 9
-- On INT shift to state 83
-- On mident shift to state 86
-- On constnum shift to state 89

State 83:
arith_term -> var_or_array_term PLUS INT . TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
constnum -> INT . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 84
-- On THEN reduce production constnum -> INT 
-- On RIGHTPAR reduce production constnum -> INT 
-- On RIGHTBR reduce production constnum -> INT 
-- On PV reduce production constnum -> INT 
-- On OR reduce production constnum -> INT 
-- On NEQ reduce production constnum -> INT 
-- On LT reduce production constnum -> INT 
-- On LE reduce production constnum -> INT 
-- On IMP reduce production constnum -> INT 
-- On GT reduce production constnum -> INT 
-- On GE reduce production constnum -> INT 
-- On EQUIV reduce production constnum -> INT 
-- On EQ reduce production constnum -> INT 
-- On ELSE reduce production constnum -> INT 
-- On COMMA reduce production constnum -> INT 
-- On COLON reduce production constnum -> INT 
-- On BAR reduce production constnum -> INT 
-- On AND reduce production constnum -> INT 

State 84:
arith_term -> var_or_array_term PLUS INT TIMES . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On MIDENT shift to state 9
-- On mident shift to state 85

State 85:
arith_term -> var_or_array_term PLUS INT TIMES mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On RIGHTBR reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On PV reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On OR reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On NEQ reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On LT reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On LE reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On IMP reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On GT reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On GE reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On EQUIV reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On EQ reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On ELSE reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On COMMA reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On COLON reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On BAR reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 
-- On AND reduce production arith_term -> var_or_array_term PLUS INT TIMES mident 

State 86:
arith_term -> var_or_array_term PLUS mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term PLUS mident . TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 87
-- On THEN reduce production arith_term -> var_or_array_term PLUS mident 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term PLUS mident 
-- On RIGHTBR reduce production arith_term -> var_or_array_term PLUS mident 
-- On PV reduce production arith_term -> var_or_array_term PLUS mident 
-- On OR reduce production arith_term -> var_or_array_term PLUS mident 
-- On NEQ reduce production arith_term -> var_or_array_term PLUS mident 
-- On LT reduce production arith_term -> var_or_array_term PLUS mident 
-- On LE reduce production arith_term -> var_or_array_term PLUS mident 
-- On IMP reduce production arith_term -> var_or_array_term PLUS mident 
-- On GT reduce production arith_term -> var_or_array_term PLUS mident 
-- On GE reduce production arith_term -> var_or_array_term PLUS mident 
-- On EQUIV reduce production arith_term -> var_or_array_term PLUS mident 
-- On EQ reduce production arith_term -> var_or_array_term PLUS mident 
-- On ELSE reduce production arith_term -> var_or_array_term PLUS mident 
-- On COMMA reduce production arith_term -> var_or_array_term PLUS mident 
-- On COLON reduce production arith_term -> var_or_array_term PLUS mident 
-- On BAR reduce production arith_term -> var_or_array_term PLUS mident 
-- On AND reduce production arith_term -> var_or_array_term PLUS mident 

State 87:
arith_term -> var_or_array_term PLUS mident TIMES . INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On INT shift to state 88

State 88:
arith_term -> var_or_array_term PLUS mident TIMES INT . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On RIGHTBR reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On PV reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On OR reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On NEQ reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On LT reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On LE reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On IMP reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On GT reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On GE reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On EQUIV reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On EQ reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On ELSE reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On COMMA reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On COLON reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On BAR reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 
-- On AND reduce production arith_term -> var_or_array_term PLUS mident TIMES INT 

State 89:
arith_term -> var_or_array_term PLUS constnum . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term PLUS constnum 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term PLUS constnum 
-- On RIGHTBR reduce production arith_term -> var_or_array_term PLUS constnum 
-- On PV reduce production arith_term -> var_or_array_term PLUS constnum 
-- On OR reduce production arith_term -> var_or_array_term PLUS constnum 
-- On NEQ reduce production arith_term -> var_or_array_term PLUS constnum 
-- On LT reduce production arith_term -> var_or_array_term PLUS constnum 
-- On LE reduce production arith_term -> var_or_array_term PLUS constnum 
-- On IMP reduce production arith_term -> var_or_array_term PLUS constnum 
-- On GT reduce production arith_term -> var_or_array_term PLUS constnum 
-- On GE reduce production arith_term -> var_or_array_term PLUS constnum 
-- On EQUIV reduce production arith_term -> var_or_array_term PLUS constnum 
-- On EQ reduce production arith_term -> var_or_array_term PLUS constnum 
-- On ELSE reduce production arith_term -> var_or_array_term PLUS constnum 
-- On COMMA reduce production arith_term -> var_or_array_term PLUS constnum 
-- On COLON reduce production arith_term -> var_or_array_term PLUS constnum 
-- On BAR reduce production arith_term -> var_or_array_term PLUS constnum 
-- On AND reduce production arith_term -> var_or_array_term PLUS constnum 

State 90:
arith_term -> var_or_array_term MINUS . constnum [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term MINUS . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term MINUS . INT TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term MINUS . mident TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On REAL shift to state 50
-- On MIDENT shift to state 9
-- On INT shift to state 91
-- On mident shift to state 94
-- On constnum shift to state 97

State 91:
arith_term -> var_or_array_term MINUS INT . TIMES mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
constnum -> INT . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 92
-- On THEN reduce production constnum -> INT 
-- On RIGHTPAR reduce production constnum -> INT 
-- On RIGHTBR reduce production constnum -> INT 
-- On PV reduce production constnum -> INT 
-- On OR reduce production constnum -> INT 
-- On NEQ reduce production constnum -> INT 
-- On LT reduce production constnum -> INT 
-- On LE reduce production constnum -> INT 
-- On IMP reduce production constnum -> INT 
-- On GT reduce production constnum -> INT 
-- On GE reduce production constnum -> INT 
-- On EQUIV reduce production constnum -> INT 
-- On EQ reduce production constnum -> INT 
-- On ELSE reduce production constnum -> INT 
-- On COMMA reduce production constnum -> INT 
-- On COLON reduce production constnum -> INT 
-- On BAR reduce production constnum -> INT 
-- On AND reduce production constnum -> INT 

State 92:
arith_term -> var_or_array_term MINUS INT TIMES . mident [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On MIDENT shift to state 9
-- On mident shift to state 93

State 93:
arith_term -> var_or_array_term MINUS INT TIMES mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On RIGHTBR reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On PV reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On OR reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On NEQ reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On LT reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On LE reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On IMP reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On GT reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On GE reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On EQUIV reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On EQ reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On ELSE reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On COMMA reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On COLON reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On BAR reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 
-- On AND reduce production arith_term -> var_or_array_term MINUS INT TIMES mident 

State 94:
arith_term -> var_or_array_term MINUS mident . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
arith_term -> var_or_array_term MINUS mident . TIMES INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On TIMES shift to state 95
-- On THEN reduce production arith_term -> var_or_array_term MINUS mident 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term MINUS mident 
-- On RIGHTBR reduce production arith_term -> var_or_array_term MINUS mident 
-- On PV reduce production arith_term -> var_or_array_term MINUS mident 
-- On OR reduce production arith_term -> var_or_array_term MINUS mident 
-- On NEQ reduce production arith_term -> var_or_array_term MINUS mident 
-- On LT reduce production arith_term -> var_or_array_term MINUS mident 
-- On LE reduce production arith_term -> var_or_array_term MINUS mident 
-- On IMP reduce production arith_term -> var_or_array_term MINUS mident 
-- On GT reduce production arith_term -> var_or_array_term MINUS mident 
-- On GE reduce production arith_term -> var_or_array_term MINUS mident 
-- On EQUIV reduce production arith_term -> var_or_array_term MINUS mident 
-- On EQ reduce production arith_term -> var_or_array_term MINUS mident 
-- On ELSE reduce production arith_term -> var_or_array_term MINUS mident 
-- On COMMA reduce production arith_term -> var_or_array_term MINUS mident 
-- On COLON reduce production arith_term -> var_or_array_term MINUS mident 
-- On BAR reduce production arith_term -> var_or_array_term MINUS mident 
-- On AND reduce production arith_term -> var_or_array_term MINUS mident 

State 95:
arith_term -> var_or_array_term MINUS mident TIMES . INT [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On INT shift to state 96

State 96:
arith_term -> var_or_array_term MINUS mident TIMES INT . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On RIGHTBR reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On PV reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On OR reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On NEQ reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On LT reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On LE reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On IMP reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On GT reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On GE reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On EQUIV reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On EQ reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On ELSE reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On COMMA reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On COLON reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On BAR reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 
-- On AND reduce production arith_term -> var_or_array_term MINUS mident TIMES INT 

State 97:
arith_term -> var_or_array_term MINUS constnum . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> var_or_array_term MINUS constnum 
-- On RIGHTPAR reduce production arith_term -> var_or_array_term MINUS constnum 
-- On RIGHTBR reduce production arith_term -> var_or_array_term MINUS constnum 
-- On PV reduce production arith_term -> var_or_array_term MINUS constnum 
-- On OR reduce production arith_term -> var_or_array_term MINUS constnum 
-- On NEQ reduce production arith_term -> var_or_array_term MINUS constnum 
-- On LT reduce production arith_term -> var_or_array_term MINUS constnum 
-- On LE reduce production arith_term -> var_or_array_term MINUS constnum 
-- On IMP reduce production arith_term -> var_or_array_term MINUS constnum 
-- On GT reduce production arith_term -> var_or_array_term MINUS constnum 
-- On GE reduce production arith_term -> var_or_array_term MINUS constnum 
-- On EQUIV reduce production arith_term -> var_or_array_term MINUS constnum 
-- On EQ reduce production arith_term -> var_or_array_term MINUS constnum 
-- On ELSE reduce production arith_term -> var_or_array_term MINUS constnum 
-- On COMMA reduce production arith_term -> var_or_array_term MINUS constnum 
-- On COLON reduce production arith_term -> var_or_array_term MINUS constnum 
-- On BAR reduce production arith_term -> var_or_array_term MINUS constnum 
-- On AND reduce production arith_term -> var_or_array_term MINUS constnum 

State 98:
term -> top_id_term . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production term -> top_id_term 
-- On RIGHTPAR reduce production term -> top_id_term 
-- On RIGHTBR reduce production term -> top_id_term 
-- On PV reduce production term -> top_id_term 
-- On OR reduce production term -> top_id_term 
-- On NEQ reduce production term -> top_id_term 
-- On LT reduce production term -> top_id_term 
-- On LE reduce production term -> top_id_term 
-- On IMP reduce production term -> top_id_term 
-- On GT reduce production term -> top_id_term 
-- On GE reduce production term -> top_id_term 
-- On EQUIV reduce production term -> top_id_term 
-- On EQ reduce production term -> top_id_term 
-- On ELSE reduce production term -> top_id_term 
-- On COMMA reduce production term -> top_id_term 
-- On COLON reduce production term -> top_id_term 
-- On BAR reduce production term -> top_id_term 
-- On AND reduce production term -> top_id_term 

State 99:
literal -> term . EQ term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
literal -> term . NEQ term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
literal -> term . LT term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
literal -> term . LE term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
literal -> term . GT term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
literal -> term . GE term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On NEQ shift to state 100
-- On LT shift to state 116
-- On LE shift to state 118
-- On GT shift to state 120
-- On GE shift to state 122
-- On EQ shift to state 124

State 100:
literal -> term NEQ . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 101
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 101:
literal -> term NEQ term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term NEQ term 
-- On RIGHTPAR reduce production literal -> term NEQ term 
-- On RIGHTBR reduce production literal -> term NEQ term 
-- On OR reduce production literal -> term NEQ term 
-- On IMP reduce production literal -> term NEQ term 
-- On EQUIV reduce production literal -> term NEQ term 
-- On ELSE reduce production literal -> term NEQ term 
-- On COMMA reduce production literal -> term NEQ term 
-- On COLON reduce production literal -> term NEQ term 
-- On AND reduce production literal -> term NEQ term 

State 102:
var_term -> proc_name . [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production var_term -> proc_name 
-- On RIGHTPAR reduce production var_term -> proc_name 
-- On RIGHTBR reduce production var_term -> proc_name 
-- On PV reduce production var_term -> proc_name 
-- On PLUS reduce production var_term -> proc_name 
-- On OR reduce production var_term -> proc_name 
-- On NEQ reduce production var_term -> proc_name 
-- On MINUS reduce production var_term -> proc_name 
-- On LT reduce production var_term -> proc_name 
-- On LE reduce production var_term -> proc_name 
-- On IMP reduce production var_term -> proc_name 
-- On GT reduce production var_term -> proc_name 
-- On GE reduce production var_term -> proc_name 
-- On EQUIV reduce production var_term -> proc_name 
-- On EQ reduce production var_term -> proc_name 
-- On ELSE reduce production var_term -> proc_name 
-- On COMMA reduce production var_term -> proc_name 
-- On COLON reduce production var_term -> proc_name 
-- On BAR reduce production var_term -> proc_name 
-- On AND reduce production var_term -> proc_name 

State 103:
array_term -> mident . LEFTSQ proc_name_list_plus RIGHTSQ [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
var_term -> mident . [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On LEFTSQ shift to state 104
-- On THEN reduce production var_term -> mident 
-- On RIGHTPAR reduce production var_term -> mident 
-- On RIGHTBR reduce production var_term -> mident 
-- On PV reduce production var_term -> mident 
-- On PLUS reduce production var_term -> mident 
-- On OR reduce production var_term -> mident 
-- On NEQ reduce production var_term -> mident 
-- On MINUS reduce production var_term -> mident 
-- On LT reduce production var_term -> mident 
-- On LE reduce production var_term -> mident 
-- On IMP reduce production var_term -> mident 
-- On GT reduce production var_term -> mident 
-- On GE reduce production var_term -> mident 
-- On EQUIV reduce production var_term -> mident 
-- On EQ reduce production var_term -> mident 
-- On ELSE reduce production var_term -> mident 
-- On COMMA reduce production var_term -> mident 
-- On COLON reduce production var_term -> mident 
-- On BAR reduce production var_term -> mident 
-- On AND reduce production var_term -> mident 

State 104:
array_term -> mident LEFTSQ . proc_name_list_plus RIGHTSQ [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On LIDENT shift to state 6
-- On CONSTPROC shift to state 79
-- On separated_nonempty_list(COMMA,proc_name) shift to state 105
-- On proc_name_list_plus shift to state 106
-- On proc_name shift to state 108
-- On lident shift to state 111
-- On const_proc shift to state 112

State 105:
proc_name_list_plus -> separated_nonempty_list(COMMA,proc_name) . [ RIGHTSQ ]
-- On RIGHTSQ reduce production proc_name_list_plus -> separated_nonempty_list(COMMA,proc_name) 

State 106:
array_term -> mident LEFTSQ proc_name_list_plus . RIGHTSQ [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On RIGHTSQ shift to state 107

State 107:
array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ . [ THEN RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On RIGHTPAR reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On RIGHTBR reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On PV reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On PLUS reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On OR reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On NEQ reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On MINUS reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On LT reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On LE reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On IMP reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On GT reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On GE reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On EQUIV reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On EQ reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On ELSE reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On COMMA reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On COLON reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On BAR reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 
-- On AND reduce production array_term -> mident LEFTSQ proc_name_list_plus RIGHTSQ 

State 108:
separated_nonempty_list(COMMA,proc_name) -> proc_name . [ RIGHTSQ ]
separated_nonempty_list(COMMA,proc_name) -> proc_name . COMMA separated_nonempty_list(COMMA,proc_name) [ RIGHTSQ ]
-- On COMMA shift to state 109
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,proc_name) -> proc_name 

State 109:
separated_nonempty_list(COMMA,proc_name) -> proc_name COMMA . separated_nonempty_list(COMMA,proc_name) [ RIGHTSQ ]
-- On LIDENT shift to state 6
-- On CONSTPROC shift to state 79
-- On separated_nonempty_list(COMMA,proc_name) shift to state 110
-- On proc_name shift to state 108
-- On lident shift to state 111
-- On const_proc shift to state 112

State 110:
separated_nonempty_list(COMMA,proc_name) -> proc_name COMMA separated_nonempty_list(COMMA,proc_name) . [ RIGHTSQ ]
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,proc_name) -> proc_name COMMA separated_nonempty_list(COMMA,proc_name) 

State 111:
proc_name -> lident . [ THEN RIGHTSQ RIGHTPAR RIGHTBR PV PLUS OR MINUS IMP EQUIV ELSE COMMA COLON BAR AND ]
-- On THEN reduce production proc_name -> lident 
-- On RIGHTSQ reduce production proc_name -> lident 
-- On RIGHTPAR reduce production proc_name -> lident 
-- On RIGHTBR reduce production proc_name -> lident 
-- On PV reduce production proc_name -> lident 
-- On PLUS reduce production proc_name -> lident 
-- On OR reduce production proc_name -> lident 
-- On MINUS reduce production proc_name -> lident 
-- On IMP reduce production proc_name -> lident 
-- On EQUIV reduce production proc_name -> lident 
-- On ELSE reduce production proc_name -> lident 
-- On COMMA reduce production proc_name -> lident 
-- On COLON reduce production proc_name -> lident 
-- On BAR reduce production proc_name -> lident 
-- On AND reduce production proc_name -> lident 

State 112:
proc_name -> const_proc . [ THEN RIGHTSQ RIGHTPAR RIGHTBR PV PLUS OR NEQ MINUS LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production proc_name -> const_proc 
-- On RIGHTSQ reduce production proc_name -> const_proc 
-- On RIGHTPAR reduce production proc_name -> const_proc 
-- On RIGHTBR reduce production proc_name -> const_proc 
-- On PV reduce production proc_name -> const_proc 
-- On PLUS reduce production proc_name -> const_proc 
-- On OR reduce production proc_name -> const_proc 
-- On NEQ reduce production proc_name -> const_proc 
-- On MINUS reduce production proc_name -> const_proc 
-- On LT reduce production proc_name -> const_proc 
-- On LE reduce production proc_name -> const_proc 
-- On IMP reduce production proc_name -> const_proc 
-- On GT reduce production proc_name -> const_proc 
-- On GE reduce production proc_name -> const_proc 
-- On EQUIV reduce production proc_name -> const_proc 
-- On EQ reduce production proc_name -> const_proc 
-- On ELSE reduce production proc_name -> const_proc 
-- On COMMA reduce production proc_name -> const_proc 
-- On COLON reduce production proc_name -> const_proc 
-- On BAR reduce production proc_name -> const_proc 
-- On AND reduce production proc_name -> const_proc 

State 113:
arith_term -> constnum . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production arith_term -> constnum 
-- On RIGHTPAR reduce production arith_term -> constnum 
-- On RIGHTBR reduce production arith_term -> constnum 
-- On PV reduce production arith_term -> constnum 
-- On OR reduce production arith_term -> constnum 
-- On NEQ reduce production arith_term -> constnum 
-- On LT reduce production arith_term -> constnum 
-- On LE reduce production arith_term -> constnum 
-- On IMP reduce production arith_term -> constnum 
-- On GT reduce production arith_term -> constnum 
-- On GE reduce production arith_term -> constnum 
-- On EQUIV reduce production arith_term -> constnum 
-- On EQ reduce production arith_term -> constnum 
-- On ELSE reduce production arith_term -> constnum 
-- On COMMA reduce production arith_term -> constnum 
-- On COLON reduce production arith_term -> constnum 
-- On BAR reduce production arith_term -> constnum 
-- On AND reduce production arith_term -> constnum 

State 114:
term -> array_term . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
var_or_array_term -> array_term . [ PLUS MINUS ]
-- On THEN reduce production term -> array_term 
-- On RIGHTPAR reduce production term -> array_term 
-- On RIGHTBR reduce production term -> array_term 
-- On PV reduce production term -> array_term 
-- On PLUS reduce production var_or_array_term -> array_term 
-- On OR reduce production term -> array_term 
-- On NEQ reduce production term -> array_term 
-- On MINUS reduce production var_or_array_term -> array_term 
-- On LT reduce production term -> array_term 
-- On LE reduce production term -> array_term 
-- On IMP reduce production term -> array_term 
-- On GT reduce production term -> array_term 
-- On GE reduce production term -> array_term 
-- On EQUIV reduce production term -> array_term 
-- On EQ reduce production term -> array_term 
-- On ELSE reduce production term -> array_term 
-- On COMMA reduce production term -> array_term 
-- On COLON reduce production term -> array_term 
-- On BAR reduce production term -> array_term 
-- On AND reduce production term -> array_term 

State 115:
term -> arith_term . [ THEN RIGHTPAR RIGHTBR PV OR NEQ LT LE IMP GT GE EQUIV EQ ELSE COMMA COLON BAR AND ]
-- On THEN reduce production term -> arith_term 
-- On RIGHTPAR reduce production term -> arith_term 
-- On RIGHTBR reduce production term -> arith_term 
-- On PV reduce production term -> arith_term 
-- On OR reduce production term -> arith_term 
-- On NEQ reduce production term -> arith_term 
-- On LT reduce production term -> arith_term 
-- On LE reduce production term -> arith_term 
-- On IMP reduce production term -> arith_term 
-- On GT reduce production term -> arith_term 
-- On GE reduce production term -> arith_term 
-- On EQUIV reduce production term -> arith_term 
-- On EQ reduce production term -> arith_term 
-- On ELSE reduce production term -> arith_term 
-- On COMMA reduce production term -> arith_term 
-- On COLON reduce production term -> arith_term 
-- On BAR reduce production term -> arith_term 
-- On AND reduce production term -> arith_term 

State 116:
literal -> term LT . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 117
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 117:
literal -> term LT term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term LT term 
-- On RIGHTPAR reduce production literal -> term LT term 
-- On RIGHTBR reduce production literal -> term LT term 
-- On OR reduce production literal -> term LT term 
-- On IMP reduce production literal -> term LT term 
-- On EQUIV reduce production literal -> term LT term 
-- On ELSE reduce production literal -> term LT term 
-- On COMMA reduce production literal -> term LT term 
-- On COLON reduce production literal -> term LT term 
-- On AND reduce production literal -> term LT term 

State 118:
literal -> term LE . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 119
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 119:
literal -> term LE term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term LE term 
-- On RIGHTPAR reduce production literal -> term LE term 
-- On RIGHTBR reduce production literal -> term LE term 
-- On OR reduce production literal -> term LE term 
-- On IMP reduce production literal -> term LE term 
-- On EQUIV reduce production literal -> term LE term 
-- On ELSE reduce production literal -> term LE term 
-- On COMMA reduce production literal -> term LE term 
-- On COLON reduce production literal -> term LE term 
-- On AND reduce production literal -> term LE term 

State 120:
literal -> term GT . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 121
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 121:
literal -> term GT term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term GT term 
-- On RIGHTPAR reduce production literal -> term GT term 
-- On RIGHTBR reduce production literal -> term GT term 
-- On OR reduce production literal -> term GT term 
-- On IMP reduce production literal -> term GT term 
-- On EQUIV reduce production literal -> term GT term 
-- On ELSE reduce production literal -> term GT term 
-- On COMMA reduce production literal -> term GT term 
-- On COLON reduce production literal -> term GT term 
-- On AND reduce production literal -> term GT term 

State 122:
literal -> term GE . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 123
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 123:
literal -> term GE term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term GE term 
-- On RIGHTPAR reduce production literal -> term GE term 
-- On RIGHTBR reduce production literal -> term GE term 
-- On OR reduce production literal -> term GE term 
-- On IMP reduce production literal -> term GE term 
-- On EQUIV reduce production literal -> term GE term 
-- On ELSE reduce production literal -> term GE term 
-- On COMMA reduce production literal -> term GE term 
-- On COLON reduce production literal -> term GE term 
-- On AND reduce production literal -> term GE term 

State 124:
literal -> term EQ . term [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 125
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 125:
literal -> term EQ term . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production literal -> term EQ term 
-- On RIGHTPAR reduce production literal -> term EQ term 
-- On RIGHTBR reduce production literal -> term EQ term 
-- On OR reduce production literal -> term EQ term 
-- On IMP reduce production literal -> term EQ term 
-- On EQUIV reduce production literal -> term EQ term 
-- On ELSE reduce production literal -> term EQ term 
-- On COMMA reduce production literal -> term EQ term 
-- On COLON reduce production literal -> term EQ term 
-- On AND reduce production literal -> term EQ term 

State 126:
expr -> simple_expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> simple_expr 
-- On RIGHTPAR reduce production expr -> simple_expr 
-- On RIGHTBR reduce production expr -> simple_expr 
-- On OR reduce production expr -> simple_expr 
-- On IMP reduce production expr -> simple_expr 
-- On EQUIV reduce production expr -> simple_expr 
-- On ELSE reduce production expr -> simple_expr 
-- On COMMA reduce production expr -> simple_expr 
-- On COLON reduce production expr -> simple_expr 
-- On AND reduce production expr -> simple_expr 

State 127:
simple_expr -> literal . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production simple_expr -> literal 
-- On RIGHTPAR reduce production simple_expr -> literal 
-- On RIGHTBR reduce production simple_expr -> literal 
-- On OR reduce production simple_expr -> literal 
-- On IMP reduce production simple_expr -> literal 
-- On EQUIV reduce production simple_expr -> literal 
-- On ELSE reduce production simple_expr -> literal 
-- On COMMA reduce production simple_expr -> literal 
-- On COLON reduce production simple_expr -> literal 
-- On AND reduce production simple_expr -> literal 

State 128:
proc_name -> lident . [ RIGHTPAR PLUS NEQ MINUS LT LE GT GE EQ COMMA ]
simple_expr -> lident . LEFTPAR expr_or_term_comma_list RIGHTPAR [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On LEFTPAR shift to state 129
-- On RIGHTPAR reduce production proc_name -> lident 
-- On PLUS reduce production proc_name -> lident 
-- On NEQ reduce production proc_name -> lident 
-- On MINUS reduce production proc_name -> lident 
-- On LT reduce production proc_name -> lident 
-- On LE reduce production proc_name -> lident 
-- On GT reduce production proc_name -> lident 
-- On GE reduce production proc_name -> lident 
-- On EQ reduce production proc_name -> lident 
-- On COMMA reduce production proc_name -> lident 

State 129:
simple_expr -> lident LEFTPAR . expr_or_term_comma_list RIGHTPAR [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 130
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr_or_term_comma_list shift to state 144
-- On expr shift to state 133
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115
-- On RIGHTPAR reduce production expr_or_term_comma_list -> 

State 130:
expr_or_term_comma_list -> term . [ RIGHTPAR ]
expr_or_term_comma_list -> term . COMMA expr_or_term_comma_list [ RIGHTPAR ]
literal -> term . EQ term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
literal -> term . NEQ term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
literal -> term . LT term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
literal -> term . LE term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
literal -> term . GT term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
literal -> term . GE term [ RIGHTPAR OR IMP EQUIV COMMA AND ]
-- On NEQ shift to state 100
-- On LT shift to state 116
-- On LE shift to state 118
-- On GT shift to state 120
-- On GE shift to state 122
-- On EQ shift to state 124
-- On COMMA shift to state 131
-- On RIGHTPAR reduce production expr_or_term_comma_list -> term 

State 131:
expr_or_term_comma_list -> term COMMA . expr_or_term_comma_list [ RIGHTPAR ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 130
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr_or_term_comma_list shift to state 132
-- On expr shift to state 133
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115
-- On RIGHTPAR reduce production expr_or_term_comma_list -> 

State 132:
expr_or_term_comma_list -> term COMMA expr_or_term_comma_list . [ RIGHTPAR ]
-- On RIGHTPAR reduce production expr_or_term_comma_list -> term COMMA expr_or_term_comma_list 

State 133:
expr -> expr . AND expr [ RIGHTPAR OR IMP EQUIV COMMA AND ]
expr -> expr . OR expr [ RIGHTPAR OR IMP EQUIV COMMA AND ]
expr -> expr . IMP expr [ RIGHTPAR OR IMP EQUIV COMMA AND ]
expr -> expr . EQUIV expr [ RIGHTPAR OR IMP EQUIV COMMA AND ]
expr_or_term_comma_list -> expr . [ RIGHTPAR ]
expr_or_term_comma_list -> expr . COMMA expr_or_term_comma_list [ RIGHTPAR ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On COMMA shift to state 142
-- On AND shift to state 136
-- On RIGHTPAR reduce production expr_or_term_comma_list -> expr 

State 134:
expr -> expr OR . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 135
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 135:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr OR expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On AND shift to state 136
-- On THEN reduce production expr -> expr OR expr 
-- On RIGHTPAR reduce production expr -> expr OR expr 
-- On RIGHTBR reduce production expr -> expr OR expr 
-- On IMP reduce production expr -> expr OR expr 
-- On EQUIV reduce production expr -> expr OR expr 
-- On ELSE reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 
-- On COLON reduce production expr -> expr OR expr 

State 136:
expr -> expr AND . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 137
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 137:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr AND expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On AND shift to state 136
-- On THEN reduce production expr -> expr AND expr 
-- On RIGHTPAR reduce production expr -> expr AND expr 
-- On RIGHTBR reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On IMP reduce production expr -> expr AND expr 
-- On EQUIV reduce production expr -> expr AND expr 
-- On ELSE reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On COLON reduce production expr -> expr AND expr 

State 138:
expr -> expr IMP . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 139
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 139:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr IMP expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> expr IMP expr 
-- On RIGHTPAR reduce production expr -> expr IMP expr 
-- On RIGHTBR reduce production expr -> expr IMP expr 
-- On ELSE reduce production expr -> expr IMP expr 
-- On COMMA reduce production expr -> expr IMP expr 
-- On COLON reduce production expr -> expr IMP expr 

State 140:
expr -> expr EQUIV . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 141
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 141:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr EQUIV expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> expr EQUIV expr 
-- On RIGHTPAR reduce production expr -> expr EQUIV expr 
-- On RIGHTBR reduce production expr -> expr EQUIV expr 
-- On ELSE reduce production expr -> expr EQUIV expr 
-- On COMMA reduce production expr -> expr EQUIV expr 
-- On COLON reduce production expr -> expr EQUIV expr 

State 142:
expr_or_term_comma_list -> expr COMMA . expr_or_term_comma_list [ RIGHTPAR ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 130
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr_or_term_comma_list shift to state 143
-- On expr shift to state 133
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115
-- On RIGHTPAR reduce production expr_or_term_comma_list -> 

State 143:
expr_or_term_comma_list -> expr COMMA expr_or_term_comma_list . [ RIGHTPAR ]
-- On RIGHTPAR reduce production expr_or_term_comma_list -> expr COMMA expr_or_term_comma_list 

State 144:
simple_expr -> lident LEFTPAR expr_or_term_comma_list . RIGHTPAR [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On RIGHTPAR shift to state 145

State 145:
simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On RIGHTPAR reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On RIGHTBR reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On OR reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On IMP reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On EQUIV reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On ELSE reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On COMMA reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On COLON reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 
-- On AND reduce production simple_expr -> lident LEFTPAR expr_or_term_comma_list RIGHTPAR 

State 146:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> EXISTS lidents_plus_distinct DOT expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> EXISTS lidents_plus_distinct DOT expr 
-- On RIGHTPAR reduce production expr -> EXISTS lidents_plus_distinct DOT expr 
-- On RIGHTBR reduce production expr -> EXISTS lidents_plus_distinct DOT expr 
-- On ELSE reduce production expr -> EXISTS lidents_plus_distinct DOT expr 
-- On COMMA reduce production expr -> EXISTS lidents_plus_distinct DOT expr 
-- On COLON reduce production expr -> EXISTS lidents_plus_distinct DOT expr 

State 147:
separated_nonempty_list(NEQ,lident) -> lident . [ DOT ]
separated_nonempty_list(NEQ,lident) -> lident . NEQ separated_nonempty_list(NEQ,lident) [ DOT ]
-- On NEQ shift to state 148
-- On DOT reduce production separated_nonempty_list(NEQ,lident) -> lident 

State 148:
separated_nonempty_list(NEQ,lident) -> lident NEQ . separated_nonempty_list(NEQ,lident) [ DOT ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(NEQ,lident) shift to state 149
-- On lident shift to state 147

State 149:
separated_nonempty_list(NEQ,lident) -> lident NEQ separated_nonempty_list(NEQ,lident) . [ DOT ]
-- On DOT reduce production separated_nonempty_list(NEQ,lident) -> lident NEQ separated_nonempty_list(NEQ,lident) 

State 150:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> EXISTS_OTHER lident DOT expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> EXISTS_OTHER lident DOT expr 
-- On RIGHTPAR reduce production expr -> EXISTS_OTHER lident DOT expr 
-- On RIGHTBR reduce production expr -> EXISTS_OTHER lident DOT expr 
-- On ELSE reduce production expr -> EXISTS_OTHER lident DOT expr 
-- On COMMA reduce production expr -> EXISTS_OTHER lident DOT expr 
-- On COLON reduce production expr -> EXISTS_OTHER lident DOT expr 

State 151:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> FORALL lidents_plus_distinct DOT expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> FORALL lidents_plus_distinct DOT expr 
-- On RIGHTPAR reduce production expr -> FORALL lidents_plus_distinct DOT expr 
-- On RIGHTBR reduce production expr -> FORALL lidents_plus_distinct DOT expr 
-- On ELSE reduce production expr -> FORALL lidents_plus_distinct DOT expr 
-- On COMMA reduce production expr -> FORALL lidents_plus_distinct DOT expr 
-- On COLON reduce production expr -> FORALL lidents_plus_distinct DOT expr 

State 152:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> FORALL_OTHER lident DOT expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136
-- On THEN reduce production expr -> FORALL_OTHER lident DOT expr 
-- On RIGHTPAR reduce production expr -> FORALL_OTHER lident DOT expr 
-- On RIGHTBR reduce production expr -> FORALL_OTHER lident DOT expr 
-- On ELSE reduce production expr -> FORALL_OTHER lident DOT expr 
-- On COMMA reduce production expr -> FORALL_OTHER lident DOT expr 
-- On COLON reduce production expr -> FORALL_OTHER lident DOT expr 

State 153:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr . RIGHTBR GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On RIGHTBR shift to state 154
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 154:
expr -> HASH LEFTBR lident DOT expr RIGHTBR . EQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr RIGHTBR . NEQ right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr RIGHTBR . LT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr RIGHTBR . LE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr RIGHTBR . GT right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> HASH LEFTBR lident DOT expr RIGHTBR . GE right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On NEQ shift to state 155
-- On LT shift to state 160
-- On LE shift to state 162
-- On GT shift to state 164
-- On GE shift to state 166
-- On EQ shift to state 168

State 155:
expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 159

State 156:
right_side_count -> INT . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
right_side_count -> INT . TIMES mident [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TIMES shift to state 157
-- On THEN reduce production right_side_count -> INT 
-- On RIGHTPAR reduce production right_side_count -> INT 
-- On RIGHTBR reduce production right_side_count -> INT 
-- On OR reduce production right_side_count -> INT 
-- On IMP reduce production right_side_count -> INT 
-- On EQUIV reduce production right_side_count -> INT 
-- On ELSE reduce production right_side_count -> INT 
-- On COMMA reduce production right_side_count -> INT 
-- On COLON reduce production right_side_count -> INT 
-- On AND reduce production right_side_count -> INT 

State 157:
right_side_count -> INT TIMES . mident [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On MIDENT shift to state 9
-- On mident shift to state 158

State 158:
right_side_count -> INT TIMES mident . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production right_side_count -> INT TIMES mident 
-- On RIGHTPAR reduce production right_side_count -> INT TIMES mident 
-- On RIGHTBR reduce production right_side_count -> INT TIMES mident 
-- On OR reduce production right_side_count -> INT TIMES mident 
-- On IMP reduce production right_side_count -> INT TIMES mident 
-- On EQUIV reduce production right_side_count -> INT TIMES mident 
-- On ELSE reduce production right_side_count -> INT TIMES mident 
-- On COMMA reduce production right_side_count -> INT TIMES mident 
-- On COLON reduce production right_side_count -> INT TIMES mident 
-- On AND reduce production right_side_count -> INT TIMES mident 

State 159:
expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR NEQ right_side_count 

State 160:
expr -> HASH LEFTBR lident DOT expr RIGHTBR LT . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 161

State 161:
expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LT right_side_count 

State 162:
expr -> HASH LEFTBR lident DOT expr RIGHTBR LE . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 163

State 163:
expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR LE right_side_count 

State 164:
expr -> HASH LEFTBR lident DOT expr RIGHTBR GT . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 165

State 165:
expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GT right_side_count 

State 166:
expr -> HASH LEFTBR lident DOT expr RIGHTBR GE . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 167

State 167:
expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR GE right_side_count 

State 168:
expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ . right_side_count [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On INT shift to state 156
-- On right_side_count shift to state 169

State 169:
expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On RIGHTPAR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On RIGHTBR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On OR reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On IMP reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On EQUIV reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On ELSE reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On COMMA reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On COLON reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 
-- On AND reduce production expr -> HASH LEFTBR lident DOT expr RIGHTBR EQ right_side_count 

State 170:
expr -> expr . AND expr [ THEN OR IMP EQUIV AND ]
expr -> expr . OR expr [ THEN OR IMP EQUIV AND ]
expr -> expr . IMP expr [ THEN OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ THEN OR IMP EQUIV AND ]
expr -> IF expr . THEN expr ELSE expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN shift to state 171
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 171:
expr -> IF expr THEN . expr ELSE expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 172
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 172:
expr -> expr . AND expr [ OR IMP EQUIV ELSE AND ]
expr -> expr . OR expr [ OR IMP EQUIV ELSE AND ]
expr -> expr . IMP expr [ OR IMP EQUIV ELSE AND ]
expr -> expr . EQUIV expr [ OR IMP EQUIV ELSE AND ]
expr -> IF expr THEN expr . ELSE expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On ELSE shift to state 173
-- On AND shift to state 136

State 173:
expr -> IF expr THEN expr ELSE . expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 174
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 174:
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> IF expr THEN expr ELSE expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> IF expr THEN expr ELSE expr 
-- On RIGHTPAR reduce production expr -> IF expr THEN expr ELSE expr 
-- On RIGHTBR reduce production expr -> IF expr THEN expr ELSE expr 
-- On OR reduce production expr -> IF expr THEN expr ELSE expr 
-- On IMP reduce production expr -> IF expr THEN expr ELSE expr 
-- On EQUIV reduce production expr -> IF expr THEN expr ELSE expr 
-- On ELSE reduce production expr -> IF expr THEN expr ELSE expr 
-- On COMMA reduce production expr -> IF expr THEN expr ELSE expr 
-- On COLON reduce production expr -> IF expr THEN expr ELSE expr 
-- On AND reduce production expr -> IF expr THEN expr ELSE expr 

State 175:
expr -> expr . AND expr [ RIGHTPAR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTPAR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTPAR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTPAR OR IMP EQUIV AND ]
simple_expr -> LEFTPAR expr . RIGHTPAR [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On RIGHTPAR shift to state 176
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 176:
simple_expr -> LEFTPAR expr RIGHTPAR . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On RIGHTPAR reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On RIGHTBR reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On OR reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On IMP reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On EQUIV reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On ELSE reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On COMMA reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On COLON reduce production simple_expr -> LEFTPAR expr RIGHTPAR 
-- On AND reduce production simple_expr -> LEFTPAR expr RIGHTPAR 

State 177:
expr -> NOT expr . [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . AND expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . OR expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . IMP expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
expr -> expr . EQUIV expr [ THEN RIGHTPAR RIGHTBR OR IMP EQUIV ELSE COMMA COLON AND ]
-- On THEN reduce production expr -> NOT expr 
-- On RIGHTPAR reduce production expr -> NOT expr 
-- On RIGHTBR reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On IMP reduce production expr -> NOT expr 
-- On EQUIV reduce production expr -> NOT expr 
-- On ELSE reduce production expr -> NOT expr 
-- On COMMA reduce production expr -> NOT expr 
-- On COLON reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 178:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 179
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 179:
unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INIT reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On EOF reduce production unsafe -> UNSAFE LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 

State 180:
list(lident) -> lident . list(lident) [ RIGHTPAR ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 181
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 181:
list(lident) -> lident list(lident) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production list(lident) -> lident list(lident) 

State 182:
unsafe -> UNSAFE LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 183
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 183:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
unsafe -> UNSAFE LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 184
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 184:
unsafe -> UNSAFE LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On INIT reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 
-- On EOF reduce production unsafe -> UNSAFE LEFTBR expr RIGHTBR 

State 185:
transition_type -> UNIVTRANSITION . [ MIDENT LIDENT ]
-- On MIDENT reduce production transition_type -> UNIVTRANSITION 
-- On LIDENT reduce production transition_type -> UNIVTRANSITION 

State 186:
decl_regexp -> TREGEXP . COLON regexp PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On COLON shift to state 187

State 187:
decl_regexp -> TREGEXP COLON . regexp PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 188
-- On union shift to state 189
-- On transition_name shift to state 190
-- On simple_regexp shift to state 194
-- On regexp shift to state 210
-- On mident shift to state 196
-- On lident shift to state 197
-- On elementary_regexp shift to state 198
-- On concatenation shift to state 209
-- On basic_regexp shift to state 203

State 188:
elementary_regexp -> LEFTPAR . regexp RIGHTPAR [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 188
-- On union shift to state 189
-- On transition_name shift to state 190
-- On simple_regexp shift to state 194
-- On regexp shift to state 207
-- On mident shift to state 196
-- On lident shift to state 197
-- On elementary_regexp shift to state 198
-- On concatenation shift to state 209
-- On basic_regexp shift to state 203

State 189:
simple_regexp -> union . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
-- On RIGHTPAR reduce production simple_regexp -> union 
-- On PV reduce production simple_regexp -> union 
-- On MIDENT reduce production simple_regexp -> union 
-- On LIDENT reduce production simple_regexp -> union 
-- On LEFTPAR reduce production simple_regexp -> union 

State 190:
elementary_regexp -> transition_name . LEFTPAR lidents RIGHTPAR [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On LEFTPAR shift to state 191

State 191:
elementary_regexp -> transition_name LEFTPAR . lidents RIGHTPAR [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 45
-- On lidents shift to state 192
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 192:
elementary_regexp -> transition_name LEFTPAR lidents . RIGHTPAR [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On RIGHTPAR shift to state 193

State 193:
elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR . [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On TIMES reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On RIGHTPAR reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On QMARK reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On PV reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On PLUS reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On MIDENT reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On LIDENT reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On LEFTPAR reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 
-- On BAR reduce production elementary_regexp -> transition_name LEFTPAR lidents RIGHTPAR 

State 194:
concatenation -> simple_regexp . simple_regexp [ RIGHTPAR PV ]
concatenation -> simple_regexp . concatenation [ RIGHTPAR PV ]
regexp -> simple_regexp . [ RIGHTPAR PV ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 188
-- On union shift to state 189
-- On transition_name shift to state 190
-- On simple_regexp shift to state 195
-- On mident shift to state 196
-- On lident shift to state 197
-- On elementary_regexp shift to state 198
-- On concatenation shift to state 202
-- On basic_regexp shift to state 203
-- On RIGHTPAR reduce production regexp -> simple_regexp 
-- On PV reduce production regexp -> simple_regexp 

State 195:
concatenation -> simple_regexp . simple_regexp [ RIGHTPAR PV ]
concatenation -> simple_regexp simple_regexp . [ RIGHTPAR PV ]
concatenation -> simple_regexp . concatenation [ RIGHTPAR PV ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 188
-- On union shift to state 189
-- On transition_name shift to state 190
-- On simple_regexp shift to state 195
-- On mident shift to state 196
-- On lident shift to state 197
-- On elementary_regexp shift to state 198
-- On concatenation shift to state 202
-- On basic_regexp shift to state 203
-- On RIGHTPAR reduce production concatenation -> simple_regexp simple_regexp 
-- On PV reduce production concatenation -> simple_regexp simple_regexp 

State 196:
transition_name -> mident . [ PV MIDENT LIDENT LEFTPAR ]
-- On PV reduce production transition_name -> mident 
-- On MIDENT reduce production transition_name -> mident 
-- On LIDENT reduce production transition_name -> mident 
-- On LEFTPAR reduce production transition_name -> mident 

State 197:
transition_name -> lident . [ PV MIDENT LIDENT LEFTPAR ]
-- On PV reduce production transition_name -> lident 
-- On MIDENT reduce production transition_name -> lident 
-- On LIDENT reduce production transition_name -> lident 
-- On LEFTPAR reduce production transition_name -> lident 

State 198:
basic_regexp -> elementary_regexp . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
basic_regexp -> elementary_regexp . TIMES [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
basic_regexp -> elementary_regexp . PLUS [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
basic_regexp -> elementary_regexp . QMARK [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
-- On TIMES shift to state 199
-- On QMARK shift to state 200
-- On PLUS shift to state 201
-- On RIGHTPAR reduce production basic_regexp -> elementary_regexp 
-- On PV reduce production basic_regexp -> elementary_regexp 
-- On MIDENT reduce production basic_regexp -> elementary_regexp 
-- On LIDENT reduce production basic_regexp -> elementary_regexp 
-- On LEFTPAR reduce production basic_regexp -> elementary_regexp 
-- On BAR reduce production basic_regexp -> elementary_regexp 

State 199:
basic_regexp -> elementary_regexp TIMES . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
-- On RIGHTPAR reduce production basic_regexp -> elementary_regexp TIMES 
-- On PV reduce production basic_regexp -> elementary_regexp TIMES 
-- On MIDENT reduce production basic_regexp -> elementary_regexp TIMES 
-- On LIDENT reduce production basic_regexp -> elementary_regexp TIMES 
-- On LEFTPAR reduce production basic_regexp -> elementary_regexp TIMES 
-- On BAR reduce production basic_regexp -> elementary_regexp TIMES 

State 200:
basic_regexp -> elementary_regexp QMARK . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
-- On RIGHTPAR reduce production basic_regexp -> elementary_regexp QMARK 
-- On PV reduce production basic_regexp -> elementary_regexp QMARK 
-- On MIDENT reduce production basic_regexp -> elementary_regexp QMARK 
-- On LIDENT reduce production basic_regexp -> elementary_regexp QMARK 
-- On LEFTPAR reduce production basic_regexp -> elementary_regexp QMARK 
-- On BAR reduce production basic_regexp -> elementary_regexp QMARK 

State 201:
basic_regexp -> elementary_regexp PLUS . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR BAR ]
-- On RIGHTPAR reduce production basic_regexp -> elementary_regexp PLUS 
-- On PV reduce production basic_regexp -> elementary_regexp PLUS 
-- On MIDENT reduce production basic_regexp -> elementary_regexp PLUS 
-- On LIDENT reduce production basic_regexp -> elementary_regexp PLUS 
-- On LEFTPAR reduce production basic_regexp -> elementary_regexp PLUS 
-- On BAR reduce production basic_regexp -> elementary_regexp PLUS 

State 202:
concatenation -> simple_regexp concatenation . [ RIGHTPAR PV ]
-- On RIGHTPAR reduce production concatenation -> simple_regexp concatenation 
-- On PV reduce production concatenation -> simple_regexp concatenation 

State 203:
simple_regexp -> basic_regexp . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
union -> basic_regexp . BAR basic_regexp [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
union -> basic_regexp . BAR union [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
-- On BAR shift to state 204
-- On RIGHTPAR reduce production simple_regexp -> basic_regexp 
-- On PV reduce production simple_regexp -> basic_regexp 
-- On MIDENT reduce production simple_regexp -> basic_regexp 
-- On LIDENT reduce production simple_regexp -> basic_regexp 
-- On LEFTPAR reduce production simple_regexp -> basic_regexp 

State 204:
union -> basic_regexp BAR . basic_regexp [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
union -> basic_regexp BAR . union [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 188
-- On union shift to state 205
-- On transition_name shift to state 190
-- On mident shift to state 196
-- On lident shift to state 197
-- On elementary_regexp shift to state 198
-- On basic_regexp shift to state 206

State 205:
union -> basic_regexp BAR union . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
-- On RIGHTPAR reduce production union -> basic_regexp BAR union 
-- On PV reduce production union -> basic_regexp BAR union 
-- On MIDENT reduce production union -> basic_regexp BAR union 
-- On LIDENT reduce production union -> basic_regexp BAR union 
-- On LEFTPAR reduce production union -> basic_regexp BAR union 

State 206:
union -> basic_regexp . BAR basic_regexp [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
union -> basic_regexp BAR basic_regexp . [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
union -> basic_regexp . BAR union [ RIGHTPAR PV MIDENT LIDENT LEFTPAR ]
-- On BAR shift to state 204
-- On RIGHTPAR reduce production union -> basic_regexp BAR basic_regexp 
-- On PV reduce production union -> basic_regexp BAR basic_regexp 
-- On MIDENT reduce production union -> basic_regexp BAR basic_regexp 
-- On LIDENT reduce production union -> basic_regexp BAR basic_regexp 
-- On LEFTPAR reduce production union -> basic_regexp BAR basic_regexp 

State 207:
elementary_regexp -> LEFTPAR regexp . RIGHTPAR [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On RIGHTPAR shift to state 208

State 208:
elementary_regexp -> LEFTPAR regexp RIGHTPAR . [ TIMES RIGHTPAR QMARK PV PLUS MIDENT LIDENT LEFTPAR BAR ]
-- On TIMES reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On RIGHTPAR reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On QMARK reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On PV reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On PLUS reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On MIDENT reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On LIDENT reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On LEFTPAR reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 
-- On BAR reduce production elementary_regexp -> LEFTPAR regexp RIGHTPAR 

State 209:
regexp -> concatenation . [ RIGHTPAR PV ]
-- On RIGHTPAR reduce production regexp -> concatenation 
-- On PV reduce production regexp -> concatenation 

State 210:
decl_regexp -> TREGEXP COLON regexp . PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On PV shift to state 211

State 211:
decl_regexp -> TREGEXP COLON regexp PV . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On UNIVTRANSITION reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On TREGEXP reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On TRANSITION reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On PREDICATE reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On METATRANSITION reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On INVARIANT reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On INIT reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On HIDETRANSITION reduce production decl_regexp -> TREGEXP COLON regexp PV 
-- On EOF reduce production decl_regexp -> TREGEXP COLON regexp PV 

State 212:
transition_type -> TRANSITION . [ MIDENT LIDENT ]
-- On MIDENT reduce production transition_type -> TRANSITION 
-- On LIDENT reduce production transition_type -> TRANSITION 

State 213:
function_decl -> PREDICATE . lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On lident shift to state 214

State 214:
function_decl -> PREDICATE lident . LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTPAR shift to state 215

State 215:
function_decl -> PREDICATE lident LEFTPAR . lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On separated_nonempty_list(COMMA,lident) shift to state 216
-- On loption(separated_nonempty_list(COMMA,lident)) shift to state 217
-- On lident_comma_list shift to state 218
-- On lident shift to state 33
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,lident)) -> 

State 216:
loption(separated_nonempty_list(COMMA,lident)) -> separated_nonempty_list(COMMA,lident) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,lident)) -> separated_nonempty_list(COMMA,lident) 

State 217:
lident_comma_list -> loption(separated_nonempty_list(COMMA,lident)) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production lident_comma_list -> loption(separated_nonempty_list(COMMA,lident)) 

State 218:
function_decl -> PREDICATE lident LEFTPAR lident_comma_list . RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTPAR shift to state 219

State 219:
function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTBR shift to state 220

State 220:
function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 221
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 221:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 222
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 222:
function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On INIT reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 
-- On EOF reduce production function_decl -> PREDICATE lident LEFTPAR lident_comma_list RIGHTPAR LEFTBR expr RIGHTBR 

State 223:
transition_type -> METATRANSITION . [ MIDENT LIDENT ]
-- On MIDENT reduce production transition_type -> METATRANSITION 
-- On LIDENT reduce production transition_type -> METATRANSITION 

State 224:
invariant -> INVARIANT . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
invariant -> INVARIANT . LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTPAR shift to state 225
-- On LEFTBR shift to state 231

State 225:
invariant -> INVARIANT LEFTPAR . lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 45
-- On lidents shift to state 226
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 226:
invariant -> INVARIANT LEFTPAR lidents . RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTPAR shift to state 227

State 227:
invariant -> INVARIANT LEFTPAR lidents RIGHTPAR . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTBR shift to state 228

State 228:
invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 229
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 229:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 230
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 230:
invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INIT reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On EOF reduce production invariant -> INVARIANT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 

State 231:
invariant -> INVARIANT LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 232
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 232:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
invariant -> INVARIANT LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 233
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 233:
invariant -> INVARIANT LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On INIT reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 
-- On EOF reduce production invariant -> INVARIANT LEFTBR expr RIGHTBR 

State 234:
init -> INIT . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
init -> INIT . LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTPAR shift to state 235
-- On LEFTBR shift to state 241

State 235:
init -> INIT LEFTPAR . lidents RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 45
-- On lidents shift to state 236
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 236:
init -> INIT LEFTPAR lidents . RIGHTPAR LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTPAR shift to state 237

State 237:
init -> INIT LEFTPAR lidents RIGHTPAR . LEFTBR expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTBR shift to state 238

State 238:
init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 239
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 239:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 240
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 240:
init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On INIT reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 
-- On EOF reduce production init -> INIT LEFTPAR lidents RIGHTPAR LEFTBR expr RIGHTBR 

State 241:
init -> INIT LEFTBR . expr RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 242
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 242:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
init -> INIT LEFTBR expr . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 243
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 243:
init -> INIT LEFTBR expr RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On UNIVTRANSITION reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On TREGEXP reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On TRANSITION reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On PREDICATE reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On METATRANSITION reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On INVARIANT reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On INIT reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On HIDETRANSITION reduce production init -> INIT LEFTBR expr RIGHTBR 
-- On EOF reduce production init -> INIT LEFTBR expr RIGHTBR 

State 244:
hide_transition -> HIDETRANSITION . COLON list(transition_name) PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On COLON shift to state 245

State 245:
hide_transition -> HIDETRANSITION COLON . list(transition_name) PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On transition_name shift to state 246
-- On mident shift to state 196
-- On list(transition_name) shift to state 248
-- On lident shift to state 197
-- On PV reduce production list(transition_name) -> 

State 246:
list(transition_name) -> transition_name . list(transition_name) [ PV ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On transition_name shift to state 246
-- On mident shift to state 196
-- On list(transition_name) shift to state 247
-- On lident shift to state 197
-- On PV reduce production list(transition_name) -> 

State 247:
list(transition_name) -> transition_name list(transition_name) . [ PV ]
-- On PV reduce production list(transition_name) -> transition_name list(transition_name) 

State 248:
hide_transition -> HIDETRANSITION COLON list(transition_name) . PV [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On PV shift to state 249

State 249:
hide_transition -> HIDETRANSITION COLON list(transition_name) PV . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On UNIVTRANSITION reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On TREGEXP reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On TRANSITION reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On PREDICATE reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On METATRANSITION reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On INVARIANT reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On INIT reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On HIDETRANSITION reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 
-- On EOF reduce production hide_transition -> HIDETRANSITION COLON list(transition_name) PV 

State 250:
decl -> unsafe . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> unsafe 
-- On UNIVTRANSITION reduce production decl -> unsafe 
-- On TREGEXP reduce production decl -> unsafe 
-- On TRANSITION reduce production decl -> unsafe 
-- On PREDICATE reduce production decl -> unsafe 
-- On METATRANSITION reduce production decl -> unsafe 
-- On INVARIANT reduce production decl -> unsafe 
-- On INIT reduce production decl -> unsafe 
-- On HIDETRANSITION reduce production decl -> unsafe 
-- On EOF reduce production decl -> unsafe 

State 251:
transition_decl -> transition_type . transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On transition_name shift to state 252
-- On mident shift to state 196
-- On lident shift to state 197

State 252:
transition_decl -> transition_type transition_name . LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTPAR shift to state 253

State 253:
transition_decl -> transition_type transition_name LEFTPAR . lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LIDENT shift to state 6
-- On list(lident) shift to state 45
-- On lidents shift to state 254
-- On lident shift to state 180
-- On RIGHTPAR reduce production list(lident) -> 

State 254:
transition_decl -> transition_type transition_name LEFTPAR lidents . RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTPAR shift to state 255

State 255:
transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR . require LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On REQUIRE shift to state 256
-- On require shift to state 260
-- On LEFTBR reduce production require -> 

State 256:
require -> REQUIRE . LEFTBR expr RIGHTBR [ LEFTBR ]
-- On LEFTBR shift to state 257

State 257:
require -> REQUIRE LEFTBR . expr RIGHTBR [ LEFTBR ]
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 258
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 258:
expr -> expr . AND expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . OR expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . IMP expr [ RIGHTBR OR IMP EQUIV AND ]
expr -> expr . EQUIV expr [ RIGHTBR OR IMP EQUIV AND ]
require -> REQUIRE LEFTBR expr . RIGHTBR [ LEFTBR ]
-- On RIGHTBR shift to state 259
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On AND shift to state 136

State 259:
require -> REQUIRE LEFTBR expr RIGHTBR . [ LEFTBR ]
-- On LEFTBR reduce production require -> REQUIRE LEFTBR expr RIGHTBR 

State 260:
transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require . LEFTBR assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On LEFTBR shift to state 261

State 261:
transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR . assigns_nondets_updates RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On MIDENT shift to state 9
-- On update shift to state 262
-- On nondet shift to state 263
-- On mident shift to state 264
-- On assigns_nondets_updates shift to state 287
-- On assignment shift to state 289
-- On assign_nondet_update shift to state 290
-- On RIGHTBR reduce production assigns_nondets_updates -> 

State 262:
assign_nondet_update -> update . [ RIGHTBR PV ]
-- On RIGHTBR reduce production assign_nondet_update -> update 
-- On PV reduce production assign_nondet_update -> update 

State 263:
assign_nondet_update -> nondet . [ RIGHTBR PV ]
-- On RIGHTBR reduce production assign_nondet_update -> nondet 
-- On PV reduce production assign_nondet_update -> nondet 

State 264:
assignment -> mident . AFFECT term [ RIGHTBR PV ]
assignment -> mident . AFFECT CASE switchs [ RIGHTBR PV ]
nondet -> mident . AFFECT DOT [ RIGHTBR PV ]
nondet -> mident . AFFECT QMARK [ RIGHTBR PV ]
update -> mident . LEFTSQ proc_name_list_plus RIGHTSQ AFFECT CASE switchs [ RIGHTBR PV ]
update -> mident . LEFTSQ proc_name_list_plus RIGHTSQ AFFECT term [ RIGHTBR PV ]
-- On LEFTSQ shift to state 265
-- On AFFECT shift to state 281

State 265:
update -> mident LEFTSQ . proc_name_list_plus RIGHTSQ AFFECT CASE switchs [ RIGHTBR PV ]
update -> mident LEFTSQ . proc_name_list_plus RIGHTSQ AFFECT term [ RIGHTBR PV ]
-- On LIDENT shift to state 6
-- On CONSTPROC shift to state 79
-- On separated_nonempty_list(COMMA,proc_name) shift to state 105
-- On proc_name_list_plus shift to state 266
-- On proc_name shift to state 108
-- On lident shift to state 111
-- On const_proc shift to state 112

State 266:
update -> mident LEFTSQ proc_name_list_plus . RIGHTSQ AFFECT CASE switchs [ RIGHTBR PV ]
update -> mident LEFTSQ proc_name_list_plus . RIGHTSQ AFFECT term [ RIGHTBR PV ]
-- On RIGHTSQ shift to state 267

State 267:
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ . AFFECT CASE switchs [ RIGHTBR PV ]
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ . AFFECT term [ RIGHTBR PV ]
-- On AFFECT shift to state 268

State 268:
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT . CASE switchs [ RIGHTBR PV ]
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT . term [ RIGHTBR PV ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On CASE shift to state 269
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 280
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 269:
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT CASE . switchs [ RIGHTBR PV ]
-- On BAR shift to state 270
-- On switchs shift to state 279

State 270:
switchs -> BAR . UNDERSCORE COLON term [ RIGHTBR PV ]
switchs -> BAR . switch [ RIGHTBR PV ]
switchs -> BAR . switch switchs [ RIGHTBR PV ]
-- On UNDERSCORE shift to state 271
-- On TRUE shift to state 49
-- On REAL shift to state 50
-- On NOT shift to state 51
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On LEFTPAR shift to state 56
-- On INT shift to state 57
-- On IF shift to state 60
-- On HASH shift to state 61
-- On FORALL_OTHER shift to state 65
-- On FORALL shift to state 68
-- On FALSE shift to state 72
-- On EXISTS_OTHER shift to state 73
-- On EXISTS shift to state 76
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 99
-- On switch shift to state 274
-- On simple_expr shift to state 126
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On literal shift to state 127
-- On lident shift to state 128
-- On expr shift to state 276
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 271:
switchs -> BAR UNDERSCORE . COLON term [ RIGHTBR PV ]
-- On COLON shift to state 272

State 272:
switchs -> BAR UNDERSCORE COLON . term [ RIGHTBR PV ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 273
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 273:
switchs -> BAR UNDERSCORE COLON term . [ RIGHTBR PV ]
-- On RIGHTBR reduce production switchs -> BAR UNDERSCORE COLON term 
-- On PV reduce production switchs -> BAR UNDERSCORE COLON term 

State 274:
switchs -> BAR switch . [ RIGHTBR PV ]
switchs -> BAR switch . switchs [ RIGHTBR PV ]
-- On BAR shift to state 270
-- On switchs shift to state 275
-- On RIGHTBR reduce production switchs -> BAR switch 
-- On PV reduce production switchs -> BAR switch 

State 275:
switchs -> BAR switch switchs . [ RIGHTBR PV ]
-- On RIGHTBR reduce production switchs -> BAR switch switchs 
-- On PV reduce production switchs -> BAR switch switchs 

State 276:
expr -> expr . AND expr [ OR IMP EQUIV COLON AND ]
expr -> expr . OR expr [ OR IMP EQUIV COLON AND ]
expr -> expr . IMP expr [ OR IMP EQUIV COLON AND ]
expr -> expr . EQUIV expr [ OR IMP EQUIV COLON AND ]
switch -> expr . COLON term [ RIGHTBR PV BAR ]
-- On OR shift to state 134
-- On IMP shift to state 138
-- On EQUIV shift to state 140
-- On COLON shift to state 277
-- On AND shift to state 136

State 277:
switch -> expr COLON . term [ RIGHTBR PV BAR ]
-- On REAL shift to state 50
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On CONSTPROC shift to state 79
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 278
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 278:
switch -> expr COLON term . [ RIGHTBR PV BAR ]
-- On RIGHTBR reduce production switch -> expr COLON term 
-- On PV reduce production switch -> expr COLON term 
-- On BAR reduce production switch -> expr COLON term 

State 279:
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT CASE switchs . [ RIGHTBR PV ]
-- On RIGHTBR reduce production update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT CASE switchs 
-- On PV reduce production update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT CASE switchs 

State 280:
update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT term . [ RIGHTBR PV ]
-- On RIGHTBR reduce production update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT term 
-- On PV reduce production update -> mident LEFTSQ proc_name_list_plus RIGHTSQ AFFECT term 

State 281:
assignment -> mident AFFECT . term [ RIGHTBR PV ]
assignment -> mident AFFECT . CASE switchs [ RIGHTBR PV ]
nondet -> mident AFFECT . DOT [ RIGHTBR PV ]
nondet -> mident AFFECT . QMARK [ RIGHTBR PV ]
-- On REAL shift to state 50
-- On QMARK shift to state 282
-- On MINUS shift to state 52
-- On MIDENT shift to state 9
-- On LIDENT shift to state 6
-- On INT shift to state 57
-- On DOT shift to state 283
-- On CONSTPROC shift to state 79
-- On CASE shift to state 284
-- On var_term shift to state 80
-- On var_or_array_term shift to state 81
-- On top_id_term shift to state 98
-- On term shift to state 286
-- On proc_name shift to state 102
-- On mident shift to state 103
-- On lident shift to state 111
-- On constnum shift to state 113
-- On const_proc shift to state 112
-- On array_term shift to state 114
-- On arith_term shift to state 115

State 282:
nondet -> mident AFFECT QMARK . [ RIGHTBR PV ]
-- On RIGHTBR reduce production nondet -> mident AFFECT QMARK 
-- On PV reduce production nondet -> mident AFFECT QMARK 

State 283:
nondet -> mident AFFECT DOT . [ RIGHTBR PV ]
-- On RIGHTBR reduce production nondet -> mident AFFECT DOT 
-- On PV reduce production nondet -> mident AFFECT DOT 

State 284:
assignment -> mident AFFECT CASE . switchs [ RIGHTBR PV ]
-- On BAR shift to state 270
-- On switchs shift to state 285

State 285:
assignment -> mident AFFECT CASE switchs . [ RIGHTBR PV ]
-- On RIGHTBR reduce production assignment -> mident AFFECT CASE switchs 
-- On PV reduce production assignment -> mident AFFECT CASE switchs 

State 286:
assignment -> mident AFFECT term . [ RIGHTBR PV ]
-- On RIGHTBR reduce production assignment -> mident AFFECT term 
-- On PV reduce production assignment -> mident AFFECT term 

State 287:
transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates . RIGHTBR [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On RIGHTBR shift to state 288

State 288:
transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On UNIVTRANSITION reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On TREGEXP reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On TRANSITION reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On PREDICATE reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On METATRANSITION reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On INVARIANT reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On INIT reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On HIDETRANSITION reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 
-- On EOF reduce production transition_decl -> transition_type transition_name LEFTPAR lidents RIGHTPAR require LEFTBR assigns_nondets_updates RIGHTBR 

State 289:
assign_nondet_update -> assignment . [ RIGHTBR PV ]
-- On RIGHTBR reduce production assign_nondet_update -> assignment 
-- On PV reduce production assign_nondet_update -> assignment 

State 290:
assigns_nondets_updates -> assign_nondet_update . [ RIGHTBR ]
assigns_nondets_updates -> assign_nondet_update . PV assigns_nondets_updates [ RIGHTBR ]
-- On PV shift to state 291
-- On RIGHTBR reduce production assigns_nondets_updates -> assign_nondet_update 

State 291:
assigns_nondets_updates -> assign_nondet_update PV . assigns_nondets_updates [ RIGHTBR ]
-- On MIDENT shift to state 9
-- On update shift to state 262
-- On nondet shift to state 263
-- On mident shift to state 264
-- On assigns_nondets_updates shift to state 292
-- On assignment shift to state 289
-- On assign_nondet_update shift to state 290
-- On RIGHTBR reduce production assigns_nondets_updates -> 

State 292:
assigns_nondets_updates -> assign_nondet_update PV assigns_nondets_updates . [ RIGHTBR ]
-- On RIGHTBR reduce production assigns_nondets_updates -> assign_nondet_update PV assigns_nondets_updates 

State 293:
decl -> transition_decl . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> transition_decl 
-- On UNIVTRANSITION reduce production decl -> transition_decl 
-- On TREGEXP reduce production decl -> transition_decl 
-- On TRANSITION reduce production decl -> transition_decl 
-- On PREDICATE reduce production decl -> transition_decl 
-- On METATRANSITION reduce production decl -> transition_decl 
-- On INVARIANT reduce production decl -> transition_decl 
-- On INIT reduce production decl -> transition_decl 
-- On HIDETRANSITION reduce production decl -> transition_decl 
-- On EOF reduce production decl -> transition_decl 

State 294:
decl_list -> nonempty_list(decl) . [ EOF ]
-- On EOF reduce production decl_list -> nonempty_list(decl) 

State 295:
decl -> invariant . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> invariant 
-- On UNIVTRANSITION reduce production decl -> invariant 
-- On TREGEXP reduce production decl -> invariant 
-- On TRANSITION reduce production decl -> invariant 
-- On PREDICATE reduce production decl -> invariant 
-- On METATRANSITION reduce production decl -> invariant 
-- On INVARIANT reduce production decl -> invariant 
-- On INIT reduce production decl -> invariant 
-- On HIDETRANSITION reduce production decl -> invariant 
-- On EOF reduce production decl -> invariant 

State 296:
decl -> init . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> init 
-- On UNIVTRANSITION reduce production decl -> init 
-- On TREGEXP reduce production decl -> init 
-- On TRANSITION reduce production decl -> init 
-- On PREDICATE reduce production decl -> init 
-- On METATRANSITION reduce production decl -> init 
-- On INVARIANT reduce production decl -> init 
-- On INIT reduce production decl -> init 
-- On HIDETRANSITION reduce production decl -> init 
-- On EOF reduce production decl -> init 

State 297:
decl -> hide_transition . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> hide_transition 
-- On UNIVTRANSITION reduce production decl -> hide_transition 
-- On TREGEXP reduce production decl -> hide_transition 
-- On TRANSITION reduce production decl -> hide_transition 
-- On PREDICATE reduce production decl -> hide_transition 
-- On METATRANSITION reduce production decl -> hide_transition 
-- On INVARIANT reduce production decl -> hide_transition 
-- On INIT reduce production decl -> hide_transition 
-- On HIDETRANSITION reduce production decl -> hide_transition 
-- On EOF reduce production decl -> hide_transition 

State 298:
decl -> function_decl . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> function_decl 
-- On UNIVTRANSITION reduce production decl -> function_decl 
-- On TREGEXP reduce production decl -> function_decl 
-- On TRANSITION reduce production decl -> function_decl 
-- On PREDICATE reduce production decl -> function_decl 
-- On METATRANSITION reduce production decl -> function_decl 
-- On INVARIANT reduce production decl -> function_decl 
-- On INIT reduce production decl -> function_decl 
-- On HIDETRANSITION reduce production decl -> function_decl 
-- On EOF reduce production decl -> function_decl 

State 299:
decl -> decl_regexp . [ UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION EOF ]
-- On UNSAFE reduce production decl -> decl_regexp 
-- On UNIVTRANSITION reduce production decl -> decl_regexp 
-- On TREGEXP reduce production decl -> decl_regexp 
-- On TRANSITION reduce production decl -> decl_regexp 
-- On PREDICATE reduce production decl -> decl_regexp 
-- On METATRANSITION reduce production decl -> decl_regexp 
-- On INVARIANT reduce production decl -> decl_regexp 
-- On INIT reduce production decl -> decl_regexp 
-- On HIDETRANSITION reduce production decl -> decl_regexp 
-- On EOF reduce production decl -> decl_regexp 

State 300:
system -> size_proc type_defs symbold_decls decl_list . EOF [ # ]
-- On EOF shift to state 301

State 301:
system -> size_proc type_defs symbold_decls decl_list EOF . [ # ]
-- On # reduce production system -> size_proc type_defs symbold_decls decl_list EOF 

State 302:
nonempty_list(decl) -> decl . [ EOF ]
nonempty_list(decl) -> decl . nonempty_list(decl) [ EOF ]
-- On UNSAFE shift to state 43
-- On UNIVTRANSITION shift to state 185
-- On TREGEXP shift to state 186
-- On TRANSITION shift to state 212
-- On PREDICATE shift to state 213
-- On METATRANSITION shift to state 223
-- On INVARIANT shift to state 224
-- On INIT shift to state 234
-- On HIDETRANSITION shift to state 244
-- On unsafe shift to state 250
-- On transition_type shift to state 251
-- On transition_decl shift to state 293
-- On nonempty_list(decl) shift to state 303
-- On invariant shift to state 295
-- On init shift to state 296
-- On hide_transition shift to state 297
-- On function_decl shift to state 298
-- On decl_regexp shift to state 299
-- On decl shift to state 302
-- On EOF reduce production nonempty_list(decl) -> decl 

State 303:
nonempty_list(decl) -> decl nonempty_list(decl) . [ EOF ]
-- On EOF reduce production nonempty_list(decl) -> decl nonempty_list(decl) 

State 304:
type_defs -> type_def_plus . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production type_defs -> type_def_plus 
-- On UNSAFE reduce production type_defs -> type_def_plus 
-- On UNIVTRANSITION reduce production type_defs -> type_def_plus 
-- On TREGEXP reduce production type_defs -> type_def_plus 
-- On TRANSITION reduce production type_defs -> type_def_plus 
-- On PREDICATE reduce production type_defs -> type_def_plus 
-- On METATRANSITION reduce production type_defs -> type_def_plus 
-- On INVARIANT reduce production type_defs -> type_def_plus 
-- On INIT reduce production type_defs -> type_def_plus 
-- On HIDETRANSITION reduce production type_defs -> type_def_plus 
-- On CONST reduce production type_defs -> type_def_plus 
-- On ARRAY reduce production type_defs -> type_def_plus 

State 305:
type_def_plus -> type_def . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
type_def_plus -> type_def . type_def_plus [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On TYPE shift to state 5
-- On type_def_plus shift to state 306
-- On type_def shift to state 305
-- On VAR reduce production type_def_plus -> type_def 
-- On UNSAFE reduce production type_def_plus -> type_def 
-- On UNIVTRANSITION reduce production type_def_plus -> type_def 
-- On TREGEXP reduce production type_def_plus -> type_def 
-- On TRANSITION reduce production type_def_plus -> type_def 
-- On PREDICATE reduce production type_def_plus -> type_def 
-- On METATRANSITION reduce production type_def_plus -> type_def 
-- On INVARIANT reduce production type_def_plus -> type_def 
-- On INIT reduce production type_def_plus -> type_def 
-- On HIDETRANSITION reduce production type_def_plus -> type_def 
-- On CONST reduce production type_def_plus -> type_def 
-- On ARRAY reduce production type_def_plus -> type_def 

State 306:
type_def_plus -> type_def type_def_plus . [ VAR UNSAFE UNIVTRANSITION TREGEXP TRANSITION PREDICATE METATRANSITION INVARIANT INIT HIDETRANSITION CONST ARRAY ]
-- On VAR reduce production type_def_plus -> type_def type_def_plus 
-- On UNSAFE reduce production type_def_plus -> type_def type_def_plus 
-- On UNIVTRANSITION reduce production type_def_plus -> type_def type_def_plus 
-- On TREGEXP reduce production type_def_plus -> type_def type_def_plus 
-- On TRANSITION reduce production type_def_plus -> type_def type_def_plus 
-- On PREDICATE reduce production type_def_plus -> type_def type_def_plus 
-- On METATRANSITION reduce production type_def_plus -> type_def type_def_plus 
-- On INVARIANT reduce production type_def_plus -> type_def type_def_plus 
-- On INIT reduce production type_def_plus -> type_def type_def_plus 
-- On HIDETRANSITION reduce production type_def_plus -> type_def type_def_plus 
-- On CONST reduce production type_def_plus -> type_def type_def_plus 
-- On ARRAY reduce production type_def_plus -> type_def type_def_plus 

