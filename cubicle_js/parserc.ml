type token =
  | VAR
  | ARRAY
  | CONST
  | TYPE
  | INIT
  | TRANSITION
  | INVARIANT
  | CASE
  | FORALL
  | EXISTS
  | FORALL_OTHER
  | EXISTS_OTHER
  | SIZEPROC
  | REQUIRE
  | UNSAFE
  | PREDICATE
  | OR
  | AND
  | COMMA
  | PV
  | DOT
  | QMARK
  | IMP
  | EQUIV
  | CONSTPROC of (string)
  | LIDENT of (string)
  | MIDENT of (string)
  | LEFTPAR
  | RIGHTPAR
  | COLON
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | LEFTSQ
  | RIGHTSQ
  | LEFTBR
  | RIGHTBR
  | BAR
  | REAL of (Num.num)
  | INT of (Num.num)
  | PLUS
  | MINUS
  | TIMES
  | IF
  | THEN
  | ELSE
  | NOT
  | TRUE
  | FALSE
  | UNDERSCORE
  | AFFECT
  | EOF

open Parsing;;
let _ = parse_error;;
# 17 "parserc.mly"

  open Ast
  open Types
  open Parsing
  open Ptreec
  
  let _ = Smt.set_cc false; Smt.set_arith false; Smt.set_sum false


  (* Helper functions for location info *)

  let loc () = (symbol_start_pos (), symbol_end_pos ())
  let loc_i i = (rhs_start_pos i, rhs_end_pos i)
  let loc_ij i j = (rhs_start_pos i, rhs_end_pos j)


  type t = 
    | Assign of Hstring.t * pglob_update
    | Nondet of Hstring.t
    | Upd of pupdate

  module S = Set.Make(Hstring)

  module Constructors = struct
    let s = ref (S.add (Hstring.make "True") 
		   (S.singleton (Hstring.make "False")))
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Globals = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Arrays = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Consts = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  let sort s = 
    if Constructors.mem s then Constr 
    else if Globals.mem s then Glob
    else
      begin
        assert (not (Arrays.mem s));
        Var
      end

  let hproc = Hstring.make "proc"
  let hreal = Hstring.make "real"
  let hint = Hstring.make "int"

  let set_from_list = List.fold_left (fun sa a -> SAtom.add a sa) SAtom.empty 

  let fresh_var = 
    let cpt = ref 0 in
    fun () -> incr cpt; Hstring.make ("_j"^(string_of_int !cpt))

# 129 "parserc.ml"
let yytransl_const = [|
  257 (* VAR *);
  258 (* ARRAY *);
  259 (* CONST *);
  260 (* TYPE *);
  261 (* INIT *);
  262 (* TRANSITION *);
  263 (* INVARIANT *);
  264 (* CASE *);
  265 (* FORALL *);
  266 (* EXISTS *);
  267 (* FORALL_OTHER *);
  268 (* EXISTS_OTHER *);
  269 (* SIZEPROC *);
  270 (* REQUIRE *);
  271 (* UNSAFE *);
  272 (* PREDICATE *);
  273 (* OR *);
  274 (* AND *);
  275 (* COMMA *);
  276 (* PV *);
  277 (* DOT *);
  278 (* QMARK *);
  279 (* IMP *);
  280 (* EQUIV *);
  284 (* LEFTPAR *);
  285 (* RIGHTPAR *);
  286 (* COLON *);
  287 (* EQ *);
  288 (* NEQ *);
  289 (* LT *);
  290 (* LE *);
  291 (* GT *);
  292 (* GE *);
  293 (* LEFTSQ *);
  294 (* RIGHTSQ *);
  295 (* LEFTBR *);
  296 (* RIGHTBR *);
  297 (* BAR *);
  300 (* PLUS *);
  301 (* MINUS *);
  302 (* TIMES *);
  303 (* IF *);
  304 (* THEN *);
  305 (* ELSE *);
  306 (* NOT *);
  307 (* TRUE *);
  308 (* FALSE *);
  309 (* UNDERSCORE *);
  310 (* AFFECT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  281 (* CONSTPROC *);
  282 (* LIDENT *);
  283 (* MIDENT *);
  298 (* REAL *);
  299 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
\004\000\004\000\004\000\004\000\011\000\013\000\012\000\014\000\
\003\000\003\000\020\000\020\000\002\000\002\000\021\000\021\000\
\021\000\022\000\022\000\007\000\007\000\008\000\008\000\009\000\
\009\000\024\000\024\000\010\000\026\000\026\000\026\000\027\000\
\027\000\027\000\028\000\028\000\029\000\029\000\025\000\025\000\
\030\000\030\000\032\000\032\000\032\000\034\000\035\000\035\000\
\036\000\036\000\038\000\039\000\040\000\040\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\031\000\031\000\031\000\015\000\042\000\037\000\037\000\
\033\000\033\000\018\000\043\000\043\000\023\000\023\000\019\000\
\019\000\016\000\016\000\044\000\044\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\046\000\046\000\046\000\047\000\047\000\047\000\047\000\047\000\
\000\000"

let yylen = "\002\000\
\005\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\002\000\002\000\008\000\004\000\004\000\007\000\
\000\000\001\000\001\000\002\000\000\000\002\000\002\000\004\000\
\005\000\001\000\003\000\004\000\007\000\004\000\007\000\004\000\
\007\000\001\000\001\000\009\000\000\000\001\000\003\000\001\000\
\001\000\001\000\003\000\004\000\003\000\003\000\000\000\004\000\
\007\000\006\000\004\000\002\000\003\000\003\000\001\000\001\000\
\001\000\001\000\001\000\004\000\001\000\001\000\003\000\003\000\
\003\000\005\000\005\000\003\000\005\000\005\000\003\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\001\000\001\000\002\000\000\000\001\000\001\000\
\003\000\000\000\001\000\001\000\003\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\002\000\003\000\
\003\000\003\000\003\000\006\000\004\000\004\000\004\000\004\000\
\001\000\003\000\004\000\000\000\001\000\001\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\121\000\000\000\022\000\000\000\000\000\
\018\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\005\000\006\000\007\000\008\000\010\000\011\000\012\000\
\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\003\000\025\000\000\000\014\000\000\000\000\000\015\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\078\000\
\000\000\055\000\000\000\000\000\000\000\000\000\094\000\095\000\
\000\000\000\000\000\000\000\000\073\000\000\000\058\000\074\000\
\000\000\000\000\076\000\080\000\113\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\000\000\085\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\032\000\000\000\
\091\000\089\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\114\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\000\000\000\000\096\000\
\097\000\098\000\099\000\100\000\101\000\000\000\000\000\063\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\016\000\
\000\000\093\000\000\000\000\000\000\000\000\000\072\000\000\000\
\000\000\000\000\115\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\120\000\119\000\082\000\066\000\067\000\069\000\070\000\000\000\
\000\000\031\000\033\000\000\000\108\000\000\000\000\000\000\000\
\000\000\040\000\041\000\042\000\013\000\048\000\000\000\000\000\
\036\000\000\000\000\000\000\000\045\000\046\000\043\000\039\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\053\000\049\000\051\000\054\000"

let yydgoto = "\002\000\
\004\000\005\000\008\000\016\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\017\000\018\000\019\000\081\000\136\000\
\150\000\083\000\063\000\009\000\010\000\043\000\066\000\051\000\
\195\000\216\000\217\000\218\000\219\000\220\000\084\000\235\000\
\158\000\239\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\067\000\107\000\093\000\094\000\152\000"

let yysindex = "\018\000\
\020\255\000\000\012\255\000\000\063\255\000\000\050\255\137\255\
\000\000\063\255\000\000\049\255\058\255\058\255\058\255\005\001\
\137\255\137\255\137\255\000\000\233\254\000\000\059\255\064\255\
\075\255\021\255\235\254\031\255\094\255\050\255\109\000\005\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\255\073\255\000\000\050\255\050\255\050\255\050\255\001\255\
\000\000\000\000\097\255\050\255\001\255\050\255\001\255\099\255\
\000\000\000\000\000\000\058\255\000\000\111\255\116\255\000\000\
\050\255\106\255\000\000\050\255\050\255\050\255\050\255\000\000\
\001\255\000\000\113\255\122\255\001\255\001\255\000\000\000\000\
\139\255\060\255\148\255\082\001\000\000\000\000\000\000\000\000\
\000\000\157\255\000\000\000\000\000\000\000\000\050\255\145\255\
\140\255\192\255\155\255\050\255\000\000\050\255\179\255\000\000\
\198\255\207\255\227\255\231\255\234\255\241\255\074\001\058\255\
\228\255\048\255\000\000\001\255\001\255\001\255\001\255\001\255\
\000\000\189\255\237\000\237\000\237\000\237\000\237\000\237\000\
\055\255\134\255\254\255\245\255\000\000\253\255\000\000\003\000\
\000\000\000\000\050\255\001\255\050\255\001\255\001\255\001\255\
\001\255\000\000\000\000\058\255\001\255\088\001\252\000\004\000\
\201\255\011\000\027\000\027\000\000\000\255\255\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\015\000\000\000\
\016\000\019\000\000\000\035\000\001\255\001\255\030\000\000\000\
\233\255\000\000\027\000\027\000\027\000\027\000\000\000\007\255\
\001\255\001\255\000\000\000\000\189\255\058\255\034\000\058\255\
\038\000\031\000\039\000\209\000\221\000\001\255\000\000\001\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\
\058\255\000\000\000\000\233\000\000\000\235\000\236\254\042\000\
\046\000\000\000\000\000\000\000\000\000\000\000\189\255\065\255\
\000\000\058\255\045\000\043\000\000\000\000\000\000\000\000\000\
\040\000\180\255\000\000\086\255\063\000\072\001\043\000\043\000\
\000\000\237\000\237\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\032\001\000\000\000\000\000\000\062\001\000\000\000\000\094\001\
\000\000\078\001\000\000\039\001\000\000\000\000\000\000\000\000\
\094\001\094\001\094\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\001\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\069\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\255\000\000\000\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\000\000\000\000\000\000\000\000\000\000\000\
\209\255\000\000\246\255\000\000\000\000\023\000\000\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\087\000\000\000\
\166\000\164\255\107\255\168\000\000\000\000\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\116\000\000\000\
\089\000\143\000\000\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\180\000\182\000\194\000\206\000\000\000\000\000\
\081\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\179\000\085\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\249\255\000\000\
\026\000\250\255\060\000\116\001\000\000\009\000\218\255\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\025\000\007\000\
\069\255\000\000\129\000\000\000\135\255\000\000\000\000\000\000\
\000\000\000\000\067\001\190\255\000\000\000\000\086\000"

let yytablesize = 630
let yytable = "\012\000\
\159\000\203\000\108\000\022\000\011\000\022\000\023\000\024\000\
\025\000\068\000\069\000\070\000\071\000\096\000\042\000\098\000\
\223\000\041\000\001\000\049\000\050\000\052\000\056\000\117\000\
\118\000\072\000\011\000\022\000\073\000\119\000\120\000\088\000\
\003\000\224\000\042\000\227\000\061\000\062\000\064\000\065\000\
\088\000\052\000\074\000\075\000\065\000\076\000\065\000\077\000\
\047\000\059\000\078\000\079\000\080\000\042\000\006\000\200\000\
\131\000\065\000\052\000\048\000\106\000\106\000\109\000\110\000\
\117\000\118\000\007\000\159\000\101\000\053\000\119\000\120\000\
\228\000\082\000\178\000\011\000\117\000\118\000\097\000\021\000\
\099\000\022\000\119\000\120\000\022\000\229\000\230\000\065\000\
\044\000\072\000\011\000\022\000\062\000\240\000\062\000\149\000\
\074\000\166\000\111\000\121\000\045\000\159\000\114\000\115\000\
\046\000\147\000\074\000\075\000\057\000\076\000\072\000\011\000\
\022\000\060\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\054\000\167\000\170\000\095\000\106\000\100\000\074\000\
\075\000\102\000\076\000\176\000\055\000\106\000\105\000\106\000\
\106\000\013\000\014\000\015\000\151\000\183\000\153\000\154\000\
\155\000\156\000\106\000\160\000\161\000\162\000\163\000\164\000\
\165\000\103\000\106\000\106\000\117\000\118\000\112\000\137\000\
\022\000\138\000\119\000\120\000\113\000\177\000\116\000\179\000\
\180\000\181\000\182\000\117\000\118\000\132\000\184\000\074\000\
\169\000\119\000\120\000\133\000\104\000\157\000\104\000\204\000\
\122\000\206\000\104\000\104\000\068\000\069\000\070\000\071\000\
\104\000\104\000\135\000\038\000\039\000\040\000\196\000\197\000\
\129\000\130\000\215\000\104\000\072\000\011\000\022\000\073\000\
\139\000\151\000\151\000\104\000\104\000\072\000\011\000\157\000\
\157\000\117\000\118\000\215\000\134\000\074\000\075\000\212\000\
\076\000\213\000\077\000\079\000\157\000\078\000\079\000\080\000\
\237\000\214\000\157\000\157\000\140\000\079\000\141\000\079\000\
\079\000\079\000\079\000\079\000\079\000\244\000\245\000\142\000\
\231\000\117\000\118\000\143\000\079\000\079\000\144\000\119\000\
\120\000\168\000\171\000\238\000\241\000\145\000\057\000\057\000\
\057\000\057\000\246\000\247\000\057\000\057\000\201\000\202\000\
\199\000\148\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\172\000\173\000\118\000\057\000\057\000\175\000\
\187\000\057\000\057\000\174\000\188\000\057\000\057\000\059\000\
\059\000\059\000\059\000\117\000\118\000\059\000\059\000\189\000\
\194\000\119\000\120\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\190\000\191\000\192\000\059\000\059\000\
\193\000\226\000\061\000\061\000\198\000\208\000\059\000\059\000\
\075\000\075\000\075\000\075\000\205\000\209\000\075\000\075\000\
\207\000\225\000\233\000\234\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\242\000\236\000\002\000\075\000\
\075\000\086\000\084\000\062\000\062\000\090\000\092\000\075\000\
\075\000\056\000\056\000\056\000\056\000\116\000\047\000\056\000\
\056\000\118\000\081\000\117\000\058\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\020\000\232\000\037\000\
\056\000\056\000\038\000\104\000\065\000\065\000\065\000\065\000\
\056\000\056\000\065\000\065\000\000\000\000\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\000\000\000\000\000\000\065\000\065\000\000\000\000\000\068\000\
\068\000\068\000\068\000\065\000\065\000\068\000\068\000\000\000\
\000\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\000\000\000\000\068\000\068\000\
\105\000\000\000\107\000\000\000\105\000\105\000\068\000\068\000\
\000\000\000\000\105\000\105\000\107\000\107\000\109\000\000\000\
\110\000\000\000\000\000\000\000\000\000\105\000\000\000\107\000\
\109\000\109\000\110\000\110\000\111\000\105\000\105\000\107\000\
\107\000\000\000\000\000\109\000\000\000\110\000\111\000\111\000\
\112\000\117\000\118\000\109\000\109\000\110\000\110\000\119\000\
\120\000\111\000\112\000\112\000\000\000\117\000\118\000\000\000\
\000\000\111\000\111\000\119\000\120\000\112\000\000\000\000\000\
\210\000\117\000\118\000\117\000\118\000\112\000\112\000\119\000\
\120\000\119\000\120\000\000\000\211\000\072\000\011\000\022\000\
\000\000\026\000\027\000\028\000\000\000\000\000\186\000\000\000\
\221\000\000\000\222\000\029\000\030\000\000\000\074\000\075\000\
\000\000\076\000\123\000\124\000\125\000\126\000\127\000\128\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\021\000\021\000\
\000\000\000\000\000\000\000\000\000\000\023\000\023\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\017\000\017\000\
\017\000\000\000\017\000\017\000\017\000\026\000\026\000\000\000\
\000\000\000\000\000\000\000\000\017\000\017\000\019\000\019\000\
\019\000\000\000\019\000\019\000\019\000\000\000\000\000\000\000\
\117\000\118\000\117\000\118\000\019\000\019\000\119\000\120\000\
\119\000\120\000\009\000\009\000\009\000\243\000\146\000\000\000\
\117\000\118\000\185\000\000\000\009\000\009\000\119\000\120\000\
\123\000\124\000\125\000\126\000\127\000\128\000"

let yycheck = "\007\000\
\122\000\189\000\069\000\027\001\026\001\027\001\013\000\014\000\
\015\000\009\001\010\001\011\001\012\001\052\000\021\000\054\000\
\037\001\041\001\001\000\027\000\027\000\020\001\030\000\017\001\
\018\001\025\001\026\001\027\001\028\001\023\001\024\001\029\001\
\013\001\054\001\041\000\223\000\044\000\045\000\046\000\047\000\
\038\001\040\001\042\001\043\001\052\000\045\001\054\000\047\001\
\028\001\041\000\050\001\051\001\052\001\060\000\043\001\049\001\
\095\000\065\000\028\001\039\001\068\000\069\000\070\000\071\000\
\017\001\018\001\004\001\189\000\060\000\039\001\023\001\024\001\
\008\001\048\000\141\000\026\001\017\001\018\001\053\000\031\001\
\055\000\027\001\023\001\024\001\027\001\021\001\022\001\095\000\
\030\001\025\001\026\001\027\001\100\000\008\001\102\000\048\001\
\042\001\043\001\073\000\040\001\037\001\223\000\077\000\078\000\
\030\001\112\000\042\001\043\001\000\000\045\001\025\001\026\001\
\027\001\041\001\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\028\001\129\000\130\000\028\001\019\001\028\001\042\001\
\043\001\019\001\045\001\139\000\039\001\141\000\029\001\029\001\
\030\001\001\001\002\001\003\001\116\000\148\000\117\000\118\000\
\119\000\120\000\040\001\123\000\124\000\125\000\126\000\127\000\
\128\000\038\001\048\001\049\001\017\001\018\001\046\001\100\000\
\027\001\102\000\023\001\024\001\043\001\140\000\028\001\142\000\
\143\000\144\000\145\000\017\001\018\001\029\001\149\000\042\001\
\043\001\023\001\024\001\040\001\017\001\189\000\019\001\190\000\
\037\001\192\000\023\001\024\001\009\001\010\001\011\001\012\001\
\029\001\030\001\040\001\017\000\018\000\019\000\173\000\174\000\
\044\001\045\001\209\000\040\001\025\001\026\001\027\001\028\001\
\030\001\185\000\186\000\048\001\049\001\025\001\026\001\223\000\
\224\000\017\001\018\001\226\000\029\001\042\001\043\001\198\000\
\045\001\200\000\047\001\019\001\236\000\050\001\051\001\052\001\
\053\001\208\000\242\000\243\000\039\001\029\001\032\001\031\001\
\032\001\033\001\034\001\035\001\036\001\239\000\240\000\021\001\
\224\000\017\001\018\001\021\001\044\001\045\001\021\001\023\001\
\024\001\129\000\130\000\234\000\236\000\021\001\017\001\018\001\
\019\001\020\001\242\000\243\000\023\001\024\001\185\000\186\000\
\040\001\046\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\029\001\039\001\018\001\040\001\041\001\029\001\
\029\001\044\001\045\001\039\001\038\001\048\001\049\001\017\001\
\018\001\019\001\020\001\017\001\018\001\023\001\024\001\019\001\
\014\001\023\001\024\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\046\001\046\001\046\001\040\001\041\001\
\046\001\020\001\044\001\045\001\039\001\039\001\048\001\049\001\
\017\001\018\001\019\001\020\001\043\001\039\001\023\001\024\001\
\043\001\040\001\038\001\041\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\030\001\054\001\000\000\040\001\
\041\001\029\001\029\001\044\001\045\001\029\001\021\001\048\001\
\049\001\017\001\018\001\019\001\020\001\029\001\039\001\023\001\
\024\001\029\001\038\001\029\001\032\000\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\010\000\226\000\040\001\
\040\001\041\001\040\001\065\000\017\001\018\001\019\001\020\001\
\048\001\049\001\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\040\001\041\001\255\255\255\255\017\001\
\018\001\019\001\020\001\048\001\049\001\023\001\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\040\001\041\001\
\019\001\255\255\019\001\255\255\023\001\024\001\048\001\049\001\
\255\255\255\255\029\001\030\001\029\001\030\001\019\001\255\255\
\019\001\255\255\255\255\255\255\255\255\040\001\255\255\040\001\
\029\001\030\001\029\001\030\001\019\001\048\001\049\001\048\001\
\049\001\255\255\255\255\040\001\255\255\040\001\029\001\030\001\
\019\001\017\001\018\001\048\001\049\001\048\001\049\001\023\001\
\024\001\040\001\029\001\030\001\255\255\017\001\018\001\255\255\
\255\255\048\001\049\001\023\001\024\001\040\001\255\255\255\255\
\040\001\017\001\018\001\017\001\018\001\048\001\049\001\023\001\
\024\001\023\001\024\001\255\255\040\001\025\001\026\001\027\001\
\255\255\005\001\006\001\007\001\255\255\255\255\019\001\255\255\
\040\001\255\255\040\001\015\001\016\001\255\255\042\001\043\001\
\255\255\045\001\031\001\032\001\033\001\034\001\035\001\036\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\255\255\255\255\255\255\
\017\001\018\001\017\001\018\001\015\001\016\001\023\001\024\001\
\023\001\024\001\005\001\006\001\007\001\030\001\029\001\255\255\
\017\001\018\001\019\001\255\255\015\001\016\001\023\001\024\001\
\031\001\032\001\033\001\034\001\035\001\036\001"

let yynames_const = "\
  VAR\000\
  ARRAY\000\
  CONST\000\
  TYPE\000\
  INIT\000\
  TRANSITION\000\
  INVARIANT\000\
  CASE\000\
  FORALL\000\
  EXISTS\000\
  FORALL_OTHER\000\
  EXISTS_OTHER\000\
  SIZEPROC\000\
  REQUIRE\000\
  UNSAFE\000\
  PREDICATE\000\
  OR\000\
  AND\000\
  COMMA\000\
  PV\000\
  DOT\000\
  QMARK\000\
  IMP\000\
  EQUIV\000\
  LEFTPAR\000\
  RIGHTPAR\000\
  COLON\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  LEFTSQ\000\
  RIGHTSQ\000\
  LEFTBR\000\
  RIGHTBR\000\
  BAR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  THEN\000\
  ELSE\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  UNDERSCORE\000\
  AFFECT\000\
  EOF\000\
  "

let yynames_block = "\
  CONSTPROC\000\
  LIDENT\000\
  MIDENT\000\
  REAL\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'size_proc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'symbold_decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    Obj.repr(
# 124 "parserc.mly"
( let ptype_defs = _2 in
  let pconsts, pglobals, parrays = _3 in
  psystem_of_decls ~pglobals ~pconsts ~parrays ~ptype_defs _4
   |> encode_psystem 
)
# 580 "parserc.ml"
               : Ast.system))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 132 "parserc.mly"
         ( [_1] )
# 587 "parserc.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 133 "parserc.mly"
                   ( _1 :: _2 )
# 595 "parserc.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 137 "parserc.mly"
         ( PInit _1 )
# 602 "parserc.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invariant) in
    Obj.repr(
# 138 "parserc.mly"
              ( PInv _1 )
# 609 "parserc.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsafe) in
    Obj.repr(
# 139 "parserc.mly"
           ( PUnsafe _1 )
# 616 "parserc.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'transition) in
    Obj.repr(
# 140 "parserc.mly"
               ( PTrans _1 )
# 623 "parserc.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_decl) in
    Obj.repr(
# 141 "parserc.mly"
                  ( PFun  )
# 630 "parserc.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parserc.mly"
    ( [], [], [] )
# 636 "parserc.ml"
               : 'symbold_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'const_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'symbold_decls) in
    Obj.repr(
# 146 "parserc.mly"
      ( let consts, vars, arrays = _2 in (_1::consts), vars, arrays )
# 644 "parserc.ml"
               : 'symbold_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'symbold_decls) in
    Obj.repr(
# 148 "parserc.mly"
      ( let consts, vars, arrays = _2 in consts, (_1::vars), arrays )
# 652 "parserc.ml"
               : 'symbold_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'symbold_decls) in
    Obj.repr(
# 150 "parserc.mly"
      ( let consts, vars, arrays = _2 in consts, vars, (_1::arrays) )
# 660 "parserc.ml"
               : 'symbold_decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'lident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'lident_comma_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 154 "parserc.mly"
                                                                            (
    add_fun_def _2 _4 _7
  )
# 671 "parserc.ml"
               : 'function_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 160 "parserc.mly"
                            ( 
    if Hstring.equal _4 hint || Hstring.equal _4 hreal then Smt.set_arith true;
    Globals.add _2; 
    loc (), _2, _4 )
# 682 "parserc.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 167 "parserc.mly"
                              ( 
    if Hstring.equal _4 hint || Hstring.equal _4 hreal then Smt.set_arith true;
    Consts.add _2;
    loc (), _2, _4 )
# 693 "parserc.ml"
               : 'const_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'mident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'lident_list_plus) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 174 "parserc.mly"
                                                              ( 
        if not (List.for_all (fun p -> Hstring.equal p hproc) _4) then
          raise Parsing.Parse_error;
        if Hstring.equal _7 hint || Hstring.equal _7 hreal then Smt.set_arith true;
	Arrays.add _2;
	loc (), _2, (_4, _7))
# 707 "parserc.ml"
               : 'array_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parserc.mly"
    ( [] )
# 713 "parserc.ml"
               : 'type_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_def_plus) in
    Obj.repr(
# 184 "parserc.mly"
                  ( _1 )
# 720 "parserc.ml"
               : 'type_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_def) in
    Obj.repr(
# 188 "parserc.mly"
             ( [_1] )
# 727 "parserc.ml"
               : 'type_def_plus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_def_plus) in
    Obj.repr(
# 189 "parserc.mly"
                           ( _1::_2 )
# 735 "parserc.ml"
               : 'type_def_plus))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "parserc.mly"
    ( () )
# 741 "parserc.ml"
               : 'size_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Num.num) in
    Obj.repr(
# 194 "parserc.mly"
                 ( Options.size_proc := Num.int_of_num _2 )
# 748 "parserc.ml"
               : 'size_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 198 "parserc.mly"
                ( (loc (), (_2, [])) )
# 755 "parserc.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'constructors) in
    Obj.repr(
# 200 "parserc.mly"
      ( Smt.set_sum true; List.iter Constructors.add _4; (loc (), (_2, _4)) )
# 763 "parserc.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'constructors) in
    Obj.repr(
# 202 "parserc.mly"
      ( Smt.set_sum true; List.iter Constructors.add _5; (loc (), (_2, _5)) )
# 771 "parserc.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 206 "parserc.mly"
           ( [_1] )
# 778 "parserc.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructors) in
    Obj.repr(
# 207 "parserc.mly"
                            ( _1::_3 )
# 786 "parserc.ml"
               : 'constructors))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 211 "parserc.mly"
                             ( loc (), [], _3 )
# 793 "parserc.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'lidents) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 212 "parserc.mly"
                                                      ( loc (), _3, _6 )
# 801 "parserc.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 216 "parserc.mly"
                                  ( loc (), [], _3 )
# 808 "parserc.ml"
               : 'invariant))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'lidents) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 217 "parserc.mly"
                                                           ( loc (), _3, _6 )
# 816 "parserc.ml"
               : 'invariant))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 221 "parserc.mly"
                               ( loc (), [], _3 )
# 823 "parserc.ml"
               : 'unsafe))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'lidents) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 222 "parserc.mly"
                                                        ( loc (), _3, _6 )
# 831 "parserc.ml"
               : 'unsafe))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 226 "parserc.mly"
           (_1)
# 838 "parserc.ml"
               : 'transition_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 227 "parserc.mly"
           (_1)
# 845 "parserc.ml"
               : 'transition_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'transition_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'lidents) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'require) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'assigns_nondets_updates) in
    Obj.repr(
# 233 "parserc.mly"
      ( let assigns, nondets, upds = _8 in
	  { ptr_name = _2;
            ptr_args = _4; 
	    ptr_reqs = _6;
	    ptr_assigns = assigns; 
	    ptr_nondets = nondets; 
	    ptr_upds = upds;
            ptr_loc = loc ();
          }
      )
# 864 "parserc.ml"
               : 'transition))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "parserc.mly"
     ( [], [], [] )
# 870 "parserc.ml"
               : 'assigns_nondets_updates))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assign_nondet_update) in
    Obj.repr(
# 248 "parserc.mly"
      (  
	match _1 with
	  | Assign (x, y) -> [x, y], [], []
	  | Nondet x -> [], [x], []
	  | Upd x -> [], [], [x]
      )
# 882 "parserc.ml"
               : 'assigns_nondets_updates))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assign_nondet_update) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assigns_nondets_updates) in
    Obj.repr(
# 255 "parserc.mly"
      ( 
	let assigns, nondets, upds = _3 in
	match _1 with
	  | Assign (x, y) -> (x, y) :: assigns, nondets, upds
	  | Nondet x -> assigns, x :: nondets, upds
	  | Upd x -> assigns, nondets, x :: upds
      )
# 896 "parserc.ml"
               : 'assigns_nondets_updates))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
    Obj.repr(
# 265 "parserc.mly"
               ( _1 )
# 903 "parserc.ml"
               : 'assign_nondet_update))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nondet) in
    Obj.repr(
# 266 "parserc.mly"
           ( _1 )
# 910 "parserc.ml"
               : 'assign_nondet_update))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'update) in
    Obj.repr(
# 267 "parserc.mly"
           ( _1 )
# 917 "parserc.ml"
               : 'assign_nondet_update))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 271 "parserc.mly"
                       ( Assign (_1, PUTerm _3) )
# 925 "parserc.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'switchs) in
    Obj.repr(
# 272 "parserc.mly"
                               ( Assign (_1, PUCase _4) )
# 933 "parserc.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    Obj.repr(
# 276 "parserc.mly"
                      ( Nondet _1 )
# 940 "parserc.ml"
               : 'nondet))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    Obj.repr(
# 277 "parserc.mly"
                        ( Nondet _1 )
# 947 "parserc.ml"
               : 'nondet))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "parserc.mly"
    ( PAtom (AAtom (Atom.True)) )
# 953 "parserc.ml"
               : 'require))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 282 "parserc.mly"
                                ( _3 )
# 960 "parserc.ml"
               : 'require))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'mident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'proc_name_list_plus) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'switchs) in
    Obj.repr(
# 287 "parserc.mly"
      ( List.iter (fun p ->
          if (Hstring.view p).[0] = '#' then
            raise Parsing.Parse_error;
        ) _3;
        Upd { pup_loc = loc (); pup_arr = _1; pup_arg = _3; pup_swts = _7} )
# 973 "parserc.ml"
               : 'update))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'mident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'proc_name_list_plus) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 293 "parserc.mly"
      ( let cube, rjs =
          List.fold_left (fun (cube, rjs) i ->
            let j = fresh_var () in
            let c = PAtom (AEq (TVar j, TVar i)) in
            c :: cube, j :: rjs) ([], []) _3 in
        let a = PAnd cube in
        let js = List.rev rjs in
	let sw = [(a, _6); (PAtom (AAtom Atom.True), TTerm (Access(_1, js)))] in
	Upd { pup_loc = loc (); pup_arr = _1; pup_arg = js; pup_swts = sw}  )
# 990 "parserc.ml"
               : 'update))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 305 "parserc.mly"
                              ( [(PAtom (AAtom (Atom.True)), _4)] )
# 997 "parserc.ml"
               : 'switchs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'switch) in
    Obj.repr(
# 306 "parserc.mly"
               ( [_2] )
# 1004 "parserc.ml"
               : 'switchs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'switch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'switchs) in
    Obj.repr(
# 307 "parserc.mly"
                       ( _2::_3 )
# 1012 "parserc.ml"
               : 'switchs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 311 "parserc.mly"
                    ( _1, _3 )
# 1020 "parserc.ml"
               : 'switch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Num.num) in
    Obj.repr(
# 316 "parserc.mly"
         ( ConstReal _1 )
# 1027 "parserc.ml"
               : 'constnum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Num.num) in
    Obj.repr(
# 317 "parserc.mly"
        ( ConstInt _1 )
# 1034 "parserc.ml"
               : 'constnum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 321 "parserc.mly"
           ( 
      if Consts.mem _1 then Const (MConst.add (ConstName _1) 1 MConst.empty)
      else Elem (_1, sort _1) )
# 1043 "parserc.ml"
               : 'var_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_name) in
    Obj.repr(
# 324 "parserc.mly"
              ( Elem (_1, Var) )
# 1050 "parserc.ml"
               : 'var_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_term) in
    Obj.repr(
# 328 "parserc.mly"
             ( match _1 with
      | Elem (v, Var) -> TVar v
      | _ -> TTerm _1 )
# 1059 "parserc.ml"
               : 'top_id_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'proc_name_list_plus) in
    Obj.repr(
# 335 "parserc.mly"
                                              (
    Access (_1, _3)
  )
# 1069 "parserc.ml"
               : 'array_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_term) in
    Obj.repr(
# 341 "parserc.mly"
             ( _1 )
# 1076 "parserc.ml"
               : 'var_or_array_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_term) in
    Obj.repr(
# 342 "parserc.mly"
               ( _1 )
# 1083 "parserc.ml"
               : 'var_or_array_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constnum) in
    Obj.repr(
# 347 "parserc.mly"
      ( Arith(_1, MConst.add _3 1 MConst.empty) )
# 1091 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constnum) in
    Obj.repr(
# 349 "parserc.mly"
      ( Arith(_1, MConst.add _3 (-1) MConst.empty) )
# 1099 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 351 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _3) 1 MConst.empty) )
# 1107 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Num.num) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 353 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _5) (Num.int_of_num _3) MConst.empty) )
# 1116 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Num.num) in
    Obj.repr(
# 355 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _3) (Num.int_of_num _5) MConst.empty) )
# 1125 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 357 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _3) (-1) MConst.empty) )
# 1133 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Num.num) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 359 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _5) (- (Num.int_of_num _3)) MConst.empty) )
# 1142 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'var_or_array_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'mident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Num.num) in
    Obj.repr(
# 361 "parserc.mly"
      ( Arith(_1, MConst.add (ConstName _3) (- (Num.int_of_num _5)) MConst.empty) )
# 1151 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Num.num) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 363 "parserc.mly"
      ( Const(MConst.add (ConstName _3) (Num.int_of_num _1) MConst.empty) )
# 1159 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Num.num) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mident) in
    Obj.repr(
# 365 "parserc.mly"
      ( Const(MConst.add (ConstName _4) (- (Num.int_of_num _2)) MConst.empty) )
# 1167 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constnum) in
    Obj.repr(
# 366 "parserc.mly"
             ( Const (MConst.add _1 1 MConst.empty) )
# 1174 "parserc.ml"
               : 'arith_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_id_term) in
    Obj.repr(
# 370 "parserc.mly"
                ( _1 )
# 1181 "parserc.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_term) in
    Obj.repr(
# 371 "parserc.mly"
               ( TTerm _1 )
# 1188 "parserc.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_term) in
    Obj.repr(
# 372 "parserc.mly"
               ( Smt.set_arith true; TTerm _1 )
# 1195 "parserc.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 376 "parserc.mly"
           ( Hstring.make _1 )
# 1202 "parserc.ml"
               : 'lident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 380 "parserc.mly"
              ( Hstring.make _1 )
# 1209 "parserc.ml"
               : 'const_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 384 "parserc.mly"
           ( _1 )
# 1216 "parserc.ml"
               : 'proc_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_proc) in
    Obj.repr(
# 385 "parserc.mly"
               ( _1 )
# 1223 "parserc.ml"
               : 'proc_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_name) in
    Obj.repr(
# 389 "parserc.mly"
              ( [_1] )
# 1230 "parserc.ml"
               : 'proc_name_list_plus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proc_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proc_name_list_plus) in
    Obj.repr(
# 390 "parserc.mly"
                                        ( _1::_3 )
# 1238 "parserc.ml"
               : 'proc_name_list_plus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 394 "parserc.mly"
           ( Hstring.make _1 )
# 1245 "parserc.ml"
               : 'mident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 398 "parserc.mly"
           ( [_1] )
# 1252 "parserc.ml"
               : 'lidents_plus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lidents_plus) in
    Obj.repr(
# 399 "parserc.mly"
                        ( _1::_2 )
# 1260 "parserc.ml"
               : 'lidents_plus))
; (fun __caml_parser_env ->
    Obj.repr(
# 403 "parserc.mly"
    ( [] )
# 1266 "parserc.ml"
               : 'lidents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lidents_plus) in
    Obj.repr(
# 404 "parserc.mly"
                 ( _1 )
# 1273 "parserc.ml"
               : 'lidents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 408 "parserc.mly"
           ( [_1] )
# 1280 "parserc.ml"
               : 'lident_list_plus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lident_list_plus) in
    Obj.repr(
# 409 "parserc.mly"
                                  ( _1::_3 )
# 1288 "parserc.ml"
               : 'lident_list_plus))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "parserc.mly"
    ( [] )
# 1294 "parserc.ml"
               : 'lident_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident_list_plus) in
    Obj.repr(
# 415 "parserc.mly"
                     ( _1 )
# 1301 "parserc.ml"
               : 'lident_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lident) in
    Obj.repr(
# 419 "parserc.mly"
           ( [_1] )
# 1308 "parserc.ml"
               : 'lidents_plus_distinct))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lidents_plus_distinct) in
    Obj.repr(
# 420 "parserc.mly"
                                     ( _1 :: _3 )
# 1316 "parserc.ml"
               : 'lidents_plus_distinct))
; (fun __caml_parser_env ->
    Obj.repr(
# 434 "parserc.mly"
         ( AAtom Atom.True )
# 1322 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "parserc.mly"
          ( AAtom Atom.False )
# 1328 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 437 "parserc.mly"
                 ( AEq (_1, _3) )
# 1336 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 438 "parserc.mly"
                  ( ANeq (_1, _3) )
# 1344 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 439 "parserc.mly"
                 ( Smt.set_arith true; ALt (_1, _3) )
# 1352 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 440 "parserc.mly"
                 ( Smt.set_arith true; ALe (_1, _3) )
# 1360 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 441 "parserc.mly"
                 ( Smt.set_arith true; ALt (_3, _1) )
# 1368 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 442 "parserc.mly"
                 ( Smt.set_arith true; ALe (_3, _1) )
# 1376 "parserc.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 446 "parserc.mly"
                ( _1 )
# 1383 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 447 "parserc.mly"
             ( PNot _2 )
# 1390 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 448 "parserc.mly"
                  ( PAnd [_1; _3] )
# 1398 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 449 "parserc.mly"
                  ( POr [_1; _3] )
# 1406 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 450 "parserc.mly"
                  ( PImp (_1, _3) )
# 1414 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 451 "parserc.mly"
                    ( PEquiv (_1, _3) )
# 1422 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 452 "parserc.mly"
                                               ( PIte (_2, _4, _6) )
# 1431 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lidents_plus_distinct) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 453 "parserc.mly"
                                                            ( PForall (_2, _4) )
# 1439 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lidents_plus_distinct) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 454 "parserc.mly"
                                                            ( PExists (_2, _4) )
# 1447 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 455 "parserc.mly"
                                                   ( PForall_other ([_2], _4) )
# 1455 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 456 "parserc.mly"
                                                   ( PExists_other ([_2], _4) )
# 1463 "parserc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 460 "parserc.mly"
            ( PAtom _1 )
# 1470 "parserc.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 461 "parserc.mly"
                          ( _2 )
# 1477 "parserc.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_or_term_comma_list) in
    Obj.repr(
# 462 "parserc.mly"
                                                    ( app_fun _1 _3 )
# 1485 "parserc.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 468 "parserc.mly"
    ( [] )
# 1491 "parserc.ml"
               : 'expr_or_term_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 469 "parserc.mly"
          ( [PT _1] )
# 1498 "parserc.ml"
               : 'expr_or_term_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 470 "parserc.mly"
          ( [PF _1] )
# 1505 "parserc.ml"
               : 'expr_or_term_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_or_term_comma_list) in
    Obj.repr(
# 471 "parserc.mly"
                                       ( PT _1 :: _3 )
# 1513 "parserc.ml"
               : 'expr_or_term_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_or_term_comma_list) in
    Obj.repr(
# 472 "parserc.mly"
                                       ( PF _1 :: _3 )
# 1521 "parserc.ml"
               : 'expr_or_term_comma_list))
(* Entry system *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let system (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.system)
