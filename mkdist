#!/bin/bash

DISTDIR="./dist"

CUBTSO="peterson_2.cub         peterson_2_us.cub
        dekker_2.cub           dekker_2_us.cub
        mutex_N.cub            mutex_N_us.cub
        lamport_N.cub          lamport_N_us.cub
        spinlock_N.cub         spinlock_N_us.cub
        sense_rev_N.cub
	arbiter_v1_N.cub
        arbiter_v2_N.cub
        two_phase_N.cub
        moesi_N.cub
        msi_N.cub
        ticket_spin_lock_N.cub"

CBMC="peterson_2.c             peterson_2_us.c
      dekker_2.c               dekker_2_us.c
      mutex_*.c                mutex_*_us.c
      lamport_*.c              lamport_*_us.c
      spinlock_*.c
      sense_rev_*.c
      arbiter_v1_*.c
      arbiter_v2_*.c
      two_phase_*.c
      moesi_*.c
      msi_*.c"

MEMORAX="peterson_2.rmm        peterson_2_us.rmm
         dekker_2.rmm          dekker_2_us.rmm
         mutex_*.rmm           mutex_*_us.rmm
         lamport_*.rmm         lamport_*_us.rmm
         spinlock_*.rmm        spinlock_*_us.rmm
         sense_rev_*.rmm
         arbiter_v1_*.rmm
         arbiter_v2_*.rmm
         two_phase_*.rmm
         moesi_*.rmm
         msi_*.rmm"

TRENCHER="peterson_2.txt       peterson_2_us.txt
          dekker_2.txt         dekker_2_us.txt
          mutex_*.txt          mutex_*_us.txt
          lamport_*.txt        lamport_*_us.txt
          spinlock_*.txt
          sense_rev_*.txt
          arbiter_v1_*.txt
          arbiter_v2_*.txt
          two_phase_*.txt
          moesi_*.txt
          msi_*.txt"

LITMUS="*.cub"


OS=`uname -s`
HW=`uname -m`
SFX=-unk

if [ $OS = 'Darwin' ]; then SFX='-osx'
elif [ $OS = 'Linux' ] && [[ $HW =~ ^i[2-7]86$ ]]; then SFX='-linux32'
elif [ $OS = 'Linux' ] && [ $HW = 'x86_64' ]; then SFX='-linux64' ; fi

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd $BASEDIR

if [ -e $DISTDIR ]; then
   echo "Directory $DISTDIR already exists. Exiting."
   exit
fi

echo "Building Cubicle-W..."
make

if [ $? -ne 0 ]; then
   echo "Build failed. Exiting."
   exit
fi

echo "Creating directories..."
mkdir $DISTDIR
mkdir $DISTDIR/cubiclew
mkdir $DISTDIR/cubiclew/examples
mkdir $DISTDIR/cubiclew/litmus
mkdir $DISTDIR/examples
mkdir $DISTDIR/examples/cubicle
mkdir $DISTDIR/examples/cbmc
mkdir $DISTDIR/examples/memorax
mkdir $DISTDIR/examples/trencher
mkdir $DISTDIR/litmus

echo "Copying files (cubiclew)..."
cp cubiclew.opt $DISTDIR/cubiclew/cubiclew
for f in $CUBTSO;   do cp `ls tests/cubtso/$f`   $DISTDIR/cubiclew/examples; done
for f in $LITMUS;   do cp `ls tests/paper/$f`    $DISTDIR/cubiclew/litmus; done

echo "Copying files (examples)..."
for f in $CUBTSO;   do cp `ls tests/cubtso/$f`   $DISTDIR/examples/cubicle; done
for f in $CBMC;     do cp `ls tests/cbmc/$f`     $DISTDIR/examples/cbmc; done
for f in $MEMORAX;  do cp `ls tests/memorax/$f`  $DISTDIR/examples/memorax; done
for f in $TRENCHER; do cp `ls tests/trencher/$f` $DISTDIR/examples/trencher; done

echo "Copying files (litmus)..."
for f in $LITMUS;   do cp `ls tests/paper/$f`    $DISTDIR/litmus; done

pushd $DISTDIR > /dev/null

echo "Creating archive (cubiclew)..."
tar -czf cubiclew${SFX}.tar.gz cubiclew

echo "Creating archive (examples)..."
zip -rq examples.zip examples

echo "Creating archive (litmus)..."
zip -rq litmus.zip litmus

popd > /dev/null

echo "Done."
