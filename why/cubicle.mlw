theory FOL

   type t
   type structure

   predicate models structure t

   constant ffalse : t
   
   constant ttrue : t

   function neg t : t
   function and t t : t
   function or t t : t

   axiom extensionality :
     forall f1 f2 : t.
       (forall m : structure. models m f1 <-> models m f2) -> f1 = f2
   
   (* Just for instantiation *)
   axiom structure_exists :
     exists m : structure. exists f: t. models m f
     
   axiom true_false : ttrue <> ffalse
   
   axiom model_true :
     forall m : structure. models m ttrue
     
   axiom model_false :
     forall m : structure. not (models m ffalse)
          
   axiom model_neg :
     forall m : structure. forall f : t.
       models m (neg f) <-> not (models m f)
       
   axiom model_and :
      forall m : structure. forall f1 f2 : t.
        models m (and f1 f2) <-> models m f1 /\ models m f2
        
   axiom model_or :
      forall m : structure. forall f1 f2 : t.
        models m (or f1 f2) <-> models m f1 \/ models m f2
       
   predicate sat (f : t) = exists m: structure. models m f
   
   predicate valid (f : t) = not (sat (neg f))

   lemma valid_def :
     forall f : t. valid (f) <-> forall m: structure [m]. (models m f)
   
   lemma negneg : forall f: t [neg (neg f)]. neg (neg f) = f

   lemma and_a : forall f1 f2 f3 : t. and (and f1 f2) f3 = and f1 (and f2 f3)
   
   lemma and_c : forall f1 f2 : t. and f1 f2 = and f2 f1
   
   lemma or_a : forall f1 f2 f3 : t. or (or f1 f2) f3 = or f1 (or f2 f3)
   
   lemma or_c : forall f1 f2 : t. or f1 f2 = or f2 f1

   lemma distr_and :
     forall f1 f2 f3 : t. and f1 (or f2 f3) = or (and f1 f2) (and f1 f3)
     
   lemma distr_or :
     forall f1 f2 f3 : t. or f1 (and f2 f3) = and (or f1 f2) (or f1 f3)
     
   lemma neutral_and : forall f: t. and f ttrue = f
   
   lemma neutral_or : forall f: t. or f ffalse = f
   
   lemma absorb_and : forall f: t. and f ffalse = ffalse
   
   lemma absorb_or : forall f: t. or f ttrue = ttrue

   
   lemma sat_def: forall f: t. sat f <-> not (valid (neg f))
   
   lemma unsat_invalid : forall f: t. not (valid f) -> sat (neg f)

   lemma valid_sat : forall f: t. valid f -> sat f
   
   lemma ttrue_valid : valid ttrue
   lemma ffaslse_invalid : not (valid ffalse)
   lemma ttrue_sat : sat ttrue
   lemma ffalse_unsat : not (sat ffalse)


   lemma sat_neg :
     forall f : t.  not (sat f) -> sat (neg f)
   
   lemma valid_neg :
     forall f : t. valid (neg f) -> not (valid f)
   
   lemma sat_or :
     forall f1 f2 : t.
       sat (or f1 f2) <-> (sat f1) \/ (sat f2)
   
   lemma valid_and :
     forall f1 f2 : t.
       valid (and f1 f2) <-> (valid f1) /\ (valid f2)
   
   lemma valid_or :
     forall f1 f2 : t.
       (valid f1) \/ (valid f2) -> valid (or f1 f2)
   
   lemma sat_and :
     forall f1 f2 : t.
       sat (and f1 f2) -> (sat f1) /\ (sat f2)


   lemma forget_subsumed :
     forall f v : t.
       valid (or (neg f) v) -> or f v = v

   lemma classic_neg : forall f : t. or (neg f) f = ttrue


  (* Use AC builtin facility of Alt-Ergo but add AC axioms to others *)
  (* meta AC function and *)
  (* meta AC function or *)


  
end


theory Reachability

   use import FOL

   function pre t : t
 
   axiom pre_false : pre ffalse = ffalse
   

   function pre_star t : t
     
   axiom pre_star_def1 : forall f : t. valid (or (neg f) (pre_star f))
   axiom pre_star_def2 : forall f : t. pre (pre_star f) = pre_star f
   axiom pre_star_def3 : forall f : t. pre_star (pre_star f) = pre_star f
   axiom pre_star_def4 : forall f : t. (or (pre_star (pre f)) f) = pre_star f

   axiom pre_and :
     forall f1 f2 : t. pre (and f1 f2) = and (pre f1) (pre f2)
     
   axiom pre_or :
     forall f1 f2 : t. pre (or f1 f2) = or (pre f1) (pre f2)

     
   axiom pre_star_false : pre_star ffalse = ffalse
   
   axiom pre_star_and :
     forall f1 f2 : t. pre_star (and f1 f2) = and (pre_star f1) (pre_star f2)
     
   axiom pre_star_or :
     forall f1 f2 : t. pre_star (or f1 f2) = or (pre_star f1) (pre_star f2)
     
   predicate reachable (init : t) (f : t) = sat (and (pre_star f) init)
         
   axiom directly_reachable :
     forall init f : t. sat (and init f) -> reachable init f 
   
   lemma false_unreachable :
     forall init : t. not (reachable init ffalse)

   lemma reachable_or :
     forall f1 f2 init :t.
       reachable init (or f1 f2) <-> reachable init f1 \/ reachable init f2
       
   lemma reachable_and :
     forall f1 f2 init :t.
       reachable init (and f1 f2) -> reachable init f1 /\ reachable init f2

   lemma reachable_imply:
     forall x f init : t.
       valid (or (neg x) f) -> reachable init x -> reachable init f


  (* remove unecessary axioms for solvers *)
  meta remove_prop prop extensionality
  meta remove_prop prop structure_exists
  meta remove_prop prop model_true
  meta remove_prop prop model_false
  meta remove_prop prop model_and
  meta remove_prop prop model_or
  meta remove_prop prop model_neg
  meta remove_prop prop valid_def
  (* meta remove_prop prop and_a *)
  (* meta remove_prop prop and_c *)
  (* meta remove_prop prop or_a *)
  (* meta remove_prop prop or_c *)
  meta remove_prop prop sat_def
  (* meta remove_prop prop sat_or *)
  meta remove_prop prop sat_neg
  meta remove_prop prop sat_and
  meta remove_prop prop valid_or
  meta remove_prop prop valid_neg
  meta remove_prop prop valid_and
  meta remove_prop prop valid_sat
  meta remove_prop prop pre_star_def2
  meta remove_prop prop pre_star_def3
  meta remove_prop prop reachable_imply
  meta remove_prop prop reachable_and
  meta remove_prop prop pre_and
  meta remove_prop prop pre_or
  meta remove_prop prop unsat_invalid
end


module AbstractQueue

  use import FOL as F
  use import set.Fset as S
  use import Reachability

  type t model { mutable formula: F.t; mutable elts: S.set F.t }

  val create () : t ensures { result.formula = F.ffalse /\ result.elts = S.empty }

  val push (f: F.t) (q: t) : unit writes {q}
    ensures { q.formula = F.or f (old q.formula) /\
              q.elts = S.add f (old q.elts) }
  
  exception Empty

  val is_empty (q: t) : bool reads {q}
    ensures { result = True <-> (S.is_empty q.elts /\ q.formula = F.ffalse)}
    
  val pop (q: t) : F.t writes {q}
    ensures { not (S.is_empty (old q.elts)) /\ result = S.choose (old q.elts) /\
              q.elts = S.remove result (old q.elts) /\
              F.valid (F.or (F.neg result) (old q.formula)) /\
              q.formula = F.and (F.neg result) (old q.formula) }
    raises  { Empty -> S.is_empty q.elts /\ q.formula = F.ffalse /\
                       S.is_empty (old q.elts) /\ old q.formula = F.ffalse }


  val clear (q: t) : unit writes {q}
  ensures { q.formula = F.ffalse /\ q.elts = S.empty }

  val copy (q: t) : t ensures { result.formula = q.formula /\ result.elts = q.elts }

end


module Cubicle

  use import ref.Ref
  use import FOL as F
  use import AbstractQueue as Q
  use import Reachability

  type result = Safe | Unsafe
  exception Unsafe_trace

  val visited : ref F.t
  val q : Q.t

    
  let bwd (init : F.t) (theta : F.t) =
    (* Soundness *)
    ensures { result = Safe -> not (reachable init theta) }
    (* Completeness *)
    ensures { result = Unsafe -> reachable init theta }
    visited := F.ffalse;
    Q.clear q;
    try
       if F.sat (F.and init theta) then raise Unsafe_trace;
       visited := F.or theta !visited;
       Q.push (pre theta) q;
       while not (Q.is_empty q) do
        invariant { not (sat (F.and init !visited)) &&
                    pre_star !visited = F.or !visited (pre_star q.formula) &&
                    pre_star theta = F.or !visited (pre_star q.formula) }
        let ghost old_q = Q.copy q in
        let phi = Q.pop q in
        if F.sat (F.and init phi) then raise Unsafe_trace;
        if not (F.valid (F.or (F.neg phi) !visited)) then (
          let ghost old_v = !visited in
          visited := F.or phi !visited;
          Q.push (pre phi) q;
          assert { 
                   or !visited (pre_star q.formula) =
                    or old_v (pre_star (and F.ttrue (or phi old_q.formula))) }
        )
        else
          assert {
                valid (or (neg (neg phi)) (pre_star (neg phi)))

                &&

                or !visited (pre_star (and (neg phi) old_q.formula)) =
                and (or !visited (or ttrue (pre_star (neg phi)))) (pre_star !visited)

                &&

                or !visited (pre_star (and (neg phi) old_q.formula)) =
                and ttrue (pre_star !visited)
          }
        
       done;
      Safe
    with
        | Unsafe_trace -> Unsafe
        | Q.Empty -> absurd
    end
end
