theory Reachability

   use import fol.FOL

   function pre t : t
 
   axiom pre_false : pre ffalse = ffalse
   

   function pre_star t : t
     
   axiom pre_star_def1 : forall f : t. valid (f => pre_star f)
   axiom pre_star_def2 : forall f : t. pre (pre_star f) = pre_star f
   axiom pre_star_def3 : forall f : t. pre_star (pre_star f) = pre_star f
   axiom pre_star_def4 : forall f : t. ((pre_star (pre f)) ++ f) = pre_star f

   axiom pre_and :
     forall f1 f2 : t. pre (f1 & f2) = (pre f1) & (pre f2)
     
   axiom pre_or :
     forall f1 f2 : t. pre (f1 ++ f2) = (pre f1) ++ (pre f2)

     
   axiom pre_star_false : pre_star ffalse = ffalse
   
   axiom pre_star_and :
     forall f1 f2 : t. pre_star (f1 & f2) = (pre_star f1) & (pre_star f2)
     
   axiom pre_star_or :
     forall f1 f2 : t. pre_star (f1 ++ f2) = (pre_star f1) ++ (pre_star f2)
     
   predicate reachable (init : t) (f : t) = sat ((pre_star f) & init)
         
   axiom directly_reachable :
     forall init f : t. sat (init & f) -> reachable init f 
   
   lemma false_unreachable :
     forall init : t. not (reachable init ffalse)

   lemma reachable_or :
     forall f1 f2 init :t.
       reachable init (f1 ++ f2) <-> reachable init f1 \/ reachable init f2
       
   lemma reachable_and :
     forall f1 f2 init :t.
       reachable init (f1 & f2) -> reachable init f1 /\ reachable init f2

   lemma reachable_imply:
     forall x f init : t.
       valid (x => f) -> reachable init x -> reachable init f

   lemma reachable_bigger:
     forall f1 f2 init : t.
       f1 |== f2 -> reachable init f1 -> reachable init f2

   lemma pre_star_bigger:
     forall f1 f2 : t.
       f1 |== f2 -> pre_star f1 |== pre_star f2

end
