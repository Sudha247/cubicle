<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set sts=2 sw=2: -->
<!--
 Author: Eric Cooper <ecc@cmu.edu>
 Copyright (C) 2007 Eric Cooper <ecc@cmu.edu>
 Copyright (C) 2007 Eric Norige <thelema314@gmail.com>
 Copyright (C) 2009 Alexandr Kuleshov <sterh@live.ru>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
-->




<!-- ~/.local/share/gtksourceview-2.0/language-specs/ -->


<language id="cubicle" _name="Cubicle" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-ocaml</property>
    <property name="globs">*.cub</property>
    <property name="block-comment-start">(*</property>
    <property name="block-comment-end">*)</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="identifier" _name="Identifier" map-to="def:identifier"/>
    <style id="constant" _name="Constant" map-to="def:special-constant"/>
    <style id="ocamldoc" _name="Ocamldoc Comments" map-to="def:note"/>
    <style id="statement" _name="Satement" map-to="def:statement"/>
    <style id="base-n-integer" _name="Base-N Integer" map-to="def:base-n-integer"/>
    <style id="floating-point" _name="Floating Point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="meta-keyword" _name="Type, module or object keyword" map-to="def:keyword"/>
    <style id="fun-keyword" _name="Builtin-function keyword" map-to="def:keyword"/>
    <style id="preprocessor" _name="Preprocessor" map-to="def:preprocessor"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="label" _name="Labeled argument" map-to="def:type"/>
    <style id="poly-variant" _name="Polymorphic Variant" map-to="def:type"/>
    <style id="variant" _name="Variant Constructor" map-to="def:type"/>
    <style id="type-var" _name="Type Variable" map-to="def:type"/>
    <style id="module" _name="Module Path" map-to="def:type"/>
    <style id="escape" _name="Escaped Character" map-to="def:special-char"/>
    <style id="boolean" _name="Boolean value" map-to="def:boolean"/>
    <style id="error" _name="Error" map-to="def:error"/>
    <style id="std-modules" _name="Standart Modules" map-to="def:type"/>
  </styles>

  <definitions>
    <define-regex id="cap-ident">\b[A-Z][A-Za-z0-9_']*</define-regex>
    <define-regex id="low-ident">\b[a-z][A-Za-z0-9_']*</define-regex>
    <define-regex id="char-esc">\\((\\|"|'|n|t|b|r)|[0-9]{3}|x[0-9a-fA-F]{2})</define-regex>

    <context id="escape-seq" style-ref="escape">
      <match>\%{char-esc}</match>
    </context>

    <!-- here's the main context -->
    <context id="cubicle" class="no-spell-check">
      <include>
	<context id="ocamldoc" style-ref="ocamldoc">
	  <start>\(\*\*</start>
	  <end>\*\)</end>
	  <include>
	    <context id="comment-in-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
	      <start>\(\*</start>
	      <end>\*\)</end>
	      <include>
		<context ref="comment-in-comment"/>
		<context ref="def:in-comment:*"/>
	      </include>
	    </context>
	    <context ref="def:in-comment:*"/>
	  </include>
	</context>
	<context id="comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
	  <start>\(\*</start>
	  <end>\*\)</end>
	  <include>
	    <context ref="comment-in-comment"/>
	    <context ref="def:in-comment:*"/>
	  </include>
	</context>


	<context id="transition">
          <match>(transition)(\s)*([a-z][A-Za-z0-9_']*)</match>
          <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="3" style-ref="comment"/>
          </include>
        </context>

	<context id="type">
          <match>(type)(\s)*([a-z][A-Za-z0-9_']*)</match>
          <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="3" style-ref="type"/>
          </include>
        </context>

	<context id="and" >
          <match>&amp;&amp;</match>
        </context>

	<context id="or" >
          <match>\||\||</match>
        </context>

	<context id="var">
          <match>(var)(\s)*([A-Z][A-Za-z0-9_']*)(\s)*:(\s)*([a-z][A-Za-z0-9_']*)</match>
          <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="6" style-ref="type"/>
          </include>
        </context>

	<context id="array">
          <match>(array)(\s)([A-Z][A-Za-z0-9_']*)(\s)*\[([a-z][A-Za-z0-9_']*)\](\s)*:(\s)*([a-z][A-Za-z0-9_']*)</match>
          <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="5" style-ref="type"/>
            <context sub-pattern="8" style-ref="type"/>
          </include>
        </context>


	<context id="keywords" style-ref="keyword">
	  <keyword>array</keyword>
	  <keyword>var</keyword>
	  <keyword>const</keyword>
	  <keyword>case</keyword>
	</context>


	<context id="builtins" style-ref="constant" >
          <keyword>init</keyword>
          <keyword>unsafe</keyword>
          <keyword>invariant</keyword>
          <keyword>requires</keyword>
          <keyword>forall_other</keyword>
	</context>

	<context id="types" style-ref="type">
	  <keyword>bool</keyword>
	  <keyword>int</keyword>
	  <keyword>real</keyword>
	  <keyword>proc</keyword>
	</context>

     <context id="constant" style-ref="identifier">
          <match>\%{low-ident}</match>
        </context>

        <context id="number" style-ref="decimal">
          <match>[0-9]*</match>
        </context>

      </include>
    </context>
  </definitions>
</language>
