(* variables definition *)

(* Round of the execution *)
var Round : int
(* estimate of the processes (true = m; false = undefined) *)
array Estimate[proc] : bool
(* state of the processes (true = decided; false = undecided) *)
array State[proc] : bool
(* who's the coordinator *)
array Coord[proc] : bool
(* who has already been coordinator *)
array ACoord [proc] : bool
(* processes that has done the operations of the round *)
array Done[proc] : bool
(* someone sent a request? *)
var Request : bool
(* decision value of the processes (as estimate)*)
array DecisionValue[proc] : bool
(* the process is faulty (as defined in send omission failure model) *)
array Faulty[proc] : bool
(* the process has received the estimate from the coordinator *)
array Received[proc] : bool
(* if nack[x] = true, process x received a negative ack *)
array Nack[proc] : bool



(* initial configuration *)
init (x) {
  Round = 1 && State[x] = False && Coord[x] = False &&
  ACoord[x] = False && Done[x] = False && Request = False && 
  Faulty[x] = False && Received[x] = False && Nack[x] = False
}

(* unsafe configuration (agreement) *)
unsafe (x y) {
  State[x] = True && Faulty[x] = False && 
  State[y] = True && Faulty[y] = False && 
  DecisionValue[x] <> DecisionValue[y]
}



(* 1) An undecided process sends a request message to the coordinator *)
transition t1 (x y)
requires { Round = 1 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{
    Request := True;
    Done[x] := True;
}

(* 2) A faulty undecided process fails sending the request message *)
transition t2 (x y)
requires { Round = 1 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{
    Faulty[x] := True;
    Done[x] := True;
}

(* 3) An undecided coordinator sends a request to himself *)
transition t3 (x)
requires { Round = 1 && Done[x] = False &&
           State[x] = False && Coord[x] = True }
{
    Request := True;
    Done[x] := True;
}

(* 4) If the coordinator received at least one request
      all the processes go in round 2 *)
transition t4 (x)
requires { Round = 1 && Request = True &&
           Done[x] = True && Coord[x] = True &&
           forall_other j. Done[j] = True }
{
    Round := 2;
    Done[j] := case | _ : False;
}

(* 5) If the coordinator didn't received any request is dismissed *)
transition t5 (x)
requires { Round = 1 && Request = False &&
           Done[x] = True && Coord[x] = True &&
           forall_other j. Done[j] = True }
{
    Coord[x] := False;
    ACoord[x] := True;
}

(* 6) The coordinator sends his estimate to an undecided process *)
transition t6 (x y)
requires { Round = 2 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{
    Estimate[x] := Estimate[y];
    Done[x] := True;
    Received[x] := True;
}

(* 7) A faulty coordinator fails sending his estimate *)
transition t7 (x y)
requires { Round = 2 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{
    Done[x] := True;
    Faulty[y] := True;
}

(* 8) The coordinator does nothing in this round *)
transition t8 (x)
requires { Round = 2 && Done[x] = False &&
           State[x] = False && Coord[x] = True }
{
    Done[x] := True;
}

(* 9) Round 2 completed. System goes to round 3 *)
transition t9 (x)
requires { Round = 2 && Done[x] = True && Coord[x] = True &&
           forall_other j. Done[j] = True }
{ 
    Round := 3;
    Done[j] := case | _ : False;
}

(* 10) If an undecided process didn't received the estimate
       sends a nack to the coordinator *)
transition t10 (x y)
requires { Round = 3 && State[x] = False && Done[x] = False &&
           Received[x] = False && Coord[y] = True }
{
    Done[x] := True;
    Nack[y] := True;
}

(* 11) A faulty process who didn't received the estimate fails sending a nack *)
transition t11 (x y)
requires { Round = 3 && State[x] = False && Done[x] = False &&
           Received[x] = False && Coord[y] = True }
{
    Faulty[x] := True;
    Done[x] := True;
}

(* 12) If an undecided process received the estimate does nothing *)
transition t12 (x y)
requires { Round = 3 && State[x] = False && Done[x] = False && 
           Received[x] = True && Coord[y] = True }
{
    Done[x] := True;
}

(* 13) The coordinator does nothing in this round *)
transition t13 (x)
requires { Round = 3 && State[x] = False &&
           Done[x] = False && Coord[x] = True }
{
    Done[x] := True;
}

(* 14) Round 3 completed, system goes to round 4 *)
transition t14 (x)
requires { Round = 3 && Done[x] = True && Coord[x] = True &&
           forall_other j. Done[j] = True }
{ 
    Round := 4;
}

(* 15) If the coordinator didn't received any nack the system goes to the 5th round. *)
transition t15 (x)
requires { Round = 4 && Coord[x] = False &&
           forall_other j. Nack[j] = False }
{ 
    Round := 5;
    Done[j] := case | _ : False;
}

(* 16) The coordinator sends a decide message *)
transition t16 (x y)
requires { Round = 5 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{ 
    State[x] := True;
    Done[x] := True;
    DecisionValue[x] := Estimate[x];
}

(* 17) The coordinator fails sending the decide message *)
transition t17 (x y)
requires { Round = 5 && Done[x] = False &&
           State[x] = False && Coord[y] = True }
{ 
    Done[x] := True;
    Faulty[y] := True;
}

(* 18) If the coordinator is undecided takes a decision. *)
transition t18 (x)
requires { Round = 5 && Done[x] = False &&
           State[x] = False && Coord[x] = True }
{ 
    State[x] := True;
    Done[x] := True;
    DecisionValue[x] := Estimate[x];
}

(* 19) Round 5 completed, system goes to round 6 *)
transition t19 (x)
requires { Round = 5 && Done[x] = True && Coord[x] = True &&
           forall_other j. Done[j] = True }
{ 
    Round := 6;
    Done[j] := case | _ : False;
}

(* 20) The coordinator in office is dismissed, a new process
       is elected as coordinator. The system restarts from round 1 *)
transition t20 (x y)
requires { Round = 6 && Coord[x] = True &&
           Coord[y] = False && ACoord[y] = False }
{ 
    Round := 1;
    Coord[j] := case
                | j = x : False
                | j = y : True
                | _ : Coord[j];
    ACoord[x] := True;
    Received[j] := case | _ : False;
    Request := False;
    Done[j] := case | _ : False;
    Nack[j] := case | _ : False;
}

(* 21) If there's no coordinator (maybe the coordinator in office crashed)
       a new one is elected and the system restarts from round 1 *)
transition t21 (x)
requires { Coord[x] = False && ACoord[x] = False &&
         forall_other j. Coord[j] = False }
{ 
    Round := 1;
    Coord[x] := True;
    Done[j] := case | _ : False;
    Request := False;
    Received[j] := case | _ : False;
    Nack[j] := case | _ : False;
}

(* 22) Decided processes follow undecided ones doing nothing *)
transition t22 (x)
requires { State[x] = True && Done[x] = False }
{ 
    Done[x] := True;
}
